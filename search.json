[
  {
    "objectID": "02_python/python-flow-loops-classes.html",
    "href": "02_python/python-flow-loops-classes.html",
    "title": "Flow, Loops, and Classes",
    "section": "",
    "text": "Scratch notebook for this session:",
    "crumbs": [
      "Python",
      "Flow, Loops, and Classes"
    ]
  },
  {
    "objectID": "02_python/python-flow-loops-classes.html#flow-control",
    "href": "02_python/python-flow-loops-classes.html#flow-control",
    "title": "Flow, Loops, and Classes",
    "section": "1. Flow Control",
    "text": "1. Flow Control\n\n1.1 Sequential Execution\nIn Python, code is executed one line at a time, from top to bottom, unless you use something that changes the flow (like a function call or a loop).\n\nprint(\"Step 1\")\nprint(\"Step 2\")\nprint(\"Step 3\")\n\nStep 1\nStep 2\nStep 3\n\n\nEach line is executed in order.\n\n\n1.2 Conditional Statements (if, elif, else)\nConditional statements let your code make decisions based on certain conditions.\n\n\n1.2.1 Basic Structure:\nif condition:\n    # code runs if condition is True\nelif other_condition:\n    # code runs if other_condition is True\nelse:\n    # code runs if none of the above are True\n\n# Example:\n\nage = 24\n\nif age &gt;= 21:\n    print(\"You can legally drink alcohol in the U.S.\")\nelif age &gt;= 18:\n    print(\"You are an adult, but not old enough to drink.\")\nelse:\n    print(\"You are a minor.\")\n\nYou can legally drink alcohol in the U.S.\n\n\n\n\n1.2.2 Multiple Conditions:\nYou can also combine conditions using and, or, and not.\n\n# Example\n\ntemperature_f = 75  # Fahrenheit\nis_raining = False\n\nif temperature_f &gt; 70 and not is_raining:\n    print(\"It's a great day for a baseball game!\")\n\nIt's a great day for a baseball game!\n\n\n\n\n1.3 Conditional (Ternary) Expressions\nA conditional (ternary) expression lets you assign a value based on a condition in a single line.\nSyntax: x = a if condition else b\n\n# Example\n\nage = 20\nstatus = \"can rent a car\" if age &gt;= 25 else \"cannot rent a car yet\"\nprint(status)\n\ncannot rent a car yet\n\n\n\n\n1.4 pass, break, continue\nThese keywords control how your code flows in loops and conditionals.\n\npass\npass does nothing. It’s used as a placeholder when code is required but you have nothing to write yet.\n\nif True:\n    pass  # Placeholder for future code\n\nSuppose you’re building a menu system for a fast-food restaurant app, and you haven’t yet decided what to do if the customer selects a menu item that’s “coming soon.” You want your code to run without errors, but you’re not ready to implement that part yet.\n\nmenu_item = \"Pumpkin Spice Latte\"\n\nif menu_item == \"Pumpkin Spice Latte\":\n    # Feature coming soon!\n    pass\nelse:\n    print(f\"Preparing your {menu_item}.\")\n\n\n\nbreak\nbreak exits the loop immediately.\n\nfor i in range(5):\n    if i == 2:\n        break\n    print(i)\n\n0\n1\n\n\nImagine you’re searching for a specific item (like your keys) in a list of rooms. As soon as you find the keys, you want to stop searching.\n\nrooms = [\"kitchen\", \"living room\", \"bedroom\", \"garage\"]\nfor room in rooms:\n    print(f\"Searching in the {room}...\")\n    if room == \"bedroom\":\n        print(\"Found the keys!\")\n        break\n\nSearching in the kitchen...\nSearching in the living room...\nSearching in the bedroom...\nFound the keys!\n\n\n\n\ncontinue\ncontinue skips the rest of the current loop iteration and moves to the next one.\n\nfor i in range(5):\n    if i == 2:\n        continue\n    print(i)\n\n0\n1\n3\n4\n\n\nSuppose you’re reading through a list of email subject lines. You want to print all of them except spam emails, which contain the word “SPAM.” You skip printing any email that’s spam.\n\nemails = [\"Meeting at 10am\", \"SPAM: Win a free iPhone\", \"Lunch plans?\", \"SPAM: Hot deals\"]\nfor subject in emails:\n    if \"SPAM\" in subject:\n        continue  # Skip spam emails\n    print(f\"Important email: {subject}\")\n\nImportant email: Meeting at 10am\nImportant email: Lunch plans?",
    "crumbs": [
      "Python",
      "Flow, Loops, and Classes"
    ]
  },
  {
    "objectID": "02_python/python-flow-loops-classes.html#loops",
    "href": "02_python/python-flow-loops-classes.html#loops",
    "title": "Flow, Loops, and Classes",
    "section": "2. Loops",
    "text": "2. Loops\n\n2.1 for Loops\nA for loop is used to repeat actions a certain number of times or to iterate over a sequence (like a list).\n\n# Print numbers from 0 to 4\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\nYou can loop over the elements of a list like this:\n\nanimals = ['cat', 'dog', 'monkey']\nfor animal in animals:\n    print(animal)\n\ncat\ndog\nmonkey\n\n\nIf you want access to the index of each element within the body of a loop, use the built-in enumerate() function:\n\nanimals = ['cat', 'dog', 'monkey']\nfor index, animal in enumerate(animals):\n    print('#{}: {}'.format(index + 1, animal))\n\n#1: cat\n#2: dog\n#3: monkey\n\n\n\n\n2.2 while Loops\nA while loop repeats actions as long as a condition is true.\n\ncount = 0\nwhile count &lt; 3:\n    print(count)\n    count += 1\n\n0\n1\n2\n\n\n\n\n2.3 Nested Loops\nA nested loop is a loop inside another loop.\n\nfor i in range(2):\n    for j in range(2):\n        print(f\"i={i}, j={j}\")\n\ni=0, j=0\ni=0, j=1\ni=1, j=0\ni=1, j=1\n\n\n\n\n2.4 Loops with else\nThe else part after a loop runs only if the loop was not stopped by a break.\n\nfor i in range(3):\n    print(i)\nelse:\n    print(\"Loop finished without break.\")\n\n0\n1\n2\nLoop finished without break.\n\n\n\n\n2.5 enumerate, zip\n\nenumerate\nenumerate gives you both the index and the value when looping over a list.\n\nnames = [\"Alice\", \"Bob\", \"Charlie\"]\nfor index, name in enumerate(names):\n    print(index, name)\n\n0 Alice\n1 Bob\n2 Charlie\n\n\n\n\nzip\nzip lets you loop over two (or more) lists at the same time.\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\ncolors = [\"red\", \"yellow\", \"red\"]\nfor fruit, color in zip(fruits, colors):\n    print(fruit, color)\n\napple red\nbanana yellow\ncherry red\n\n\n\n\n\n2.6 List Comprehensions\nA list comprehension is a short way to create a new list by looping over something.\n\n[i for i in range(10)]\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n[i**2 for i in range(10)]\n\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n\nWe can even add some conditions.\n\n[i for i in range(10) if i &gt; 5]\n\n[6, 7, 8, 9]\n\n\nMultiples of 2.\n\n[i for i in range(10) if i % 2 == 0]\n\n[0, 2, 4, 6, 8]\n\n\nPowers of 2.\n\n[i**2 for i in range(10)]\n\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n\nYou can nest comprehensions.\n\n[[[i, j] for i in range(5)] for j in range(5)]\n\n[[[0, 0], [1, 0], [2, 0], [3, 0], [4, 0]],\n [[0, 1], [1, 1], [2, 1], [3, 1], [4, 1]],\n [[0, 2], [1, 2], [2, 2], [3, 2], [4, 2]],\n [[0, 3], [1, 3], [2, 3], [3, 3], [4, 3]],\n [[0, 4], [1, 4], [2, 4], [3, 4], [4, 4]]]\n\n\nYou can concatenate multiple comprehensions.\n\n[[i, j] for i in range(5) for j in range(5) if i &lt; j]\n\n[[0, 1],\n [0, 2],\n [0, 3],\n [0, 4],\n [1, 2],\n [1, 3],\n [1, 4],\n [2, 3],\n [2, 4],\n [3, 4]]",
    "crumbs": [
      "Python",
      "Flow, Loops, and Classes"
    ]
  },
  {
    "objectID": "02_python/python-flow-loops-classes.html#classes-oop",
    "href": "02_python/python-flow-loops-classes.html#classes-oop",
    "title": "Flow, Loops, and Classes",
    "section": "3. Classes (OOP)",
    "text": "3. Classes (OOP)\n\n3.1 What is a Class? Why OOP?\nIn Python, a class is a code construct used to define a new type of object, grouping together data and functions that operate on that data. Classes provide a means of bundling data and functionality together. Creating a new class creates a new type of object, allowing new instances of that type to be made.\nObject-Oriented Programming (OOP) is a programming paradigm based on the concept of “objects,” which can contain both data (attributes) and code (methods).\nWhen you create an object using a class, that object is called an instance of the class.\n\nExample from the Python Standard Tutorial\n\n“Classes provide a means of bundling data and functionality together. Creating a new class creates a new type of object, allowing new instances of that type to be made. Each class instance can have attributes attached to it for maintaining its state. Class instances can also have methods (defined by its class) for modifying its state.” (Python Official Tutorial)\n\n\n\nSimple Example\nHere is a simple class that models a basic point in two-dimensional space:\n\nclass Point:\n    \"\"\"A class to represent a point in 2D space.\"\"\"\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\np = Point(2, 3)\nprint(p.x)  # Output: 2\nprint(p.y)  # Output: 3\n\n2\n3\n\n\nIn this example:\n\nPoint is a class.\np is an instance of Point, with specific x and y coordinates.\nThe init method is called the constructor and initializes the instance attributes.\n\n\n\n\n3.2 Defining a Class\nIn Python, a class is defined using the class keyword, followed by the class name and a colon. The body of the class contains statements that define its attributes and methods.\nHere is the simplest possible class definition:\n\nclass Dog:\n    pass  # 'pass' is a placeholder indicating an empty block\n\nThis statement defines a new class named Dog. At this stage, the class has no attributes (data) or methods (actions). It serves as a minimal template from which instances can be created.\nNote: By convention, class names in Python use the CapitalizedWords naming style (also known as CamelCase).\n\nExplanation\n\nclass Dog: declares a class named Dog.\nThe pass statement is syntactically required because Python expects an indented block after the colon; here, it indicates that the class has no content yet.\nThis class can later be extended with attributes (e.g., name, age) and methods (e.g., bark()).\n\n\n\n\n3.3 Constructor Method __init__\nThe constructor method __init__ is a special method in Python classes. It is called automatically when a new instance of the class is created. This method is commonly used to initialize (set up) the attributes of the new object.\n\nThe first parameter of __init__ is always self, which refers to the instance being created.\nAdditional parameters allow you to pass in initial values for the object’s attributes.\n\n\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name  # Each dog has a name\n        self.age = age    # Each dog has an age\n\nIn this example, every time a new Dog object is created, you must provide a name and an age, which are stored as attributes of the instance.\n\n\n3.4 Creating Objects\nTo create (or instantiate) an object from a class, call the class as if it were a function, passing any required arguments to the constructor (__init__ method).\n\nmy_dog = Dog(\"Buddy\", 3)\nprint(my_dog.name)  # Output: Buddy\nprint(my_dog.age)   # Output: 3\n\nBuddy\n3\n\n\nHere,\n\nmy_dog is an instance of the Dog class, initialized with the name \"Buddy\" and age 3.\nThe attributes name and age are accessed using dot notation (for example, my_dog.name).\n\nSummary: Instantiating a class creates a new object with its own unique set of data, as specified by the constructor.\n\n\n3.5 Instance Methods\nInstance methods are functions defined inside a class that operate on individual instances of that class. They can access and modify the data (attributes) that belong to the specific object.\n\nEvery instance method has self as its first parameter. self refers to the instance through which the method is called, allowing access to the object’s attributes.\n\nExample:\n\nclass Dog:\n    def __init__(self, name):\n        self.name = name\n\n    def bark(self):\n        print(f\"{self.name} says woof!\")\n\nmy_dog = Dog(\"Buddy\")\nmy_dog.bark()  # Output: Buddy says woof!\n\nBuddy says woof!\n\n\nIn this example:\n\nbark is an instance method.\nIt uses self.name to access data specific to that instance.\nWhen you call my_dog.bark(), the method prints \"Buddy says woof!\".\n\nSummary: Instance methods enable each object created from a class to perform behaviors that may depend on its own data.\n\n\n3.6 Class Attributes vs. Instance Attributes\nClass attributes are shared by all objects of the class. Instance attributes belong only to one specific object.\n\nclass Dog:\n    species = \"Canine\"  # Class attribute\n\n    def __init__(self, name):\n        self.name = name  # Instance attribute\n\ndog1 = Dog(\"Buddy\")\ndog2 = Dog(\"Bella\")\n\nprint(dog1.species)  # Output: Canine\nprint(dog2.species)  # Output: Canine\n\nprint(dog1.name)     # Output: Buddy\nprint(dog2.name)     # Output: Bella\n\nCanine\nCanine\nBuddy\nBella\n\n\n\nspecies is a class attribute. It is shared by all instances of the class Dog.\nname is an instance attribute. Each object has its own separate value for name.\n\nWhen you access dog1.species or dog2.species, both will return \"Canine\", because species is shared.\nWhen you access dog1.name and dog2.name, they return \"Buddy\" and \"Bella\" respectively, because name is specific to each object.\n\n\n3.7 Inheritance\nInheritance is a fundamental feature of object-oriented programming. It allows you to define a new class (called a subclass or derived class) based on an existing class (called a superclass or base class). The subclass inherits all the attributes and methods of the superclass, and can also introduce its own or override existing ones.\nThis enables code reuse and logical hierarchy between classes.\nExample:\n\nclass Animal:\n    def speak(self):\n        print(\"This animal makes a sound.\")\n\nclass Dog(Animal):\n    def bark(self):\n        print(\"Woof!\")\n\nmy_dog = Dog()\nmy_dog.speak()  # Output: This animal makes a sound.\nmy_dog.bark()   # Output: Woof!\n\nThis animal makes a sound.\nWoof!\n\n\nExplanation:\n\nAnimal is the superclass.\nDog is the subclass, which inherits from Animal.\nDog automatically has the speak method from Animal, and also defines its own bark method.\nWhen you create an instance of Dog, you can call both speak (inherited) and bark (defined in Dog).\n\nSummary: Inheritance lets you build classes that share common behaviors, reducing code duplication and making code easier to maintain.\n\n\n3.8 Method Overriding\nMethod overriding allows a subclass to provide a specific implementation of a method that is already defined in its superclass. This enables a subclass to change or extend the behavior of inherited methods.\nExample:\n\nclass Animal:\n    def speak(self):\n        print(\"Animal sound\")\n\nclass Dog(Animal):\n    def speak(self):\n        print(\"Bark!\")  # Overrides the speak method\n\nmy_dog = Dog()\nmy_dog.speak()  # Output: Bark!\n\nBark!\n\n\nExplanation:\n\nThe Animal class defines a method called speak.\nThe Dog subclass defines its own speak method, which overrides the one inherited from Animal.\nWhen speak() is called on a Dog instance, the version in Dog is executed instead of the version in Animal.\n\nSummary: Method overriding allows subclasses to modify or completely replace behaviors inherited from a parent class.\n\n\n3.9 Magic Methods (Dunder Methods)\nMagic methods (also known as dunder methods, because they start and end with double underscores) are special methods in Python that allow you to define how your objects interact with Python’s built-in functions and operators.\nSome commonly used magic methods include:\n\n__init__ — called when a new object is created (the constructor)\n__str__ — defines what should be returned when the object is printed with print()\n\nExample:\n\nclass Dog:\n    def __init__(self, name):\n        self.name = name\n\n    def __str__(self):\n        return f\"This dog's name is {self.name}.\"\n\nmy_dog = Dog(\"Buddy\")\nprint(my_dog)  # Output: This dog's name is Buddy.\n\nThis dog's name is Buddy.\n\n\nExplanation:\n\nThe __init__ method initializes the name attribute when a new Dog object is created.\nThe __str__ method returns a string representation of the object, which is used when you call print() on the object.\n\nSummary: Magic methods let you customize how your objects behave with standard Python operations, such as printing, addition, comparison, and more.\n\n\n3.10 Class Methods and Static Methods\n\nClass methods affect the class itself, not just one object.\nStatic methods are like normal functions, but live inside the class.\n\n\nclass Dog:\n    dogs_count = 0  # Class attribute\n\n    def __init__(self, name):\n        self.name = name\n        Dog.dogs_count += 1\n\n    @classmethod\n    def get_dogs_count(cls):\n        return cls.dogs_count\n\n    @staticmethod\n    def bark():\n        print(\"Woof!\")\n\ndog1 = Dog(\"Buddy\")\ndog2 = Dog(\"Bella\")\nprint(Dog.get_dogs_count())  # Output: 2\nDog.bark()  # Output: Woof!\n\n2\nWoof!\n\n\nExplanation:\n\ndogs_count is a class attribute, shared by all instances of the Dog class.\nThe @classmethod decorator is used to define a class method. Class methods receive the class itself as the first argument, conventionally named cls.\n\nget_dogs_count returns the current count of all Dog instances.\n\nThe @staticmethod decorator is used to define a static method. Static methods do not receive an implicit first argument (neither the class nor the instance).\n\nbark can be called on the class itself, and behaves like a regular function, but lives inside the class’s namespace.\n\n\nSummary: - Class methods can modify or access class-level data that is shared across all instances. - Static methods are utility functions that have a logical connection to the class, but do not access or modify class or instance data.\n\n\n3.11 Simple AI Assistant Class\nThis example builds a basic AI Assistant class. The assistant can answer questions, remember a history of questions, and keep track of how many questions it has been asked.\n\nclass AIAssistant:\n    total_questions = 0  # Class attribute to count total questions asked to all assistants\n\n    def __init__(self, name):\n        self.name = name\n        self.question_history = []  # Instance attribute to store asked questions\n\n    def answer(self, question):\n        \"\"\"Answer a question and save it to history.\"\"\"\n        AIAssistant.total_questions += 1\n        self.question_history.append(question)\n        print(f\"{self.name}: You asked, '{question}'\")\n        # Very basic response logic:\n        if \"weather\" in question.lower():\n            print(\"I'm not connected to the internet, but I hope it's sunny!\")\n        elif \"name\" in question.lower():\n            print(f\"My name is {self.name}.\")\n        else:\n            print(\"That's an interesting question!\")\n\n    def show_history(self):\n        \"\"\"Show all questions this assistant has been asked.\"\"\"\n        print(f\"Questions asked to {self.name}:\")\n        for q in self.question_history:\n            print(f\"- {q}\")\n\n    @classmethod\n    def show_total_questions(cls):\n        \"\"\"Show how many questions have been asked to all AI assistants.\"\"\"\n        print(f\"Total questions asked to all assistants: {cls.total_questions}\")\n\n# Example usage:\nai1 = AIAssistant(\"Alexa\")\nai2 = AIAssistant(\"Siri\")\n\nai1.answer(\"What's the weather today?\")\nai1.answer(\"What's your name?\")\nai2.answer(\"Can you help me with my homework?\")\n\nai1.show_history()\nai2.show_history()\nAIAssistant.show_total_questions()\n\nAlexa: You asked, 'What's the weather today?'\nI'm not connected to the internet, but I hope it's sunny!\nAlexa: You asked, 'What's your name?'\nMy name is Alexa.\nSiri: You asked, 'Can you help me with my homework?'\nThat's an interesting question!\nQuestions asked to Alexa:\n- What's the weather today?\n- What's your name?\nQuestions asked to Siri:\n- Can you help me with my homework?\nTotal questions asked to all assistants: 3",
    "crumbs": [
      "Python",
      "Flow, Loops, and Classes"
    ]
  },
  {
    "objectID": "02_python/python-flow-loops-classes.html#exceptions",
    "href": "02_python/python-flow-loops-classes.html#exceptions",
    "title": "Flow, Loops, and Classes",
    "section": "4. Exceptions",
    "text": "4. Exceptions\n\nWhat Is an Exception?\nAn exception is a special object that signals an error or an unexpected situation in your program. For example, dividing by zero or trying to open a file that does not exist will cause an exception.\nPython uses a try/except block to handle exceptions, so your program doesn’t crash when something goes wrong.\n\n\nBasic Structure\nHere is the basic structure of handling exceptions in Python:\ntry:\n    # Code that might cause an exception\n    pass\nexcept SomeException:\n    # Code that runs if that specific exception happens\n    pass\n\n\nFull Example\nLet’s see how it works in practice:\n\ntry:\n    # Try to do something risky\n    number = 1 / 1  # Change this to 1 / 0 to see an exception\nexcept ZeroDivisionError as e:\n    print(\"Caught a ZeroDivisionError!\")\n    print(e)\nexcept Exception as e:\n    print(\"Caught a general exception.\")\n    print(e)\nelse:\n    print(\"There were no exceptions.\")\nfinally:\n    print(\"This is always executed (cleanup, closing files, etc.).\")\n\nThere were no exceptions.\nThis is always executed (cleanup, closing files, etc.).\n\n\n\n\nCommon Exceptions\nHere are some common Python exceptions you might see:\n\nZeroDivisionError – trying to divide by zero\nValueError – wrong value type (e.g., int(“abc”))\nTypeError – wrong type used (e.g., adding a string to a number)\nFileNotFoundError – file doesn’t exist\nIndexError – list index out of range\n\n\n\nWhy Handle Exceptions?\nIf you don’t handle exceptions, your program will crash as soon as it encounters an error. Handling exceptions lets your program keep running or fail gracefully.\nReal-life analogy: Exception handling is like wearing a seatbelt. If something unexpected happens, you stay safe instead of getting hurt!\n\n\nPractice Exercise\nTry dividing by zero and catch the exception:\n\ntry:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print(\"Oops! You can't divide by zero.\")\n\nOops! You can't divide by zero.",
    "crumbs": [
      "Python",
      "Flow, Loops, and Classes"
    ]
  },
  {
    "objectID": "02_python/python-flow-loops-classes.html#generators-iterators",
    "href": "02_python/python-flow-loops-classes.html#generators-iterators",
    "title": "Flow, Loops, and Classes",
    "section": "5. Generators (Iterators)",
    "text": "5. Generators (Iterators)\n\nWhat Is an Iterator?\nAn iterator is an object that lets you access items in a collection, one at a time. You can get the next item from an iterator using the next() function.\n\nLists, tuples, dictionaries, and strings are all iterable, meaning you can loop through them using a for loop.\n\nThe yield statement allows you to create your own iterator, called a generator. Generators are a memory-efficient way to produce values one at a time, only when you need them.\n\ndef range_custom(n):\n    i = 0\n    while i &lt; n:\n        yield i\n        i += 1\n\nCreate the generator.\n\ngen = range_custom(3)\n\nThe type of the variable named gen is generator.\n\ntype(gen)\n\ngenerator\n\n\nIterate through the generator values.\n\nnext(gen)\n\n0\n\n\n\nnext(gen)\n\n1\n\n\n\nnext(gen)\n\n2\n\n\nThe generator raises an exception when it reaches the end. If you keep calling next() after the generator is finished, you will get a StopIteration error.\n\n# the following call will raise an exception\n# next(gen)",
    "crumbs": [
      "Python",
      "Flow, Loops, and Classes"
    ]
  },
  {
    "objectID": "02_python/python-intro/index.html",
    "href": "02_python/python-intro/index.html",
    "title": "Introduction to Python",
    "section": "",
    "text": "Scratch notebook for this session: \n\n\n\n\n\n\n\n\n\n\nTitle\n\n\n\nDescription\n\n\n\nReading Time\n\n\n\n\n\n\n\n\nWhat is Python?\n\n\n\n\n\n4 min\n\n\n\n\n\n\nOperations in Python\n\n\n\n\n\n2 min\n\n\n\n\n\n\nNumber Types in Python\n\n\n\n\n\n1 min\n\n\n\n\n\n\nStrings in Python\n\n\n\n\n\n1 min\n\n\n\n\n\n\nLists\n\n\n\n\n\n2 min\n\n\n\n\n\n\nUsing Dictionaries to Represent Single and Multiple Items\n\n\n\n\n\n1 min\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Python",
      "Introduction to Python"
    ]
  },
  {
    "objectID": "02_python/python-intro/06-Intro-to-Python-dictionaries.html",
    "href": "02_python/python-intro/06-Intro-to-Python-dictionaries.html",
    "title": "Using Dictionaries to Represent Single and Multiple Items",
    "section": "",
    "text": "In Python, a dictionary represents one item (e.g., one student). To store multiple such items, we use a list of dictionaries.\n\nExamples\nOne Dictionary for One Student\n\nstudent = {\n    \"name\": \"Alice\",\n    \"age\": 21,\n    \"major\": \"Computer Science\"\n}\nprint(student[\"name\"])\nprint(student[\"major\"])\n\nAlice\nComputer Science\n\n\nList of Dictionaries for Multiple Students\n\nstudents = [\n    {\"name\": \"Alice\", \"age\": 21, \"major\": \"CS\"},\n    {\"name\": \"Bob\", \"age\": 22, \"major\": \"Math\"},\n    {\"name\": \"Cara\", \"age\": 20, \"major\": \"Biology\"}\n]\n\n# Accessing second student's major\nprint(students[1][\"major\"])\n\nMath\n\n\nLooping Through a List of Dictionaries\n\nfor student in students:\n    print(student[\"name\"], \"is studying\", student[\"major\"])\n\nAlice is studying CS\nBob is studying Math\nCara is studying Biology\n\n\nExercise\n\nAdd a new student to the students list.\nPrint each student’s name and age.\nTry changing a student’s major.\n\n\nnew_student = {\"name\": \"Kate\", \"age\": 21, \"major\": \"Computer Science\"}\nstudents.append(new_student)\n\nfor student in students:\n    print(f\"{student['name']} is {student['age']} years old.\")\n\nfor student in students:\n    if student[\"name\"] == \"Bob\":\n        student[\"major\"] = \"Political Science\"\n\nprint(students)\n\nAlice is 21 years old.\nBob is 22 years old.\nCara is 20 years old.\nKate is 21 years old.\n[{'name': 'Alice', 'age': 21, 'major': 'CS'}, {'name': 'Bob', 'age': 22, 'major': 'Political Science'}, {'name': 'Cara', 'age': 20, 'major': 'Biology'}, {'name': 'Kate', 'age': 21, 'major': 'Computer Science'}]",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "Using Dictionaries to Represent Single and Multiple Items"
    ]
  },
  {
    "objectID": "02_python/python-intro/03-Intro-to-Python-numbers.html",
    "href": "02_python/python-intro/03-Intro-to-Python-numbers.html",
    "title": "Number Types in Python",
    "section": "",
    "text": "This notebook introduces Python’s built-in number-related types: integers, floats, and complex numbers, along with type conversion, type checking, and small exercises.\n\nIntegers (int)\nIntegers are whole numbers (positive, negative, or zero) without decimal points.\nExamples:\n\na = 10\nb = -5\nc = 0\nprint(a, b, c)\n\n10 -5 0\n\n\nExercise: Create two integer variables and print their sum.\n\nx = 7\ny = 12\nprint(\"Sum:\", x + y)\n\nSum: 19\n\n\n\n\nFloating Point Numbers (float)\nFloats are numbers with decimal points or in scientific notation.\nExamples:\n\npi = 3.14159\ntax_rate = 0.07\ndistance = -2.5\navogadro = 6.022e23\nprint(pi, tax_rate, distance, avogadro)\n\n3.14159 0.07 -2.5 6.022e+23\n\n\nExercise: Create a float variable for temperature and print it in a sentence using an f-string.\n\ntemperature = 23.5\nprint(f\"The current temperature is {temperature}°C.\")\n\nThe current temperature is 23.5°C.\n\n\n\n\nComplex Numbers (complex)\nComplex numbers have a real and imaginary part, written as a + bj.\nExamples:\n\nz1 = 2 + 3j\nz2 = 1 - 4j\nprint(\"z1:\", z1)\nprint(\"z2:\", z2)\nprint(\"Sum:\", z1 + z2)\n\nz1: (2+3j)\nz2: (1-4j)\nSum: (3-1j)\n\n\n\n\nWhy Use j for Complex Numbers in Python?\nIn mathematics, the imaginary unit is often written as i. However, in engineering, i is commonly used to represent electric current. To avoid confusion, Python uses j to represent the imaginary unit (√-1).\nExample: - 1j means the imaginary number 0 + 1×j. - 2 + 3j means a complex number with real part 2 and imaginary part 3.\n\n# Complex number example with j\nz = 2 + 3j\nprint(z)        # prints 2 + 3j\n\n# Accessing real and imaginary parts\nprint(\"Real part:\", z.real)\nprint(\"Imaginary part:\", z.imag)\n\n(2+3j)\nReal part: 2.0\nImaginary part: 3.0\n\n\nExercise: Create two complex numbers and multiply them.\n\nz1 = 2 + 3j\nz2 = 1 - 4j\nresult = z1 * z2\nprint(\"Multiplication result:\", result)\n\nMultiplication result: (14-5j)\n\n\n\n\nType Conversions\nConvert between number types using int(), float(), and complex().\n\nprint(int(3.7))\nprint(float(5))\nprint(complex(2, 3))\n\n3\n5.0\n(2+3j)\n\n\nExercise: Convert an integer to a float and a float to an integer, then print the results.\n\nmy_int = 10\nmy_float = 5.99\n\nconverted_to_float = float(my_int)\nconverted_to_int = int(my_float)\n\nprint(\"Integer to float:\", converted_to_float)\nprint(\"Float to integer:\", converted_to_int)\n\nInteger to float: 10.0\nFloat to integer: 5\n\n\n\n\nChecking Types\n\nprint(type(10))\nprint(type(3.14))\nprint(type(2+3j))\n\n&lt;class 'int'&gt;\n&lt;class 'float'&gt;\n&lt;class 'complex'&gt;\n\n\nExercise: Use type() to check the type of a number you define.\n\nvalue = 42.0\nprint(type(value))\n\n&lt;class 'float'&gt;\n\n\n\n\nCommon Pitfalls\n\nprint(0.1 + 0.2 == 0.3)  # Floating-point precision issue\nprint(5 / 2)             # Division returns float\nprint(5 // 2)            # Floor division returns int\n\nFalse\n2.5\n2",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "Number Types in Python"
    ]
  },
  {
    "objectID": "02_python/index.html",
    "href": "02_python/index.html",
    "title": "Python",
    "section": "",
    "text": "This Python tutorial is broken down into three parts:\n\nPython Basics – Covers the basics of Python, including data types, functions, and basic operations.\nFlow, Loops, and Classes – Introduces control flow, loops, and classes in Python, including how to write functions and use loops effectively.\nMiscellaneous Applications – Covers miscellaneous applications of Python, including data manipulation and analysis with pandas, data visualization with matplotlib, and machine learning.\n\nAt the beginning of each part there is a link to a scratch notebook that you can open in Google Colab to follow along in your browser.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "02_python/python-apps/index.html",
    "href": "02_python/python-apps/index.html",
    "title": "Advanced Applications",
    "section": "",
    "text": "Scratch notebook for the miscellaneous applications: \n\n\n\n\n\n\n\n\n\n\nTitle\n\n\n\nDescription\n\n\n\nReading Time\n\n\n\n\n\n\n\n\nHandling Data with Pandas\n\n\n\n\n\n7 min\n\n\n\n\n\n\nData Visualization with Matplotlib\n\n\n\n\n\n3 min\n\n\n\n\n\n\nDecision Trees with Scikit-learn\n\n\n\n\n\n2 min\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Python",
      "Advanced Applications"
    ]
  },
  {
    "objectID": "02_python/python-apps/data_with_pandas.html",
    "href": "02_python/python-apps/data_with_pandas.html",
    "title": "Handling Data with Pandas",
    "section": "",
    "text": "In this module we will learn how to handle data with the pandas library in Python. Pandas is a powerful library that provides data structures and data analysis tools for Python. It is widely used for data manipulation and analysis, making it an essential tool for data scientists and analysts.\n# Import libraries\nimport pandas as pd\nimport numpy as np",
    "crumbs": [
      "Python",
      "Advanced Applications",
      "Handling Data with Pandas"
    ]
  },
  {
    "objectID": "02_python/python-apps/data_with_pandas.html#pandas-dataframes",
    "href": "02_python/python-apps/data_with_pandas.html#pandas-dataframes",
    "title": "Handling Data with Pandas",
    "section": "pandas DataFrames",
    "text": "pandas DataFrames\nDataFrames are two-dimensional, size-mutable, potentially heterogeneous tabular data structures with labeled axes (rows and columns). They are similar to SQL tables or Excel spreadsheets. DataFrames can be created from various data sources, such as lists, dictionaries, or CSV files.\n\nkids = [['Mike', 'boy', 7, 128], ['George', 'boy', 4, 112], ['Lily', 'girl', 8, 132], ['Yu', 'girl', 10, 143], ['Dan', 'boy', 9, 138]]\n\ncolNames = ['name', 'gender', 'age', 'height']\n\n\ndf = pd.DataFrame(data = kids, columns = colNames)\ndf\n\n\n\n\n\n\n\n\nname\ngender\nage\nheight\n\n\n\n\n0\nMike\nboy\n7\n128\n\n\n1\nGeorge\nboy\n4\n112\n\n\n2\nLily\ngirl\n8\n132\n\n\n3\nYu\ngirl\n10\n143\n\n\n4\nDan\nboy\n9\n138\n\n\n\n\n\n\n\n\n# Check the column data types\ndf.dtypes\n\nname      object\ngender    object\nage        int64\nheight     int64\ndtype: object",
    "crumbs": [
      "Python",
      "Advanced Applications",
      "Handling Data with Pandas"
    ]
  },
  {
    "objectID": "02_python/python-apps/data_with_pandas.html#import-data-from-a-csv-file",
    "href": "02_python/python-apps/data_with_pandas.html#import-data-from-a-csv-file",
    "title": "Handling Data with Pandas",
    "section": "Import data from a csv file",
    "text": "Import data from a csv file\n\ndf = pd.read_csv('diabetes.csv')\n\n\ndf\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nOutcome\n\n\n\n\n0\n6\n148\n72\n35\n0\n33.6\n0.627\n50\n1\n\n\n1\n1\n85\n66\n29\n0\n26.6\n0.351\n31\n0\n\n\n2\n8\n183\n64\n0\n0\n23.3\n0.672\n32\n1\n\n\n3\n1\n89\n66\n23\n94\n28.1\n0.167\n21\n0\n\n\n4\n0\n137\n40\n35\n168\n43.1\n2.288\n33\n1\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n763\n10\n101\n76\n48\n180\n32.9\n0.171\n63\n0\n\n\n764\n2\n122\n70\n27\n0\n36.8\n0.340\n27\n0\n\n\n765\n5\n121\n72\n23\n112\n26.2\n0.245\n30\n0\n\n\n766\n1\n126\n60\n0\n0\n30.1\n0.349\n47\n1\n\n\n767\n1\n93\n70\n31\n0\n30.4\n0.315\n23\n0\n\n\n\n\n768 rows × 9 columns\n\n\n\n\n# Select top N number of records (default = 5)\ndf.head()\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nOutcome\n\n\n\n\n0\n6\n148\n72\n35\n0\n33.6\n0.627\n50\n1\n\n\n1\n1\n85\n66\n29\n0\n26.6\n0.351\n31\n0\n\n\n2\n8\n183\n64\n0\n0\n23.3\n0.672\n32\n1\n\n\n3\n1\n89\n66\n23\n94\n28.1\n0.167\n21\n0\n\n\n4\n0\n137\n40\n35\n168\n43.1\n2.288\n33\n1\n\n\n\n\n\n\n\n\n# Select bottom N number of records (default = 5)\ndf.tail()\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nOutcome\n\n\n\n\n763\n10\n101\n76\n48\n180\n32.9\n0.171\n63\n0\n\n\n764\n2\n122\n70\n27\n0\n36.8\n0.340\n27\n0\n\n\n765\n5\n121\n72\n23\n112\n26.2\n0.245\n30\n0\n\n\n766\n1\n126\n60\n0\n0\n30.1\n0.349\n47\n1\n\n\n767\n1\n93\n70\n31\n0\n30.4\n0.315\n23\n0\n\n\n\n\n\n\n\n\n# Check the column data types\ndf.dtypes\n\nPregnancies                   int64\nGlucose                       int64\nBloodPressure                 int64\nSkinThickness                 int64\nInsulin                       int64\nBMI                         float64\nDiabetesPedigreeFunction    float64\nAge                           int64\nOutcome                       int64\ndtype: object\n\n\n\n# Get the number of rows and columns in your dataframe\ndf.shape\n\n(768, 9)\n\n\n\n# The info method gives the column datatypes + number of non-null values\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 768 entries, 0 to 767\nData columns (total 9 columns):\n #   Column                    Non-Null Count  Dtype  \n---  ------                    --------------  -----  \n 0   Pregnancies               768 non-null    int64  \n 1   Glucose                   768 non-null    int64  \n 2   BloodPressure             768 non-null    int64  \n 3   SkinThickness             768 non-null    int64  \n 4   Insulin                   768 non-null    int64  \n 5   BMI                       768 non-null    float64\n 6   DiabetesPedigreeFunction  768 non-null    float64\n 7   Age                       768 non-null    int64  \n 8   Outcome                   768 non-null    int64  \ndtypes: float64(2), int64(7)\nmemory usage: 54.1 KB",
    "crumbs": [
      "Python",
      "Advanced Applications",
      "Handling Data with Pandas"
    ]
  },
  {
    "objectID": "02_python/python-apps/data_with_pandas.html#subsetting-dataframes",
    "href": "02_python/python-apps/data_with_pandas.html#subsetting-dataframes",
    "title": "Handling Data with Pandas",
    "section": "Subsetting DataFrames",
    "text": "Subsetting DataFrames\n\n# Select one column using double brackets\ndf[['Pregnancies']].head()\n\n\n\n\n\n\n\n\nPregnancies\n\n\n\n\n0\n6\n\n\n1\n1\n\n\n2\n8\n\n\n3\n1\n\n\n4\n0\n\n\n\n\n\n\n\n\ntype(df[['Pregnancies']].head())\n\npandas.core.frame.DataFrame\n\n\n\n# Select multiple columns using double brackets\ndf[['Pregnancies', 'Glucose']].head()\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\n\n\n\n\n0\n6\n148\n\n\n1\n1\n85\n\n\n2\n8\n183\n\n\n3\n1\n89\n\n\n4\n0\n137\n\n\n\n\n\n\n\n\ntype(df[['Pregnancies', 'Glucose']].head())\n\npandas.core.frame.DataFrame\n\n\n\n# Select one column using single brackets\n# This produces a pandas series which is a one-dimentional array that can be labeled\ndf['Pregnancies'].head()\n\n0    6\n1    1\n2    8\n3    1\n4    0\nName: Pregnancies, dtype: int64\n\n\n\ntype(df['Pregnancies'].head())\n\npandas.core.series.Series\n\n\n\n# Keep in mind that you can't select multiple columns using single brackets\ndf['Pregnancies', 'Glucose']\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nFile /opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pandas/core/indexes/base.py:3812, in Index.get_loc(self, key)\n   3811 try:\n-&gt; 3812     return self._engine.get_loc(casted_key)\n   3813 except KeyError as err:\n\nFile pandas/_libs/index.pyx:167, in pandas._libs.index.IndexEngine.get_loc()\n\nFile pandas/_libs/index.pyx:196, in pandas._libs.index.IndexEngine.get_loc()\n\nFile pandas/_libs/hashtable_class_helper.pxi:7088, in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\nFile pandas/_libs/hashtable_class_helper.pxi:7096, in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\nKeyError: ('Pregnancies', 'Glucose')\n\nThe above exception was the direct cause of the following exception:\n\nKeyError                                  Traceback (most recent call last)\nCell In[18], line 2\n      1 # Keep in mind that you can't select multiple columns using single brackets\n----&gt; 2 df['Pregnancies', 'Glucose']\n\nFile /opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pandas/core/frame.py:4107, in DataFrame.__getitem__(self, key)\n   4105 if self.columns.nlevels &gt; 1:\n   4106     return self._getitem_multilevel(key)\n-&gt; 4107 indexer = self.columns.get_loc(key)\n   4108 if is_integer(indexer):\n   4109     indexer = [indexer]\n\nFile /opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pandas/core/indexes/base.py:3819, in Index.get_loc(self, key)\n   3814     if isinstance(casted_key, slice) or (\n   3815         isinstance(casted_key, abc.Iterable)\n   3816         and any(isinstance(x, slice) for x in casted_key)\n   3817     ):\n   3818         raise InvalidIndexError(key)\n-&gt; 3819     raise KeyError(key) from err\n   3820 except TypeError:\n   3821     # If we have a listlike key, _check_indexing_error will raise\n   3822     #  InvalidIndexError. Otherwise we fall through and re-raise\n   3823     #  the TypeError.\n   3824     self._check_indexing_error(key)\n\nKeyError: ('Pregnancies', 'Glucose')\n\n\n\nWith a pandas series, we can select rows using slicing like this: [start_index:end_index]. The end_index is not inclusive. This behavior is very similar to Python lists.\n\ndf['Age']\n\n0      50\n1      31\n2      32\n3      21\n4      33\n       ..\n763    63\n764    27\n765    30\n766    47\n767    23\nName: Age, Length: 768, dtype: int64\n\n\n\ndf['Age'][0:10]\n\n0    50\n1    31\n2    32\n3    21\n4    33\n5    30\n6    26\n7    29\n8    53\n9    54\nName: Age, dtype: int64\n\n\n\ndf.Age.head()\n\n0    50\n1    31\n2    32\n3    21\n4    33\nName: Age, dtype: int64\n\n\n\ntype(df.Age.head())\n\npandas.core.series.Series\n\n\nThe pandas attribute .loc allow you to select columns, index, and slice your data\n\n# pandas dataframe\ndf.loc[:, ['Age']].head()\n\n\n\n\n\n\n\n\nAge\n\n\n\n\n0\n50\n\n\n1\n31\n\n\n2\n32\n\n\n3\n21\n\n\n4\n33\n\n\n\n\n\n\n\n\n# pandas series\ndf.loc[:, 'Age'].head()\n\n0    50\n1    31\n2    32\n3    21\n4    33\nName: Age, dtype: int64\n\n\n\ndf['Pregnancies'].value_counts()\n\nPregnancies\n1     135\n0     111\n2     103\n3      75\n4      68\n5      57\n6      50\n7      45\n8      38\n9      28\n10     24\n11     11\n13     10\n12      9\n14      2\n17      1\n15      1\nName: count, dtype: int64",
    "crumbs": [
      "Python",
      "Advanced Applications",
      "Handling Data with Pandas"
    ]
  },
  {
    "objectID": "02_python/python-apps/data_with_pandas.html#filtering-dataframes",
    "href": "02_python/python-apps/data_with_pandas.html#filtering-dataframes",
    "title": "Handling Data with Pandas",
    "section": "Filtering DataFrames",
    "text": "Filtering DataFrames\n\n# Notice that the filter produces a pandas series of True and False values\nfilter_pregnancies = df['Pregnancies'] &gt;= 3\nfilter_pregnancies\n\n0       True\n1      False\n2       True\n3      False\n4      False\n       ...  \n763     True\n764    False\n765     True\n766    False\n767    False\nName: Pregnancies, Length: 768, dtype: bool\n\n\n\nfilter_pregnancies.head()\n\n0     True\n1    False\n2     True\n3    False\n4    False\nName: Pregnancies, dtype: bool\n\n\n\ndf[filter_pregnancies]\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nOutcome\n\n\n\n\n0\n6\n148\n72\n35\n0\n33.6\n0.627\n50\n1\n\n\n2\n8\n183\n64\n0\n0\n23.3\n0.672\n32\n1\n\n\n5\n5\n116\n74\n0\n0\n25.6\n0.201\n30\n0\n\n\n6\n3\n78\n50\n32\n88\n31.0\n0.248\n26\n1\n\n\n7\n10\n115\n0\n0\n0\n35.3\n0.134\n29\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n759\n6\n190\n92\n0\n0\n35.5\n0.278\n66\n1\n\n\n761\n9\n170\n74\n31\n0\n44.0\n0.403\n43\n1\n\n\n762\n9\n89\n62\n0\n0\n22.5\n0.142\n33\n0\n\n\n763\n10\n101\n76\n48\n180\n32.9\n0.171\n63\n0\n\n\n765\n5\n121\n72\n23\n112\n26.2\n0.245\n30\n0\n\n\n\n\n419 rows × 9 columns\n\n\n\n\ndf.loc[filter_pregnancies, :]\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nOutcome\n\n\n\n\n0\n6\n148\n72\n35\n0\n33.6\n0.627\n50\n1\n\n\n2\n8\n183\n64\n0\n0\n23.3\n0.672\n32\n1\n\n\n5\n5\n116\n74\n0\n0\n25.6\n0.201\n30\n0\n\n\n6\n3\n78\n50\n32\n88\n31.0\n0.248\n26\n1\n\n\n7\n10\n115\n0\n0\n0\n35.3\n0.134\n29\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n759\n6\n190\n92\n0\n0\n35.5\n0.278\n66\n1\n\n\n761\n9\n170\n74\n31\n0\n44.0\n0.403\n43\n1\n\n\n762\n9\n89\n62\n0\n0\n22.5\n0.142\n33\n0\n\n\n763\n10\n101\n76\n48\n180\n32.9\n0.171\n63\n0\n\n\n765\n5\n121\n72\n23\n112\n26.2\n0.245\n30\n0\n\n\n\n\n419 rows × 9 columns\n\n\n\n\n# Notice that it looks like nothing changes\n# This is because we didn't update the dataframe after applying the filter\ndf['Pregnancies'].value_counts()\n\nPregnancies\n1     135\n0     111\n2     103\n3      75\n4      68\n5      57\n6      50\n7      45\n8      38\n9      28\n10     24\n11     11\n13     10\n12      9\n14      2\n17      1\n15      1\nName: count, dtype: int64\n\n\n\n# Update the dataframe to contain observations with pregnancies &lt;= 3\ndf = df.loc[filter_pregnancies, :]\n\n\ndf['Pregnancies'].value_counts()\n\nPregnancies\n3     75\n4     68\n5     57\n6     50\n7     45\n8     38\n9     28\n10    24\n11    11\n13    10\n12     9\n14     2\n17     1\n15     1\nName: count, dtype: int64\n\n\n\ndf['Age'].value_counts()\n\nAge\n28    20\n41    18\n37    18\n31    16\n27    15\n30    15\n22    15\n29    15\n42    14\n24    14\n25    14\n45    13\n34    13\n38    13\n36    13\n26    12\n43    12\n39    12\n32    12\n40    12\n33    10\n46    10\n35     8\n51     8\n23     7\n50     7\n58     6\n44     6\n60     5\n54     5\n57     5\n21     5\n49     5\n52     5\n48     5\n47     5\n63     4\n55     4\n56     3\n53     3\n66     3\n69     2\n61     2\n67     2\n65     2\n59     1\n81     1\n64     1\n62     1\n70     1\n68     1\nName: count, dtype: int64\n\n\n\n# Notice that the filter produces a pandas series of True and False values\ndf['Age'] &lt;= 38\n\n0      False\n2       True\n5       True\n6       True\n7       True\n       ...  \n759    False\n761    False\n762     True\n763    False\n765     True\nName: Age, Length: 419, dtype: bool\n\n\n\nfilter_age = df['Age'] &lt;= 38\n\n\ndf = df.loc[filter_age, :]\n\n\ndf['Age'].value_counts()\n\nAge\n28    20\n37    18\n31    16\n30    15\n22    15\n27    15\n29    15\n24    14\n25    14\n34    13\n36    13\n38    13\n32    12\n26    12\n33    10\n35     8\n23     7\n21     5\nName: count, dtype: int64\n\n\n\nCombining filters\n\ndf.loc[filter_pregnancies & filter_age, :]\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nOutcome\n\n\n\n\n2\n8\n183\n64\n0\n0\n23.3\n0.672\n32\n1\n\n\n5\n5\n116\n74\n0\n0\n25.6\n0.201\n30\n0\n\n\n6\n3\n78\n50\n32\n88\n31.0\n0.248\n26\n1\n\n\n7\n10\n115\n0\n0\n0\n35.3\n0.134\n29\n0\n\n\n10\n4\n110\n92\n0\n0\n37.6\n0.191\n30\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n748\n3\n187\n70\n22\n200\n36.4\n0.408\n36\n1\n\n\n750\n4\n136\n70\n0\n0\n31.2\n1.182\n22\n1\n\n\n752\n3\n108\n62\n24\n0\n26.0\n0.223\n25\n0\n\n\n762\n9\n89\n62\n0\n0\n22.5\n0.142\n33\n0\n\n\n765\n5\n121\n72\n23\n112\n26.2\n0.245\n30\n0\n\n\n\n\n235 rows × 9 columns",
    "crumbs": [
      "Python",
      "Advanced Applications",
      "Handling Data with Pandas"
    ]
  },
  {
    "objectID": "02_python/python-apps/data_with_pandas.html#managing-dataframe-columns",
    "href": "02_python/python-apps/data_with_pandas.html#managing-dataframe-columns",
    "title": "Handling Data with Pandas",
    "section": "Managing DataFrame columns",
    "text": "Managing DataFrame columns\n\n# Rename column names\ndf3 = df.rename(columns={\n    'BloodPressure': 'BP',\n    'SkinThickness': 'ST',\n    'DiabetesPedigreeFunction': 'DPF'\n})\n\n\ndf3\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\nBP\nST\nInsulin\nBMI\nDPF\nAge\nOutcome\n\n\n\n\n2\n8\n183\n64\n0\n0\n23.3\n0.672\n32\n1\n\n\n5\n5\n116\n74\n0\n0\n25.6\n0.201\n30\n0\n\n\n6\n3\n78\n50\n32\n88\n31.0\n0.248\n26\n1\n\n\n7\n10\n115\n0\n0\n0\n35.3\n0.134\n29\n0\n\n\n10\n4\n110\n92\n0\n0\n37.6\n0.191\n30\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n748\n3\n187\n70\n22\n200\n36.4\n0.408\n36\n1\n\n\n750\n4\n136\n70\n0\n0\n31.2\n1.182\n22\n1\n\n\n752\n3\n108\n62\n24\n0\n26.0\n0.223\n25\n0\n\n\n762\n9\n89\n62\n0\n0\n22.5\n0.142\n33\n0\n\n\n765\n5\n121\n72\n23\n112\n26.2\n0.245\n30\n0\n\n\n\n\n235 rows × 9 columns\n\n\n\n\n# This approach allows you to drop multiple columns at a time\ndf3 = df3.drop(columns=['Insulin', 'BMI'])\n\n\ndf3\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\nBP\nST\nDPF\nAge\nOutcome\n\n\n\n\n2\n8\n183\n64\n0\n0.672\n32\n1\n\n\n5\n5\n116\n74\n0\n0.201\n30\n0\n\n\n6\n3\n78\n50\n32\n0.248\n26\n1\n\n\n7\n10\n115\n0\n0\n0.134\n29\n0\n\n\n10\n4\n110\n92\n0\n0.191\n30\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n748\n3\n187\n70\n22\n0.408\n36\n1\n\n\n750\n4\n136\n70\n0\n1.182\n22\n1\n\n\n752\n3\n108\n62\n24\n0.223\n25\n0\n\n\n762\n9\n89\n62\n0\n0.142\n33\n0\n\n\n765\n5\n121\n72\n23\n0.245\n30\n0\n\n\n\n\n235 rows × 7 columns\n\n\n\n\n# Approach 2\ndel df3['Pregnancies']\n\n\ndf3\n\n\n\n\n\n\n\n\nGlucose\nBP\nST\nDPF\nAge\nOutcome\n\n\n\n\n2\n183\n64\n0\n0.672\n32\n1\n\n\n5\n116\n74\n0\n0.201\n30\n0\n\n\n6\n78\n50\n32\n0.248\n26\n1\n\n\n7\n115\n0\n0\n0.134\n29\n0\n\n\n10\n110\n92\n0\n0.191\n30\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n748\n187\n70\n22\n0.408\n36\n1\n\n\n750\n136\n70\n0\n1.182\n22\n1\n\n\n752\n108\n62\n24\n0.223\n25\n0\n\n\n762\n89\n62\n0\n0.142\n33\n0\n\n\n765\n121\n72\n23\n0.245\n30\n0\n\n\n\n\n235 rows × 6 columns",
    "crumbs": [
      "Python",
      "Advanced Applications",
      "Handling Data with Pandas"
    ]
  },
  {
    "objectID": "02_python/python-apps/data_with_pandas.html#calculating-statistics",
    "href": "02_python/python-apps/data_with_pandas.html#calculating-statistics",
    "title": "Handling Data with Pandas",
    "section": "Calculating statistics",
    "text": "Calculating statistics\n\ndf3.shape\n\n(235, 6)\n\n\n\ndf3['Glucose'].sum()\n\nnp.int64(28536)\n\n\n\ndf3['DPF'].sum()\n\nnp.float64(102.571)\n\n\n\ndf3.sum()\n\nGlucose    28536.000\nBP         15807.000\nST          4272.000\nDPF          102.571\nAge         7004.000\nOutcome       88.000\ndtype: float64\n\n\n\n'Mike' + 'George'\n\n'MikeGeorge'\n\n\n\ndf3.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 235 entries, 2 to 765\nData columns (total 6 columns):\n #   Column   Non-Null Count  Dtype  \n---  ------   --------------  -----  \n 0   Glucose  235 non-null    int64  \n 1   BP       235 non-null    int64  \n 2   ST       235 non-null    int64  \n 3   DPF      235 non-null    float64\n 4   Age      235 non-null    int64  \n 5   Outcome  235 non-null    int64  \ndtypes: float64(1), int64(5)\nmemory usage: 12.9 KB\n\n\n\ndf3.values\n\narray([[1.83e+02, 6.40e+01, 0.00e+00, 6.72e-01, 3.20e+01, 1.00e+00],\n       [1.16e+02, 7.40e+01, 0.00e+00, 2.01e-01, 3.00e+01, 0.00e+00],\n       [7.80e+01, 5.00e+01, 3.20e+01, 2.48e-01, 2.60e+01, 1.00e+00],\n       ...,\n       [1.08e+02, 6.20e+01, 2.40e+01, 2.23e-01, 2.50e+01, 0.00e+00],\n       [8.90e+01, 6.20e+01, 0.00e+00, 1.42e-01, 3.30e+01, 0.00e+00],\n       [1.21e+02, 7.20e+01, 2.30e+01, 2.45e-01, 3.00e+01, 0.00e+00]],\n      shape=(235, 6))\n\n\n\ndf3 = df3.loc[filter_age & filter_pregnancies, :]\n\n\ndf3\n\n\n\n\n\n\n\n\nGlucose\nBP\nST\nDPF\nAge\nOutcome\n\n\n\n\n2\n183\n64\n0\n0.672\n32\n1\n\n\n5\n116\n74\n0\n0.201\n30\n0\n\n\n6\n78\n50\n32\n0.248\n26\n1\n\n\n7\n115\n0\n0\n0.134\n29\n0\n\n\n10\n110\n92\n0\n0.191\n30\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n748\n187\n70\n22\n0.408\n36\n1\n\n\n750\n136\n70\n0\n1.182\n22\n1\n\n\n752\n108\n62\n24\n0.223\n25\n0\n\n\n762\n89\n62\n0\n0.142\n33\n0\n\n\n765\n121\n72\n23\n0.245\n30\n0\n\n\n\n\n235 rows × 6 columns\n\n\n\n\n# Export DataFrame to csv file\ndf3.to_csv(path_or_buf = 'diabetes2.csv', index = False)\n\n\ndf3.shape\n\n(235, 6)",
    "crumbs": [
      "Python",
      "Advanced Applications",
      "Handling Data with Pandas"
    ]
  },
  {
    "objectID": "03_github/exercise1.html",
    "href": "03_github/exercise1.html",
    "title": "Exercise 1: Practice with git on a local repository",
    "section": "",
    "text": "Note\n\n\n\nTo do this exercise you will need to install and setup GitHub Desktop. Follow the instructions here.\n\n\nIn this exercise you will initialize a git repository on your computer and explore various git commands with it.\n\nI. Initializing and adding files\n\nIf it’s not already open, open GitHub Desktop.\nIf this is your first time using GitHub Desktop you should see a screen with “Let’s get started!” at the top:\n\nClick the button titled “Create a New Repository on your Local Drive…”\nIn the Create a New Repository window, enter test-git-repo in the “Name” field, then click “Create Repository”. You do not need to fill out any of the other fields.\n\n\n\n\n\n\nNote\n\n\n\nBy default this will create a local repository in your Documents/GitHub folder. You can change where the repo is located by clicking “Choose”. For this tutorial, let’s stick with the default.\n\n\nYou will see a window that has “No local changes” at the top:\n\nIn the upper left you will see “Current repository” with “test-git-repo” underneath it, indicating that you are currently looking at your test-git-repo. This is how you will interact with your new repository!\nNote that your repository is a folder on your computer, just like any others. You can see this if you click on the button labelled “Show in Explorer” (on Windows) / “Show in Finder” (on a Mac). At the moment, there are no files in your repository, although there is a hidden folder called .git and a hidden file called .gitattributes. You never touch these files; they are what git use to keep track of the contents of this folder. These are what make this folder a repository.\n\n\n\n\n\n\nTip\n\n\n\nA local Git repository is a folder on your computer that you have told the application git to keep track of. Any folder can be made into a git repository!\n\n\nLet’s add some files to your new repository for git to track. In the following steps, we’ll pretend that we’re a writer working on a script for a new movie. We’re going to use a simple text editor to create a file called story.txt. To do that:\n\nIf you’re on Windows:\n\nOpen Notepad. This will open a new untitled file.\nClick File -&gt; Save As…\nNavigate to your repository’s directory. If you kept the default path when creating the repository, this should be PC &gt; Documents &gt; GitHub &gt; test-git-repo. If you’re not certain, you can verify by clicking on the “Show in Explorer” button in GitHub Desktop.\nIn the “File name” field enter story.txt then click “Save”.\n\nIf you’re on MacOS:\n\nOpen TextEdit and click “New Document”. This will open a new untitled file.\nSelect Format -&gt; “Make Plain Text”. (We need to do this to get the desired file extension.)\nClick File -&gt; Save…\nIn the “Save As” field type story.txt.\nIn the “Where” field navigate to your repository’s directory. If you kept the default path when creating the repository, this should be Documents/GitHub/test-git-repo. If you’re not certain, you can verify by clicking on the “Show in Finder” button in GitHub Desktop.\nClick “Save”.\n\n\nNow let’s write our story! Use your text editor to add following to story.txt:\nOnce upon a time, in a land far,\nfar away...\n\n\n\n\n\n\nWarning\n\n\n\nType the lines in exactly as they appear above: add a new line after the first “far,”. For reasons that will become clear below, it’s important that the “far away…” is on a separate line.\n\n\nSave your changes by clicking File -&gt; Save, or by using the keyboard shortcut Ctrl+S (on Windows) / ⌘+S (on Mac).\nNow go back to GitHub Desktop. You’ll notice that it has changed from “No local changes” to showing a “Changes” tab with story.txt listed with its contents:\n\ngit knows you have a file in the directory called story.txt, but it isn’t tracking it yet!\nLet’s tell git to start tracking story.txt by making a commit. If it isn’t already, click the box next to “1 changed file”. When you do, you’ll notice that the “Summary (required)” box automatically changes to “Create story.txt”:\n\nThe summary box and the optional “Description” box below constitute the commit message. This is text that will be added to the commit describing what was done. In this case, GitHub Desktop automatically provides a default message of “Create story.txt”. That’s a good description of what we’ve done, so let’s keep it.\nNow click the “Commit 1 file to main” button. When you do, the window will automatically change back to “No local changes”. Congratulations, you’ve made your first git commit!\n\n\n\n\n\n\nWhat happens when you commit changes?\n\n\n\nA commit creates a snapshot of the files you committed. Every commit has a commit message, an author, and a unique hash identifying that change. Git keeps a history of all commits made in a repository. From now on, you can go back and view the previous state of a file at different commit points. This is known as version control.\n\n\nYou can view the history of your commits by clicking on the “History” tab:\n\nIn this case, there are two commits: an initial commit that was created by GitHub Desktop when the repository was created, and the commit you just made to create story.txt.\n\n\n\nII. Making changes to files\n\nYou’re not happy with your story opening. You don’t want to write fairy tales, you want to write Sci-fi! Go back to your text editor story.txt and change the line Once upon a time, in a land far, to A long time ago in a galaxy far, so that your file now reads:\nA long time ago in a galaxy far,\nfar away...\nMuch better. Save the changes to the file.\nGo back to GitHub Desktop. Notice that a yellow box with a dot has appeared next to story.txt. If you click on story, you should now see a diff that shows what lines have changed in story.txt:\n\n\n\n\n\n\n\nThose pesky .DS_Store files on MacOS\n\n\n\nAt some point Mac users will notice a file called .DS_Store appears in their repo, as it did for me in the screen shot above. This is a hidden file that MacOS automatically creates in every folder for indexing purposes. Do not commit this file to your repository! It’s not something you want to track. For now, just ignore it. Below we provide instructions on how to permanently ignore files like these in your repository.\nWindows users: carry on.\n\n\nThe yellow box next to story.txt means that git recognizes that story.txt has changed, but your changes have not been committed yet. If you go to the History tab, you’ll see that there are still only two commits. If you click on the “Create story.txt” commit, it will show the previous state of the file.\n\n\n\n\n\n\nSaving is not committing!\n\n\n\nSimply saving changes to a file will not result in a new snapshot of it! To tell Git to create a snapshot for preservation you have to create a commit. If you make further changes to your file without committing in between, the intermediate changes will not be tracked.\n\n\nLet’s commit your changes so you don’t lose them! Click the check box next to story.txt. When you do, GitHub Desktop will automatically change the summary to “Update story.txt”. That is a description of what we did, but it’s not very informative. Let’s give a more descriptive summary. Change the summary to “Change opening”, then click “Commit 1 file to main”:\n\nYou’ll now see 2 commits in your history.\n\n\nAdding files to .gitignore\nIt frequently happens that you can have files in your repository that you don’t want Git to track. This can be things like temporary build files, or system files like the .DS_Store on Macs. If you don’t explicitly commit a new file (by clicking the check mark next to it and hitting the commit button), then files won’t be tracked. However, trying to avoid clicking these files can be tedious and error prone. You’ll also get warnings about changes every time you switch branches (below).\nWe can tell Git to ignore certain files. Here, we’ll tell it to ignore the .DS_Store file created by MacOS.\n\n\n\n\n\n\nWindows users\n\n\n\nWindows users will not have a .DS_Store file or any other hidden file created by the OS as on Mac. To follow along in this part, create an empty file in your repository called .DS_Store and save it:\n\nSwitch back to Notepad.\nCreate a new file by typing Ctrl+N. This will open a new Untitled file that is empty.\nClick File -&gt; Save.\nIn the “Save as type” field click the drop-down menu and select “All files”.\nIn the File name field type .DS_Store.. Note the trailing period! That is, enter .DS_Store. not .DS_Store – if you don’t include the period at the end of the file name, Windows will automatically add .txt to the end.\nClick “Save”\n\n\n\nTo tell Git to ignore a file:\n\nRight-click the file you’d like it to ignore, in this case .DS_Store. On the drop-down menu, select “Ignore file (Add to .gitignore)”:\n\nAdding the file will make the selected file disappear in the Changes menu. In it’s place, you’ll see a .gitignore file has been created. The .gitignore file is a simple text file that lists the names of any files in the repository that you want Git to ignore. Notice that GitHub Desktop has both created the file, and added .DS_Store to it:\n\nAs with any other file, we need to commit the changes to .gitignore for Git to keep track of it. Commit the change by clicking the “Commit 1 file to main” (note that the commit message automatically created by GitHub Desktop is “Create .gitignore”).\nFrom now on, any file named .DS_Store in this repository (meaning, in this folder and all sub-folders) file will not appear in your Changes menu, nor will you be able to commit changes to it to the repository.\n\n\n\n\nIII. Branches\nYou want to start working on titles for your stories, but you want to do it independently of your work on the story itself. To do that, let’s create a branch to specifically work on titles.\n\nIn GitHub Desktop, click on the “Current Branch” tab. This will show a drop-down menu showing all of the branches on your repository:\n\nCurrently, we only have one branch, which is called main. This is the Default branch, meaning it’s the branch you are placed in whenever you first create or clone a repository (more on cloning later). Think of it as the master copy of your repository. If this were a code repository, the main would be the branch that you (try to) keep a clean, working version of your code.\nLet’s create a new branch on which we will develop our title. Click the “New Branch” button in the upper right. You will be prompted to create a name. Call it title-dev, then click “Create Branch”:\n\nYou are now on a new branch called title-dev. You can see that by looking at the Current Branch at the top: it says title-dev:\n\nYou can switch between branches by clicking the “Current Branch” drop-down menu, then selecting the branch you want:\n\nGoing back and forth between main and title-dev, you’ll see that at the moment, the title-dev branch is identical to the main branch. You can verify that by viewing the contents of the repository in Explorer (Windows) / Finder (Mac). Click the “Show in Explorer” (Windows) / “Show in Finder” (Mac) button. You’ll see that story.txt is still there no matter if you’re on title-dev or main.\nLikewise, the commit history for title-dev is also the same as main: switch to the title-dev branch then click on the History tab. You’ll see the same 4 commits as you have on main.\nLet’s do some development on title-dev. Switch to the title-dev branch. Now let’s create a file called title.txt to store our title idea:\n\nWindows users:\n\nSwitch back to Notepad.\nType Ctrl+N to create a new untitled file.\nClick File -&gt; Save\nIn the “File name” field enter title.txt then click “Save”.\n\nMac users:\n\nSwitch back to TextEdit.\nType ⌘+N to create a new untitled file.\nSelect Format -&gt; “Make Plain Text”. (We need to do this to get the desired file extension.)\nClick File -&gt; Save…\nIn the “Save As” field type title.txt.\nClick “Save”.\n\n\nAdd a title to title.txt. Use your text editor to add:\nSTAR FIGHT!\nSave the change by typing Ctrl+S (Windows) / ⌘+S (Mac).\nGo back to GitHub Desktop. You should see title.txt in the Changes sidebar, with the new lines shown in the diff:\n\nCommit the new changes by clicking “Commit 1 file to title-dev”. Note the default commit message is “Create title.txt”.\nSatisfied with your title for now, go back to your main branch by clicking on the “Current branch” drop down and selecting main:\n\nLet’s see what happened to your files when you switched back to main. If you still have the Explorer/Finder window open, look at it. If not, click the “Show in Explorer” (Windows) / “Show in Finder” (Mac) button to view the contents of the repository.\nThe title.txt file is gone!\nLikewise, if you click on the “History” tab in GitHub Desktop, you’ll see that your last commit is no longer in your history; you just have the first four commits.\nThis is because your last commit (and the file it created, title.txt) only exists on the title-dev branch. To verify that it’s still there, click the “Current Branch” drop-down menu and switch to the title-dev branch. You’ll see the “Create title.txt” commit reappear in your History. You’ll also see the title.txt file reappear in your directory in Explorer/Finder. Toggling back and forth between the branches will make it disappear and reappear.\nWhat’s going on? In graph form, your repository currently looks like this:\n\nHere, each dot represents a commit, and the different lines represent a different branch. Following a line illustrates the history as seen by that branch. Since the commits on title-dev live on their own branch, changes you make on main won’t affect title-dev and vice versa (at least not until we merge the branches; more on that below).\nLet’s make some more changes to story.txt, but let’s do it on the main branch. Switch to main using the “Current Branch” drop-down menu. Now use your text editor to add the following lines to story.txt:\n\nIt is period of civil war.\nRebel spaceships, striking\nfrom a hidden base, have won\ntheir first victory against\nthe evil Galactic Empire.\nSave the changes by typing Ctrl+S (Windows) / ⌘+S\nStage the commit by clicking the check mark next to story.txt in GitHub Desktop and change the commit message to “Add first pargraph”:\n\nNow commit the changes by clicking “Commit 1 file to main”.\nClick on the History tab. Note that you now have 5 commits on master, none of which include the commits to title-dev branch.\nIn a flash of brilliance, you get an idea for the title of your story. Quick! Switch to your title-dev branch by clicking the Current Branch -&gt; title-dev.\nNow use your text editor to edit title.txt and change STAR FIGHT! to:\nStar Wars\nA NEW HOPE\n\nby\nGeorge Lucas\nNice work, George!\nSave your changes to title.txt and stage the changes in GitHub Desktop by clicking the check box next to title.txt. Commit the changes by clicking the “Commit 1 file to title-dev”:\n\nNote that the commit message is “Update title.txt”.\nClick on the History tab. Note that there are 6 commits here: the first four from main (before you branched off), and the last two on title-dev:\n\nIn graph form, your repo looks like this:\n\n\n\nMerging\n\nSatisfied that your title is perfect, you no longer feel the need to keep the title development on a separate branch. It’s ready to be merged on to the main branch. To do that, first switch to the main branch by clicking Current Branch -&gt; main.\nBefore merging title-dev on to main, we’re going to create a second copy of main that we’ll call main-bkup. We’ll do that here so we can demonstrate squash and merge below. But when you first start using Git, it’s good practice to create a backup of main before doing merges, as mistakes can happen that can be difficult to untangle. This way, you have the original state of main preserved in the backup branch that you can always go back to.\nTo create the copy of main:\n\nClick Current Branch. Make sure you’re on main (the checkmark is next to main), then click “New Branch”:\n\nThis will open the “Create a Branch” window. Type main-bkup in the Name field, then click “Create Branch”. You will now be on the main-bkup branch.\nNow go back to the main branch by clicking “Current Branch -&gt; main”.\n\nNow click the Current Branch drop-down menu again, and this time click the “Choose a branch to merge into main” button:\n\nSelect the title-dev branch. The button at the bottom will turn to blue and say “Create a merge commit”. Click that to merge the branch:\n\nCongratulations! You’ve made your first merge on to main. To see what happened, click on the History tab to see what the history on the main branch looks like now:\n\nThe commits you made on title-dev are now in main, along with a final “Merge” commit at the end. This final “merge” commit is to indicate that some of the commits in the history came from another branch (and what the name of the branch was).\nIf you look at Explorer/Finder, you’ll see that title.txt is now in your directory when you’re on main. If you switch between main and title-dev, title.txt remains in both. Note that the history on title-dev is unaffected by the merge: merging only changes the branch you merged into, not the branch you merged from.\nIn graphical form, you main branch now looks like this:\n\n\n\n\nSquash and merge: the cleaner history\nWhen we were preparing to merge title-dev, you may have noticed there was a drop-down button next to the “Create a merge commit” button:\n\nIf you had clicked that, you are presented with three options – merge, squash and merge, and rebase:\n\nLet’s see would have happened if we selected squash and merge instead by doing a squash and merge on to main-bkup.\n\nSwitch to the main-bkup branch by clicking “Current branch -&gt; main-bkup”.\nClick “Current branch” again, and select “Choose a branch to merge into main-bkup”. Select “title-dev”, then click the drop down arrow next to the “Create a merge commit button”:\nSelect “Squash and merge”. This will change the blue button to read “Squash and merge”. Click that to do the squash and merge.\nClick the History tab to see what the history on main-bkup looks like:\n\nThe two commits that were done on title-dev, as well as the final merge commit, have all been “squashed” into a single large commit, which is placed at the end of the history on main-bkup. In graphical form, the history on main-bkup now looks like this:\n\nThe contents of main-bkup are exactly the same as main, just the history is different. (You can verify this by switching between main and main-bkup.)\n\n\nWhen do you use squash and merge vs merge?\nIt’s up to you, as each has its pros and cons:\nMerge\n\nPros:\n\nPreserves entire development history.\nIf multiple authors contributed to a development branch, their contributions are attributed in the history. This makes it easier to tell who did what using git blame.\n\nCons:\n\nMakes for a complicated history.\nDevelopment branches can consist of many small commits. You probably don’t want every little “fix typo” commit in your history on main.\n\n\nSquash and merge\n\nPros:\n\nMakes for a much cleaner history: all new developments are contained in a single commit.\nGitHub Desktop will formulate the merge commit message to include all the commit messages from the development branch for reference.\n\nCons:\n\nIt will look as though one person wrote all the changes in the commit since all the commits on the development branch are condensed into a single commit. If multiple people contributed to the branch, their attribution is lost, making it difficult to know who did what using git blame. Their attribution can be worked out from looking at the commit message and referring to the development branch (if it’s not deleted), but this can be tedious.\n\n\nPersonally, I use Squash and Merge most of the time to keep the history on main clean and straight forward (this is particularly nice on GitHub when using pull requests, as it will refer to the PR in the commit message; we will see this in exercise 3). But when working with someone else on a branch I will sometimes use Merge instead.\n\n\n\n\n\n\nWhat about rebasing?\n\n\n\nThere is another way to merge branches called rebasing. Rebasing changes the history of the development branch to make it look like all the commits came after the last commit on main. This is mostly useful for keeping a development branch up to date with main. For more on rebasing, see this article by the Atlassian corporation: Merging vs. rebasing.\n\n\n\n\n\nDeleting branches\nNow that you’ve merged your title-dev branch, you can delete it to save space. To do that, click Current Branch, then right click title-dev. This will yield a drop-down menu. Select “Delete branch”:\n\nYou will be prompted with a warning. Click the “Delete” button. The title-dev branch will be gone! You can also delete main-bkup now if you like.\n\n\n\nChallenge Questions: Editing the same file on different branches\nIn the above example we only made changes to different files on our two branches: on main we only edited story.txt, while on title-dev we only edited title.txt. However, there is nothing stopping us from editing the same file concurrently on two different branches. The following questions will illustrate how that works.\n\n\n\n\n\n\nQuestion 1: Setup\n\n\n\nCreate a file called list.txt that initially contains the following three lines:\nalpha\nbravo\ncharlie\nNow use the what you learned above to do the following:\n\nAdd and commit list.txt to main.\nCreate a branch called dev1.\nOn dev1 change the first line of list.txt to delta (i.e., replace alpha) then commit the change. Make the commit summary mesage be “add delta to list” when you do.\nGo back to main and change the third line to foxtrot (i.e., replace charlie), then commit it.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nOnce you create list.txt (use your text editor to do this), you should see it appear in the Changes tab in GitHub Desktop. Make sure you’re on main (the Current Branch should say main; if not, click Current Branch -&gt; main). Then:\n\nClick the check mark next to list.txt.\nOptionally add a summary, or just use the default “Create list.txt”.\nClick the “Commit 1 file to main”.\n\nDo the following:\n\nClick Current Branch -&gt; New Branch.\nType dev1 in the Name field.\nClick Create Branch.\n\nUse your text editor to open list.txt and change the first line to delta. As soon as you save the file, you should the new line appear in the Changes tab on GitHub Desktop. Click the check mark next to list.txt, then type “add delta to list” in the summary field (this will replace the default “Update list.txt”), then click “Commit 1 file to dev1”.\nDo the following:\n\nIf list.txt is open in your text editor, close it. Then click “Current branch” -&gt; main to switch back to main.\nOpen list.txt with your text editor and change third line to foxtrot, then save and exit.\nlist.txt should appear in the Changes tab. Click the check mark next to it.\nAdd “add foxtrot to list”, then click “Commit 1 file to main”.\n\n\n\n\n\nWhen you are done, list.txt should look like the following on main:\nalpha\nbravo\nfoxtrot\nwhile on dev1 it should look like:\ndelta\nbravo\ncharlie\n\n\n\n\n\n\n\n\nQuestion 2: Editing different lines\n\n\n\nNow suppose you merge dev1 into main. What happens to list.txt?\nA. main takes precedence since it’s the branch being merged into; list.txt will look like:\nalpha\nbravo\nfoxtrot\nB. dev1 takes precedence since it’s the branch being merged; list.txt will look like:\ndelta\nbravo\ncharlie\nC. The changes from both are adopted; list.txt will look like:\ndelta\nbravo\nfoxtrot\nD. An error is raised because the same file was modified.\nIf you’re not sure, try it yourself and see what happens!\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe answer is C. Since different lines have been modified, git is able to merge the changes together without issue. To do it yourself:\n\nClick Current Branch -&gt; main to switch to main.\nClick Current Branch -&gt; “Choose a branch to merge into main”\nSelect dev1 then click “Create a merge commit”.\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 3: Editing the same lines\n\n\n\nAfter merging dev1 on to main, suppose you create another branch called dev2. On dev2 you change the second line of list.txt to be echo while on main you change the second line to easy; i.e. on main list.txt looks like:\ndelta\neasy\nfoxtrot\nOn dev2 list.txt looks like:\ndelta\necho\nfoxtrot\nWhat happens if you merge dev2 into main in this case?\nA. main takes precedence since it’s the branch being merged into; list.txt will look like:\ndelta\neasy\nfoxtrot\nB. dev2 takes precedence since it’s the branch being merged; list.txt will look like:\ndelta\necho\nfoxtrot\nC. The changes from both branches are adopted; list.txt will look like:\ndelta\neasy\necho\nfoxtrot\nD. An error is raised because the same line is modified.\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe answer is D, an error is raised. Since the same line has been modified in the same file, git cannot tell how to reconcile the differences. This is known as a merge conflict. In this case, git will leave it up to the user to reconcile the differences. How to do that is discussed in the next section.\n\n\n\n\n\n\n\nIV. Resolving merge conflicts\nAs illustrated in the Challenge Questions, if the same lines in the same file are modified on two different branches, git will not know how to merge the changes. This is called a merge conflict. In this case, git will ask you to reconcile the differences. To illustrate, let’s try merging dev2 into main after making the changes to list.txt discussed in Question 3 above:\n\nIf you have not done so, try to merge dev2 into main after making the changes to the second line of list.txt discussed in Question 3:\n\nSwitch to main: Click Current Branch -&gt; main.\nClick Current Branch -&gt; Choose a branch to merge into “main”.\nSelect dev2, then click “Create a merge commit” (note that a message pops up above the button that says there be 1 conflicted file).\n\nWhen you try to do the merge, you will get the Resolve conflicts box:\n\nThis tells you what files are conflicted (in this case list.txt).\nTo fix this, we need to manually resolve the conflict. There are several options to deal with this. If you have VS Code or some other code editor installed, you will see an option to open the file in that program. Here, though, we’ll use our simple text editor to resolve the issue.\nOpen list.txt with your text editor. You should see the following:\ndelta\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\neasy\n=======\necho\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev2\nfoxtrot\ngit has added the conflicting lines from both branches to the file, along with information about the two branches. The line as it appears on main is prefaced with &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD. This indicates that the following line(s) is (are) how it appears on the branch being merged into. The line(s) is (are) followed by a =======.\nAfter the ======= the line(s) as it/they appear(s) on the branch being merged are shown. These are followed by &gt;&gt;&gt;&gt;&gt;&gt;&gt; BRANCH_NAME (here, BRANCH_NAME is dev2).\nWe are free to edit the file anyway we like to resolve the conflict. You should remove the &lt;&lt;&lt;&lt;, ====, and &gt;&gt;&gt;&gt; lines that git has added, along with the edit you want to make to resolve the conflict.\nIn this case, let’s keep the edit as it appears on dev2, and remove the edit on main. Delete the appropriate lines so that the file looks like:\ndelta\necho\nfoxtrot\nThen save and exit the file.\nAs soon as you save the changes to list.txt, the merge conflict window in GitHub Desktop will change to show that all conflicts have been resolved:\n\nClick “Continue Merge”.\nThe merge conflict is resolved! If you click on the History tab you will see the history with all the commits in it, as if you had a merged without any issue.\n\nMerge conflicts happen, but can be fixed fairly easy. If there were multiple areas in a file that caused a conflict, the conflicting areas would all be surrounded by the same &lt;&lt;&lt;&lt;&lt;&lt;&lt;/=======/&gt;&gt;&gt;&gt;&gt;&gt;&gt; lines that we saw above. You’ll want to search through the file for those to make sure you got all the conflicts. If multiple files had conflicts, git will make you resolve all of them before allowing the merge to complete.\n\n\nSummary\nThat’s the basics of how to use git. In the following parts we’ll see how to use this with GitHub and how to collaborate with partners using git and GitHub.",
    "crumbs": [
      "<code>git</code> and GitHub",
      "Exercise 1: Practice with `git` on a local repository"
    ]
  },
  {
    "objectID": "03_github/ssh_setup.html",
    "href": "03_github/ssh_setup.html",
    "title": "Create and add an ssh key to GitHub",
    "section": "",
    "text": "In order to push commits to GitHub you need to have authentication setup. While there are a couple of ways to do this, we recommend using ssh keys. The steps below will walk you through how to create an ssh key (if you don’t already have one) and add it to your GitHub account.\nBefore doing step 1, check if you already have a key pair generated. Open a shell and run:\nls ~/.ssh/id_ed25519\nIf a file path is returned, skip step 1. Otherwise, if you get “No such file or directory”, do step 1.\n\nGo to this help article on GitHub, select which operating system you are using for your terminal (either Mac or Linux), then scroll down to “Generating a new SSH key” and follow the instructions there. Stop when you get to “Adding your SSH key to the ssh-agent”.\nThe keygen command should have created a public and private key pair in your ~/.ssh directory. This is a hidden directory that contains your ssh keys, configuration settings, and other files related to ssh. Verify that the keys exist by typing:\n\nls ~/.ssh\nYou should see at least two files in there, one called id_ed25519 and one called id_ed25519.pub. (You may also have other id_* files in there, if you had created key pairs previously.)\nThe id_ed25519 file is your private key. Do not share your private key with anyone! It remains on your computer, and only on your computer. The id_ed25519.pub file is your public key. You can share the contents of your public key with other servers you want to log in to.\n\n\n\n\n\n\nNote: you need a GitHub account to do the following steps. If you do not have a GitHub account, sign up for one by going to https://github.com and following the onscreen instructions. Once you have an account you can proceed.\n\n\n\n\nNow let’s upload your public key to GitHub so that you can use your ssh keypairs when interacting with GitHub. Follow the instructions here: Adding a new SSH key to your GitHub account.\nTo test whether you were successful, in your terminal run\n\nssh -T git@github.com\nYou may be prompted with something like:\n&gt; The authenticity of host 'github.com (IP ADDRESS)' can't be established.\n&gt; ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.\n&gt; Are you sure you want to continue connecting (yes/no)?\nIf so, type yes. You should then get\nHi USERNAME! You've successfully authenticated, but GitHub does not provide shell access.\nwhere USERNAME is your username.\nYou’re now ready to use GitHub!\n\nFor more information on what ssh keys are and how they work, see the lecture on ssh from our summer workshop (Day 2, session 1).",
    "crumbs": [
      "<code>git</code> and GitHub",
      "Create and add an ssh key to GitHub"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Computing 101 Workshop – Summer 2025",
    "section": "",
    "text": "August 13-15, 2025\nHinds Hall, Syracuse University"
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "Computing 101 Workshop – Summer 2025",
    "section": "Schedule",
    "text": "Schedule\n\n\n\nDate\nTime\nLocation\nTopic\nPresenter\n\n\n\n\nWednesday, August 13\n9:00 AM - 10:00 AM\nHinds 111\nOptional: Software Setup Help\n\n\n\nWednesday, August 13\n10:00 AM - 12:00 PM\nHinds 111\nIntro to Python\nTBA\n\n\nWednesday, August 13\n10:00 AM - 12:00 PM\nHinds 117\nIntro to R: variables and functions\nSarah Lucas\n\n\nWednesday, August 13\n2:00 PM - 4:00 PM\nHinds 111\ngit and GitHub\nCollin Capano\n\n\nThursday, August 14\n10:00 AM - 12:00 PM\nHinds 111\nAdvanced Python: flow, loops, and classes\nTBA\n\n\nThursday, August 14\n10:00 AM - 12:00 PM\nHinds 117\nAdvanced R: data cleaning with the tidyverse\nJessie Trudeau\n\n\nThursday, August 14\n2:00 PM - 4:00 PM\nHinds 111\nAdvanced Python: miscellaneous applications\nTBA\n\n\nThursday, August 14\n2:00 PM - 4:00 PM\nHinds 117\nAdvanced R: data vizualization with ggplot2\nWill Gearty\n\n\nFriday, August 15\n10:00 AM - 12:00 PM\nHinds 111\nBash and Conda\nCollin Capano\n\n\nFriday, August 15\n2:00 PM - 4:00 PM\nHinds 111\nBash and Conda (cont.)\nCollin Capano"
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "Computing 101 Workshop – Summer 2025",
    "section": "Installation",
    "text": "Installation\nAttendees should install the following software before the workshop:\n\nGitHub Desktop (and make a GitHub account if you don’t have one already)\nR and RStudio (if attending R sessions)\nMiniconda (if attending the Bash and Conda sessions)\nGit for Windows (if running Windows and attending the Bash and Conda sessions)"
  },
  {
    "objectID": "01_r/r-intro.html",
    "href": "01_r/r-intro.html",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "Today we will use R, but we could have also used Python for the same reasons we chose R (and we teach workshops for both languages). Both R and Python are freely available, the instructions you use to do analyses are easily shared, and by using reproducible practices, it’s straightforward to add more data or to change settings like colors or the size of a plotting symbol.\n\n\n\n\n\n\nWhy R and not Python?\n\n\n\nThere’s no great reason. Although there are subtle differences between the languages, it’s ultimately a matter of personal preference. Both are powerful and popular languages that have very well developed and welcoming communities of scientists that use them. As you learn more about R, you may find things that are annoying in R that aren’t so annoying in Python; the same could be said of learning Python. If the community you work in uses R, then you’re in the right place.\n\n\nTo run R, all you really need is the R program, which is available for computers running the Windows, Mac OS X, or Linux operating systems. You should have downloaded R while getting for this workshop.\n\n\nRStudio\nTo make your life in R easier, there is a great (and free!) program called RStudio that you also downloaded and used during set up. As we work today, we’ll use features that are available in RStudio for writing and running code, managing projects, installing packages, getting help, and much more. It is important to remember that R and RStudio are different, but complementary programs. You need R to use RStudio.\n\n\n\n\n\n\nBonus Exercise: Can you think of a reason you might not want to use RStudio?\n\n\n\n\n\nOn some high-performance computer systems (e.g., Amazon Web Services) you typically can’t get a display like RStudio to open. Your university may have an interactive cluster available, but Syracuse University’s Zest HPC cluster does not permit interactive development. If you need to use RStudio, Syracuse affiliates should check out Google Colab.\n\n\n\nTo get started, we’ll spend a little time getting familiar with the RStudio environment and setting it up to suit your tastes. When you start RStudio, you’ll have three panels.\n\nOn the left you’ll have a panel with three tabs - Console, Terminal, and Jobs. The Console tab is what running R from the command line looks like. This is where you can enter R code. Try typing in 2+2 at the prompt (&gt;). In the upper right panel are tabs indicating the Environment, History, and a few other things. If you click on the History tab, you’ll see the command you ran at the R prompt.\n\nIn the lower right panel are tabs for Files, Plots, Packages, Help, and Viewer. Click on the “Packages” tab. Packages are add-on libraries developed by R community members. Each package contains a suite of functions that, once loaded, can be used within your code. As an exercise, we’ll install the “tidyverse” package, which we’ll end up using a lot in our future sessions. Click the Install button, then type “tidyverse” in the empty box and click the Install button. The installation process may take a few minutes since this is actually installing more than 10 packages and their dependencies (the packages that provide functions that are then used in these packages).\n\n\n\n\n\n\n\nThe tidyverse vs Base R\n\n\n\nIf you’ve used R before, you may have learned commands that are different than the ones we will be using during this workshop. We will be focusing on functions from the tidyverse. The “tidyverse” is a collection of R packages that have been designed to work well together and offer many convenient features that do not come with a fresh install of R (aka “base R”). These packages are very popular and have a lot of developer support including many staff members from RStudio. These functions generally help you to write code that is easier to read and maintain. We believe learning these tools will help you become more productive more quickly.\n\n\nYou can use the Pane Layout menu (accessed from the button that look like a top-down view of a 2x2 ice cube tray) to change where different tabs live. For example, I like to have the plots in the top right panel, so I can see the help docs and the plots at the same time. I also usually switch the positions of the console and editor so that the editor is on the bottom.\n\nWe’ll spend more time in each of these tabs as we go through the workshop, so we won’t spend a lot of time discussing them now.\nYou might want to alter the appearance of your RStudio window. The default appearance has a white background with black text. If you go to the Tools menu at the top of your screen, you’ll see a “Global options” menu at the bottom of the drop down; select that.\n\nFrom there you will see the ability to alter numerous things about RStudio. Under the Appearances tab you can select the theme you like most. As you can see there’s a lot in Global options that you can set to improve your experience in RStudio. Most of these settings are a matter of personal preference.\n\n\n\n\nProjects\nOne of the helpful features in RStudio is the ability to create a project. Projects make it straightforward to divide your work into multiple contexts, each with their own working directory, workspace, history, and scripts. You can create a fresh project, base one on an existing directory, or even build one based on a git repository. Since we’re all git experts now, let’s go with that option.\nFirst, we’ll need to create a GitHub repository. For the rest of the workshop, we’ll be using data collected about adult male and female Adélie (P. adeliae), chinstrap (P. antarcticus), and gentoo (P. papua) penguins on three islands (Biscoe, Dream, and Torgersen) within the Palmer Archipelago. For more information about the collection and handling of these data, see Gorman et al. 2014 and Horst et al. 2022.\nI’ve hosted these data within a fresh repository on GitHub. Like you did in the git and Github session, go ahead and fork this repository so that you have your own personal copy of it.\n\nOnce you’ve forked the repository, click on the green “Code” button, then click on “SSH” (since we set up SSH with our GitHub account in the Git and GitHub lesson). Then copy the SSH link of the repo:\n\nNow, return to your RStudio window. At the top of your screen you’ll see the “File” menu. Select that menu and then the menu for “New Project…”. (You could also use the second button on the second menu row or even the Project: (None) button in the top right)\n\nWhen the smaller window opens, select “Version Control” and then “Git” in the next window.\n\n\nNow paste your repository SSH link in the first box, then name your new repo directory in the second box (i.e., the name of the folder containing the repo on your computer; “penguins” is probably a good choice), and finally use the Browse button to select the local directory that you want to create this new directory within (i.e., the parent directory).\n\n\n\n\n\n\n\nNote\n\n\n\nIn addition to using the SSH link, you can also use the git URL of the repository (e.g., https://github.com/willgearty/penguins_repo.git). If you do this, you will need to either a) set up the SSH key connection manually using Git Bash or the Git Terminal in RStudio or b) set up a personal access token. You will be prompted to perform the “b” option the first time you attempt to push to GitHub.\n\n\nThen click the Create Project button.\nDid you notice anything change?\nIn the lower right corner of your RStudio session, you should notice that your Files tab is now your project directory. You’ll also see a file called penguins.Rproj in that directory.\nFrom now on, you should start RStudio by double clicking on that file. This will make sure you are in the correct directory when you run your analysis.\n\n\n\nScripts\nUsing the console is fine, but we’d ideally like to be able to save the R code that we write. This is where scripts and the Editor come in.\nBack in the “File” menu, you’ll see the first option is “New File”. Selecting “New File” opens another menu to the right and the first option is “R Script”. Select “R Script”.\nNow we have a fourth panel in the upper left corner of RStudio that includes an Editor tab with an untitled R Script. Let’s save this file as penguins.R within the “code” directory.\nWe will now be entering all of our R code into the Editor tab to then run it in our Console panel.\nOn line 1 of penguins.R, type 2 + 2.\nWith your cursor on the line with the 2 + 2, click the button that says Run. You should be able to see that 2 + 2 was run in the Console.\nAs you write more code, you can highlight multiple lines and then click Run to run all of the lines you have selected.\nLet’s delete the line with 2+2 and replace it with library(tidyverse).\nGo ahead and run that line in the Console by clicking the Run button on the top right of the Editor tab and choosing Run Selected Lines. This loads a set of useful functions and sample data that makes it easier for us to do complex analyses and create professional visualizations in R.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\n\n\n\nWhat’s with all those messages???\n\n\n\nWhen you loaded the tidyverse package, you probably got a message like the one we got above. Don’t panic! These messages are just giving you more information about what happened when you loaded tidyverse. The tidyverse is actually a collection of several different packages, so the first section of the message tells us what packages were installed when we loaded tidyverse (these include ggplot2, which we’ll be using a lot in the plotting lesson, and dyplr, which you’ll be introduced to in the data cleaning lesson).\nThe second section of messages gives a list of “conflicts.” Sometimes, the same function name will be used in two different packages, and R has to decide which function to use. For example, our message says that:\ndplyr::filter() masks stats::filter()\nThis means that two different packages (dyplr from tidyverse and stats from base R) have a function named filter(). By default, R uses the function that was most recently loaded, so if we try using the filter() function after loading tidyverse, we will be using the filter() function from dplyr().\n\n\n\n\n\n\n\n\nPro-tip\n\n\n\nThose of us that use R on a daily basis use cheat sheets to help us remember how to use various R functions. If you haven’t already, print out the PDF versions of the cheat sheets that were in the setup instructions.\nYou can also find them in RStudio by going to the “Help” menu and selecting “Cheat Sheets”. The cheat sheets that will be most helpful in this workshop are “Data Visualization with ggplot2”, “Data Transformation with dplyr”, “R Markdown Cheat Sheet”, and “R Markdown Reference Guide”.\nFor things that aren’t on the cheat sheets, Google is your best friend. Even expert coders use Google when they’re stuck or trying something new!\n\n\n\n\n\nLoading and reviewing data\nOne of the most useful aspects of R (and other coding languages) is its ability to work with existing data. We will import one of the penguin data files from the “data” directory called chinstrap_data.csv. There are many ways to import data into R but for your first time we will use RStudio’s file menu to import and display this data. As we move through this process, RStudio will translate these point and click commands into code for us.\nIn RStudio select “File” &gt; “Import Dataset” &gt; “From Text (readr)”.\n\nAs mentioned, the file is located in the “data” directory. Click the Browse button and select the file named chinstrap_data.csv. A preview of the data will appear in the window. You can see there are a lot of Import Options listed, but R has chosen the correct defaults for this particular file.\n\nWe can see in that box that our data will be imported with the Name: “chinstrap_data”. Also note that this screen will show you all the code that will be run when you import your data in the lower right “Code Preview”. Since everything looks good, click the Import button to bring your data into R.\nAfter you’ve imported your data, a table will open in a new tab in the top left corner of RStudio. This is a quick way to browse your data to make sure everything looks like it has been imported correctly. To review the data, click on the new tab.\nAfter you’ve reviewed the data, you’ll want to make sure to click the tab in the upper left to return to your penguins.R file so we can start writing some code.\nNow look in the Environment tab in the upper right corner of RStudio. Here you will see a list of all the objects you’ve created or imported during your R session. You will now see chinstrap_data listed here as well.\nFinally, take a look at the Console at the bottom left part of the RStudio screen. Here you will see the commands that were run for you to import your data in addition to associated metadata and warnings.\n\n\n\n\n\n\nData objects\n\n\n\nThere are many different ways to store data in R. Most objects have a table-like structure with rows and columns. We will refer to these objects generally as “data objects”. If you’ve used R before, you may be used to calling them “data.frames”. Functions from the “tidyverse” such as read_csv work with objects called “tibbles”, which are a specialized kind of “data.frame.” Another common way to store data is a “data.table”. All of these types of data objects (tibbles, data.frames, and data.tables) can be used with the commands we will learn in these. We may sometimes use these terms interchangeably.\n\n\n\n\n\nUnderstanding commands\nLet’s start by looking at the code RStudio ran for us by copying and pasting the second line from the console into our penguins.R file that is open in the Editor window.\n\nchinstrap_data &lt;- read_csv(\"data/chinstrap_data.csv\")\n\nRows: 68 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (9): studyName, Species, Region, Island, Stage, Individual ID, Clutch C...\ndbl  (7): Sample Number, Culmen Length (mm), Culmen Depth (mm), Flipper Leng...\ndate (1): Date Egg\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nYou should now have a line of text in your code file that started with chinstrap and ends with a ) symbol.\nWhat if we want to run this command from our code file?\nIn order to run code that you’ve typed in the editor, you have a few options. We can click Run again from the right side of the Editor tab but the quickest way to run the code is by pressing Ctrl+Enter on your keyboard (Cmd+Return on Mac).\nThis will run the line of code that currently contains your cursor and will move your cursor to the next line. Note that when Rstudio runs your code, it basically just copies your code from the Editor window to the Console window, just like what happened when we selected Run Selected Line(s).\nLet’s take a closer look at the parts of this command.\nStarting from the left, the first thing we see is chinstrap_data. We viewed the contents of this file after it was imported so we know that chinstrap_data acts as a placeholder for our data.\nIf we highlight just chinstrap_data within our code file and press Ctrl+Enter on our keyboard, what do we see?\nWe should see a data table outputted, similar to what we saw in the Viewer tab.\n\n\n# A tibble: 68 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;          \n 1 PAL0708                 1 Chinstrap peng… Anvers Dream  Adul… N61A1          \n 2 PAL0708                 2 Chinstrap peng… Anvers Dream  Adul… N61A2          \n 3 PAL0708                 3 Chinstrap peng… Anvers Dream  Adul… N62A1          \n 4 PAL0708                 4 Chinstrap peng… Anvers Dream  Adul… N62A2          \n 5 PAL0708                 5 Chinstrap peng… Anvers Dream  Adul… N64A1          \n 6 PAL0708                 6 Chinstrap peng… Anvers Dream  Adul… N64A2          \n 7 PAL0708                 7 Chinstrap peng… Anvers Dream  Adul… N66A1          \n 8 PAL0708                 8 Chinstrap peng… Anvers Dream  Adul… N66A2          \n 9 PAL0708                 9 Chinstrap peng… Anvers Dream  Adul… N67A1          \n10 PAL0708                10 Chinstrap peng… Anvers Dream  Adul… N67A2          \n# ℹ 58 more rows\n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;\n\n\nIn R terms, chinstrap_data is a named object that references or stores something. In this case, chinstrap_data stores a specific table of data.\nLooking back at the command in our code file, the second thing we see is a &lt;- symbol, which is the assignment operator. It assigns values generated or typed on the right to objects on the left. An alternative symbol that you might see used as an assignment operator is the = but it is clearer to only use &lt;- for assignment. We use this symbol so often that RStudio has a keyboard short cut for it: Alt+- on Windows, and Option+- on Mac.\n\n\n\n\n\n\nAssigning values to objects\n\n\n\nTry to assign values to some objects and observe each object after you have assigned a new value. What do you notice?\n\nname &lt;- \"Ben\"\nname\nage &lt;- 26\nage\nname &lt;- \"Harry Potter\"\nname\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nWhen we assign a value to an object, the object stores that value so we can access it later. However, if we store a new value in an object we have already created (like when we stored “Harry Potter” in the name object), it replaces the old value. The age object does not change, because we never assign it a new value.\n\n\n\n\n\n\n\n\n\n\n\nGuidelines on naming objects\n\n\n\n\nYou want your object names to be explicit and not too long.\nThey cannot start with a number (2x is not valid, but x2 is).\nR is case sensitive, so for example, weight_kg is different from Weight_kg.\nYou cannot use spaces in the name.\nThere are some names that cannot be used because they are the names of fundamental functions in R (e.g., if, else, for; see here for a complete list). If in doubt, check the help to see if the name is already in use (?function_name).\nIt’s best to avoid dots (.) within names. Many function names in R itself have them and dots also have a special meaning (methods) in R and other programming languages.\nIt is recommended to use nouns for object names and verbs for function names.\nBe consistent in the styling of your code, such as where you put spaces, how you name objects, etc. Using a consistent coding style makes your code clearer to read for your future self and your collaborators. One popular style guide can be found through the tidyverse.\n\n\n\n\n\n\n\n\n\nBonus Exercise: Bad names for objects\n\n\n\nTry to assign values to some new objects. What do you notice? After running all four lines of code bellow, what value do you think the object Flower holds?\n\n1number &lt;- 3\nFlower &lt;- \"marigold\"\nflower &lt;- \"rose\"\nfavorite number &lt;- 12\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNotice that we get an error when we try to assign values to 1number and favorite number. This is because we cannot start an object name with a numeral and we cannot have spaces in object names. The object Flower still holds “marigold.” This is because R is case-sensitive, so running flower &lt;- \"rose\" does NOT change the Flower object. This can get confusing, and is why we generally avoid having objects with the same name and different capitalization.\n\n\n\n\n\nThe next part of the command is read_csv(\"data/chinstrap_data.csv\"). This has a few different key parts. The first part is the read_csv function. You call a function in R by typing it’s name followed by opening then closing parenthesis. Each function has a purpose, which is often hinted at by the name of the function. Let’s try to run the function without anything inside the parenthesis.\n\nread_csv()\n\nError in read_csv(): argument \"file\" is missing, with no default\n\n\nWe get an error message. Don’t panic! Error messages pop up all the time, and can be super helpful in debugging code.\nIn this case, the message tells us “argument”file” is missing, with no default.” Many functions, including read_csv, require additional pieces of information to do their job. We call these additional values “arguments” or “parameters.” You pass arguments to a function by placing values in between the parenthesis. A function takes in these arguments and does a bunch of “magic” behind the scenes to output something we’re interested in.\nFor example, when we loaded in our data, the command contained \"chinstrap_data.csv\" inside the read_csv() function. This is the value we assigned to the file argument. But we didn’t say that that was the file. How does that work?\n\n\n\n\n\n\nPro-tip\n\n\n\nEach function has a help page that documents what arguments the function expects and what value it will return. You can bring up the help page a few different ways. If you have typed the function name in the Editor windows, you can put your cursor on the function name and press F1 to open help page in the Help viewer in the lower right corner of RStudio. You can also type ? followed by the function name in the console.\nFor example, try running ?read_csv. A help page should pop up with information about what the function is used for and how to use it, as well as useful examples of the function in action. As you can see, the first argument of read_csv is the file path.\n\n\nThe read_csv() function took the file path we provided, did who-knows-what behind the scenes, and then outputted an R object with the data stored in that csv file. All that, with one short line of code!\n\n\n\n\n\n\nBehind the curtain of functions\n\n\n\nIf you call a function without parentheses, it will often show you the source code of the function, demystifying its seemingly “black box” behavior. This can often be useful if a function is not behaving as you expect (but of course requires knowledge of what the functions in the source code do). Doing this will also tell you which package the function comes from (although you can also see this in the function’s help page).\n\n\nDo all functions need arguments? Let’s test some other functions:\n\nSys.Date()\n\n[1] \"2025-08-12\"\n\ngetwd()\n\n[1] \"/home/runner/work/workshop-computing-intro-2025/workshop-computing-intro-2025/01_r\"\n\n\nWhile some functions, like those above, don’t need any arguments, in other functions we may want to use multiple arguments. When we’re using multiple arguments, we separate the arguments with commas. For example, we can use the sum() function to add numbers together:\n\nsum(5, 6)\n\n[1] 11\n\n\n\n\n\n\n\n\nLearning more about functions\n\n\n\nLook up the function round. What does it do? What will you get as output for the following lines of code?\n\nround(3.1415)\nround(3.1415, 3)\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nround rounds a number. By default, it rounds it to zero digits (in our example above, to 3). If you give it a second number, it rounds it to that number of digits (in our example above, to 3.142)\n\n\n\n\n\nNotice how in this example, we didn’t include any argument names. But you can use argument names if you want:\n\nread_csv(file = 'data/chinstrap_data.csv')\n\n\n\n\n\n\n\nPosition of the arguments in functions\n\n\n\nWhich of the following lines of code will give you an output of 3.14? For the one(s) that don’t give you 3.14, what do they give you?\n\nround(x = 3.1415)\nround(x = 3.1415, digits = 2)\nround(digits = 2, x = 3.1415)\nround(2, 3.1415)\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe 2nd and 3rd lines will give you the right answer because the arguments are named, and when you use names the order doesn’t matter. The 1st line will give you 3 because the default number of digits is 0. Then 4th line will give you 2 because, since you didn’t name the arguments, x=2 and digits=3.1415.\n\n\n\n\n\nSometimes it is helpful - or even necessary - to include the argument name, but often we can skip the argument name, if the argument values are passed in a certain order. If all this function stuff sounds confusing, don’t worry! We’ll see a bunch of examples as we go that will make things clearer.\n\n\n\n\n\n\nReading in an excel file\n\n\n\nSay you have an excel file and not a csv - how would you read that in? Hint: Use the Internet to help you figure it out!\n\n\n\n\n\n\nSolution\n\n\n\n\n\nOne way is using the read_excel function in the readxl package. There are other ways, but this is our preferred method because the output will be the same as the output of read_csv.\n\n\n\n\n\n\n\n\n\n\n\nComments\n\n\n\nSometimes you may want to write comments in your code to help you remember what your code is doing, but you don’t want R to think these comments are a part of the code you want to evaluate. That’s where comments come in! Anything after a # symbol in your code will be ignored by R. For example, let’s say we wanted to make a note of what each of the functions we just used do:\n\nSys.Date()  # outputs the current date\ngetwd()     # outputs our current working directory (folder)\nsum(5, 6)   # adds numbers\nread_csv(file = 'data/chinstrap_data.csv') # reads in csv file\n\n\n\n\n\nCombining data\nThe last step before we can move on to plotting is reading in the other two data files and combining all three datasets into a single data object.\nFirst let’s read in the “adelie_data.csv” file. While you may be tempted to use the RStudio GUI again, let’s take a stab at writing the code ourselves. We’ll use the same code as before, but with the filename changed:\n\nadelie_data &lt;- read_csv(file = 'data/adelie_data.csv')\n\nRows: 152 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (9): studyName, Species, Region, Island, Stage, Individual ID, Clutch C...\ndbl  (7): Sample Number, Culmen Length (mm), Culmen Depth (mm), Flipper Leng...\ndate (1): Date Egg\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nYou should see that this new object is now listed in our environment. Also remember that we must always use the relative path to the file. While our script is located in our “code” directory, our working directory is actually the main directory of our project (as is the default for all projects). The relative path to the data file therefore must start with “data/”.\nNow we can combine our two data objects together. The bind_rows() function binds two data frames together rowwise, resulting in a single data.frame. Since we may want the separate data objects later, we save this as a new object.\n\npenguin_data &lt;- bind_rows(adelie_data, chinstrap_data)\n\nWe can use the table() function to count how many of each penguin species are now in our combined data.frame. Here we use the $ symbol to extract a single column of the data.frame:\n\ntable(penguin_data$Species)\n\n\n      Adelie Penguin (Pygoscelis adeliae) \n                                      152 \nChinstrap penguin (Pygoscelis antarctica) \n                                       68 \n\n\nNow go ahead and read in the last data file and combine it with the existing combined data.\n\ngentoo_data &lt;- read_csv(file = 'data/gentoo_data.csv')\n\nRows: 124 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (9): studyName, Species, Region, Island, Stage, Individual ID, Clutch C...\ndbl  (7): Sample Number, Culmen Length (mm), Culmen Depth (mm), Flipper Leng...\ndate (1): Date Egg\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\npenguin_data &lt;- bind_rows(penguin_data, gentoo_data)\n\nYour resulting data.frame should give the following counts:\n\ntable(penguin_data$Species)\n\n\n      Adelie Penguin (Pygoscelis adeliae) \n                                      152 \nChinstrap penguin (Pygoscelis antarctica) \n                                       68 \n        Gentoo penguin (Pygoscelis papua) \n                                      124 \n\n\nEverything looks good, so we can save our combined data object to a new csv file. To keep our repository clean and organized, we’ll make sure to save it in our “data” directory.\n\nwrite_csv(penguin_data, \"data/penguin_data.csv\")\n\nAnd that’s it for this module!",
    "crumbs": [
      "R",
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "01_r/r-tidydata.html",
    "href": "01_r/r-tidydata.html",
    "title": "R for Data Cleaning",
    "section": "",
    "text": "“How can R help make my research more reproducible?”\n“How can data tidying facilitate answering analysis questions?”\n“How can I summarize my data in R?”\n\n\n“To become familiar with the functions of dplyr and the tidyverse suite of packages.”\n“To use dplyr and the tidyverse packages to prepare data for analysis.”\n“To be able to create summary tables to answer analysis questions.”",
    "crumbs": [
      "R",
      "R for Data Cleaning"
    ]
  },
  {
    "objectID": "01_r/r-tidydata.html#selecting-columns",
    "href": "01_r/r-tidydata.html#selecting-columns",
    "title": "R for Data Cleaning",
    "section": "Selecting columns",
    "text": "Selecting columns\nWe can select specific columns in our dataset with the select() function. All dplyr wrangling verbs take a data frame as their first argument—in this case, the columns we want to select are the other arguments.\n\nselect(penguins_raw, Species, Island, `Individual ID`)\n\n# A tibble: 344 × 3\n   Species                             Island    `Individual ID`\n   &lt;chr&gt;                               &lt;chr&gt;     &lt;chr&gt;          \n 1 Adelie Penguin (Pygoscelis adeliae) Torgersen N1A1           \n 2 Adelie Penguin (Pygoscelis adeliae) Torgersen N1A2           \n 3 Adelie Penguin (Pygoscelis adeliae) Torgersen N2A1           \n 4 Adelie Penguin (Pygoscelis adeliae) Torgersen N2A2           \n 5 Adelie Penguin (Pygoscelis adeliae) Torgersen N3A1           \n 6 Adelie Penguin (Pygoscelis adeliae) Torgersen N3A2           \n 7 Adelie Penguin (Pygoscelis adeliae) Torgersen N4A1           \n 8 Adelie Penguin (Pygoscelis adeliae) Torgersen N4A2           \n 9 Adelie Penguin (Pygoscelis adeliae) Torgersen N5A1           \n10 Adelie Penguin (Pygoscelis adeliae) Torgersen N5A2           \n# ℹ 334 more rows\n\n\n\n\n\n\n\n\nSpaces in column names\n\n\n\nNote that here we had to use the “`” symbol around the final column name because the column name includes a space. If there are no spaces in your column names, you would just write out their names with no quotes or apostrophes. We’ll discuss more about proper column names later in the session.\n\n\nThis is a good moment to talk about “pipes.” Notice how the code below produces the same output as the one above, but with a slightly different syntax. Pipes (|&gt; or %&gt;%) “kick” the object on the left of the pipe to the first argument of the function on the right. One can read pipes as “then,” so the code below can be read as “take penguins_raw, then select the columns Species, Island and Individual ID.” Pipes are very powerful and can be used to link multiple operations, as we will see in a moment.\n\npenguins_raw |&gt; \n  select(Species, Island, `Individual ID`) \n\n# A tibble: 344 × 3\n   Species                             Island    `Individual ID`\n   &lt;chr&gt;                               &lt;chr&gt;     &lt;chr&gt;          \n 1 Adelie Penguin (Pygoscelis adeliae) Torgersen N1A1           \n 2 Adelie Penguin (Pygoscelis adeliae) Torgersen N1A2           \n 3 Adelie Penguin (Pygoscelis adeliae) Torgersen N2A1           \n 4 Adelie Penguin (Pygoscelis adeliae) Torgersen N2A2           \n 5 Adelie Penguin (Pygoscelis adeliae) Torgersen N3A1           \n 6 Adelie Penguin (Pygoscelis adeliae) Torgersen N3A2           \n 7 Adelie Penguin (Pygoscelis adeliae) Torgersen N4A1           \n 8 Adelie Penguin (Pygoscelis adeliae) Torgersen N4A2           \n 9 Adelie Penguin (Pygoscelis adeliae) Torgersen N5A1           \n10 Adelie Penguin (Pygoscelis adeliae) Torgersen N5A2           \n# ℹ 334 more rows\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou can insert a pipe with the Cmd/Ctrl + Shift + M shortcut. If you have not changed the default RStudio settings, an “old” pipe (%&gt;%) might appear. While most of the functionality is the same, the |&gt; “new” pipes are more readable and don’t need any extra packages (to use %&gt;% you need the tidyverse or one of its packages). You can change this RStudio option in Tools &gt; Global Options &gt; Code &gt; Use native pipe operator.\n\n\nGoing back to selecting columns, you can select ranges:\n\npenguins_raw |&gt; \n  select(Species:`Individual ID`)\n\n# A tibble: 344 × 5\n   Species                             Region Island    Stage    `Individual ID`\n   &lt;chr&gt;                               &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;          \n 1 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult, … N1A1           \n 2 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult, … N1A2           \n 3 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult, … N2A1           \n 4 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult, … N2A2           \n 5 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult, … N3A1           \n 6 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult, … N3A2           \n 7 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult, … N4A1           \n 8 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult, … N4A2           \n 9 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult, … N5A1           \n10 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult, … N5A2           \n# ℹ 334 more rows\n\n\nYou can also deselect columns using a minus sign:\n\npenguins_raw |&gt; \n  select(-Species)\n\n# A tibble: 344 × 16\n   studyName `Sample Number` Region Island    Stage              `Individual ID`\n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;              &lt;chr&gt;          \n 1 PAL0708                 1 Anvers Torgersen Adult, 1 Egg Stage N1A1           \n 2 PAL0708                 2 Anvers Torgersen Adult, 1 Egg Stage N1A2           \n 3 PAL0708                 3 Anvers Torgersen Adult, 1 Egg Stage N2A1           \n 4 PAL0708                 4 Anvers Torgersen Adult, 1 Egg Stage N2A2           \n 5 PAL0708                 5 Anvers Torgersen Adult, 1 Egg Stage N3A1           \n 6 PAL0708                 6 Anvers Torgersen Adult, 1 Egg Stage N3A2           \n 7 PAL0708                 7 Anvers Torgersen Adult, 1 Egg Stage N4A1           \n 8 PAL0708                 8 Anvers Torgersen Adult, 1 Egg Stage N4A2           \n 9 PAL0708                 9 Anvers Torgersen Adult, 1 Egg Stage N5A1           \n10 PAL0708                10 Anvers Torgersen Adult, 1 Egg Stage N5A2           \n# ℹ 334 more rows\n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;\n\n\nAnd use a few helper functions, like matches():\n\npenguins_raw |&gt; \n  select(Species, matches(\"Length\"))\n\n# A tibble: 344 × 3\n   Species                            `Culmen Length (mm)` `Flipper Length (mm)`\n   &lt;chr&gt;                                             &lt;dbl&gt;                 &lt;dbl&gt;\n 1 Adelie Penguin (Pygoscelis adelia…                 39.1                   181\n 2 Adelie Penguin (Pygoscelis adelia…                 39.5                   186\n 3 Adelie Penguin (Pygoscelis adelia…                 40.3                   195\n 4 Adelie Penguin (Pygoscelis adelia…                 NA                      NA\n 5 Adelie Penguin (Pygoscelis adelia…                 36.7                   193\n 6 Adelie Penguin (Pygoscelis adelia…                 39.3                   190\n 7 Adelie Penguin (Pygoscelis adelia…                 38.9                   181\n 8 Adelie Penguin (Pygoscelis adelia…                 39.2                   195\n 9 Adelie Penguin (Pygoscelis adelia…                 34.1                   193\n10 Adelie Penguin (Pygoscelis adelia…                 42                     190\n# ℹ 334 more rows\n\n\nOr everything(), which we usually use to reorder columns:\n\npenguins_raw |&gt; \n  select(Species, everything())\n\n# A tibble: 344 × 17\n   Species         studyName `Sample Number` Region Island Stage `Individual ID`\n   &lt;chr&gt;           &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;          \n 1 Adelie Penguin… PAL0708                 1 Anvers Torge… Adul… N1A1           \n 2 Adelie Penguin… PAL0708                 2 Anvers Torge… Adul… N1A2           \n 3 Adelie Penguin… PAL0708                 3 Anvers Torge… Adul… N2A1           \n 4 Adelie Penguin… PAL0708                 4 Anvers Torge… Adul… N2A2           \n 5 Adelie Penguin… PAL0708                 5 Anvers Torge… Adul… N3A1           \n 6 Adelie Penguin… PAL0708                 6 Anvers Torge… Adul… N3A2           \n 7 Adelie Penguin… PAL0708                 7 Anvers Torge… Adul… N4A1           \n 8 Adelie Penguin… PAL0708                 8 Anvers Torge… Adul… N4A2           \n 9 Adelie Penguin… PAL0708                 9 Anvers Torge… Adul… N5A1           \n10 Adelie Penguin… PAL0708                10 Anvers Torge… Adul… N5A2           \n# ℹ 334 more rows\n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;\n\n\n\n\n\n\n\n\nTip\n\n\n\nNotice that all these commands have not edited our existent objects—they have just printed the requested outputs to the screen. In order to modify objects, you need to use the assignment operator (&lt;-). For example:\n\npenguins_raw_reduced &lt;- penguins_raw |&gt; \n  select(Species, matches(\"Length\"))\n\n\npenguins_raw_reduced\n\n# A tibble: 344 × 3\n   Species                            `Culmen Length (mm)` `Flipper Length (mm)`\n   &lt;chr&gt;                                             &lt;dbl&gt;                 &lt;dbl&gt;\n 1 Adelie Penguin (Pygoscelis adelia…                 39.1                   181\n 2 Adelie Penguin (Pygoscelis adelia…                 39.5                   186\n 3 Adelie Penguin (Pygoscelis adelia…                 40.3                   195\n 4 Adelie Penguin (Pygoscelis adelia…                 NA                      NA\n 5 Adelie Penguin (Pygoscelis adelia…                 36.7                   193\n 6 Adelie Penguin (Pygoscelis adelia…                 39.3                   190\n 7 Adelie Penguin (Pygoscelis adelia…                 38.9                   181\n 8 Adelie Penguin (Pygoscelis adelia…                 39.2                   195\n 9 Adelie Penguin (Pygoscelis adelia…                 34.1                   193\n10 Adelie Penguin (Pygoscelis adelia…                 42                     190\n# ℹ 334 more rows\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nSelect the variables Species, Stage, Individual ID, Clutch Completion, and Date Egg from the data frame.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\npenguins_raw |&gt; \n  select(Species, Stage, `Individual ID`, `Clutch Completion`, `Date Egg`)\n\n# A tibble: 344 × 5\n   Species                  Stage `Individual ID` `Clutch Completion` `Date Egg`\n   &lt;chr&gt;                    &lt;chr&gt; &lt;chr&gt;           &lt;chr&gt;               &lt;date&gt;    \n 1 Adelie Penguin (Pygosce… Adul… N1A1            Yes                 2007-11-11\n 2 Adelie Penguin (Pygosce… Adul… N1A2            Yes                 2007-11-11\n 3 Adelie Penguin (Pygosce… Adul… N2A1            Yes                 2007-11-16\n 4 Adelie Penguin (Pygosce… Adul… N2A2            Yes                 2007-11-16\n 5 Adelie Penguin (Pygosce… Adul… N3A1            Yes                 2007-11-16\n 6 Adelie Penguin (Pygosce… Adul… N3A2            Yes                 2007-11-16\n 7 Adelie Penguin (Pygosce… Adul… N4A1            No                  2007-11-15\n 8 Adelie Penguin (Pygosce… Adul… N4A2            No                  2007-11-15\n 9 Adelie Penguin (Pygosce… Adul… N5A1            Yes                 2007-11-09\n10 Adelie Penguin (Pygosce… Adul… N5A2            Yes                 2007-11-09\n# ℹ 334 more rows",
    "crumbs": [
      "R",
      "R for Data Cleaning"
    ]
  },
  {
    "objectID": "01_r/r-tidydata.html#renaming-columns",
    "href": "01_r/r-tidydata.html#renaming-columns",
    "title": "R for Data Cleaning",
    "section": "Renaming columns",
    "text": "Renaming columns\nWe can use the rename() function to rename columns, with the syntax new_name = old_name. This is especially useful for datasets like this one, where the column names are long, have spaces in them, or other special characters that require ` in order to call the column name. Here is an example of how we rename a column:\n\npenguins_raw |&gt; \n  rename(id = `Individual ID`, \n         flipper_length = `Flipper Length (mm)`)\n\n# A tibble: 344 × 17\n   studyName `Sample Number` Species                   Region Island Stage id   \n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;                     &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;\n 1 PAL0708                 1 Adelie Penguin (Pygoscel… Anvers Torge… Adul… N1A1 \n 2 PAL0708                 2 Adelie Penguin (Pygoscel… Anvers Torge… Adul… N1A2 \n 3 PAL0708                 3 Adelie Penguin (Pygoscel… Anvers Torge… Adul… N2A1 \n 4 PAL0708                 4 Adelie Penguin (Pygoscel… Anvers Torge… Adul… N2A2 \n 5 PAL0708                 5 Adelie Penguin (Pygoscel… Anvers Torge… Adul… N3A1 \n 6 PAL0708                 6 Adelie Penguin (Pygoscel… Anvers Torge… Adul… N3A2 \n 7 PAL0708                 7 Adelie Penguin (Pygoscel… Anvers Torge… Adul… N4A1 \n 8 PAL0708                 8 Adelie Penguin (Pygoscel… Anvers Torge… Adul… N4A2 \n 9 PAL0708                 9 Adelie Penguin (Pygoscel… Anvers Torge… Adul… N5A1 \n10 PAL0708                10 Adelie Penguin (Pygoscel… Anvers Torge… Adul… N5A2 \n# ℹ 334 more rows\n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   flipper_length &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;\n\n\nThis is a good occasion to show how pipes allow us to chain operations. How do we read the following code out loud? (Remember that pipes are read as “then”).\n\npenguins_raw |&gt; \n  select(Species, `Individual ID`, matches(\"Length\")) |&gt; \n  rename(id = `Individual ID`, \n         flipper_length = `Flipper Length (mm)`)\n\n# A tibble: 344 × 4\n   Species                             id    `Culmen Length (mm)` flipper_length\n   &lt;chr&gt;                               &lt;chr&gt;                &lt;dbl&gt;          &lt;dbl&gt;\n 1 Adelie Penguin (Pygoscelis adeliae) N1A1                  39.1            181\n 2 Adelie Penguin (Pygoscelis adeliae) N1A2                  39.5            186\n 3 Adelie Penguin (Pygoscelis adeliae) N2A1                  40.3            195\n 4 Adelie Penguin (Pygoscelis adeliae) N2A2                  NA               NA\n 5 Adelie Penguin (Pygoscelis adeliae) N3A1                  36.7            193\n 6 Adelie Penguin (Pygoscelis adeliae) N3A2                  39.3            190\n 7 Adelie Penguin (Pygoscelis adeliae) N4A1                  38.9            181\n 8 Adelie Penguin (Pygoscelis adeliae) N4A2                  39.2            195\n 9 Adelie Penguin (Pygoscelis adeliae) N5A1                  34.1            193\n10 Adelie Penguin (Pygoscelis adeliae) N5A2                  42              190\n# ℹ 334 more rows",
    "crumbs": [
      "R",
      "R for Data Cleaning"
    ]
  },
  {
    "objectID": "01_r/r-tidydata.html#creating-columns",
    "href": "01_r/r-tidydata.html#creating-columns",
    "title": "R for Data Cleaning",
    "section": "Creating columns",
    "text": "Creating columns\nIt is common to want to create columns based on existing ones. We can use mutate() to do so. For example, we could want to express the main length variables (length of the penguin’s flipper and culmen, the dorsal ridge of their bill) in centimeters instead of millimeters:\n\npenguins_raw |&gt; \n  select(Species, matches(\"Length\")) |&gt; # select just for clarity\n    rename(flipper_length = `Flipper Length (mm)`) |&gt;\n  #mutate length variables\n  mutate(flipper_length_cm = flipper_length * 0.1,\n         culmen_length_cm = `Culmen Length (mm)` * 0.1)\n\n# A tibble: 344 × 5\n   Species                 `Culmen Length (mm)` flipper_length flipper_length_cm\n   &lt;chr&gt;                                  &lt;dbl&gt;          &lt;dbl&gt;             &lt;dbl&gt;\n 1 Adelie Penguin (Pygosc…                 39.1            181              18.1\n 2 Adelie Penguin (Pygosc…                 39.5            186              18.6\n 3 Adelie Penguin (Pygosc…                 40.3            195              19.5\n 4 Adelie Penguin (Pygosc…                 NA               NA              NA  \n 5 Adelie Penguin (Pygosc…                 36.7            193              19.3\n 6 Adelie Penguin (Pygosc…                 39.3            190              19  \n 7 Adelie Penguin (Pygosc…                 38.9            181              18.1\n 8 Adelie Penguin (Pygosc…                 39.2            195              19.5\n 9 Adelie Penguin (Pygosc…                 34.1            193              19.3\n10 Adelie Penguin (Pygosc…                 42              190              19  \n# ℹ 334 more rows\n# ℹ 1 more variable: culmen_length_cm &lt;dbl&gt;\n\n\nWe can also use multiple columns for creating a new one. For example, let’s calculate the flipper to culmen length ratio:\n\npenguins_raw |&gt; \n select(Species,  matches(\"Length\")) |&gt; # select just for clarity\n    rename(flipper_length = `Flipper Length (mm)`) |&gt;\n  mutate(flipper_culmen_ratio = flipper_length/`Culmen Length (mm)`)\n\n# A tibble: 344 × 4\n   Species              `Culmen Length (mm)` flipper_length flipper_culmen_ratio\n   &lt;chr&gt;                               &lt;dbl&gt;          &lt;dbl&gt;                &lt;dbl&gt;\n 1 Adelie Penguin (Pyg…                 39.1            181                 4.63\n 2 Adelie Penguin (Pyg…                 39.5            186                 4.71\n 3 Adelie Penguin (Pyg…                 40.3            195                 4.84\n 4 Adelie Penguin (Pyg…                 NA               NA                NA   \n 5 Adelie Penguin (Pyg…                 36.7            193                 5.26\n 6 Adelie Penguin (Pyg…                 39.3            190                 4.83\n 7 Adelie Penguin (Pyg…                 38.9            181                 4.65\n 8 Adelie Penguin (Pyg…                 39.2            195                 4.97\n 9 Adelie Penguin (Pyg…                 34.1            193                 5.66\n10 Adelie Penguin (Pyg…                 42              190                 4.52\n# ℹ 334 more rows",
    "crumbs": [
      "R",
      "R for Data Cleaning"
    ]
  },
  {
    "objectID": "01_r/r-tidydata.html#filtering-rows",
    "href": "01_r/r-tidydata.html#filtering-rows",
    "title": "R for Data Cleaning",
    "section": "Filtering rows",
    "text": "Filtering rows\nAnother common operation is to filter rows based on logical conditions. We can do so with the filter() function. For example, we can filter to only get penguins of a certain species:\n\npenguins_raw |&gt; \n  filter(Species == \"Gentoo penguin (Pygoscelis papua)\")\n\n# A tibble: 124 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;          \n 1 PAL0708                 1 Gentoo penguin… Anvers Biscoe Adul… N31A1          \n 2 PAL0708                 2 Gentoo penguin… Anvers Biscoe Adul… N31A2          \n 3 PAL0708                 3 Gentoo penguin… Anvers Biscoe Adul… N32A1          \n 4 PAL0708                 4 Gentoo penguin… Anvers Biscoe Adul… N32A2          \n 5 PAL0708                 5 Gentoo penguin… Anvers Biscoe Adul… N33A1          \n 6 PAL0708                 6 Gentoo penguin… Anvers Biscoe Adul… N33A2          \n 7 PAL0708                 7 Gentoo penguin… Anvers Biscoe Adul… N34A1          \n 8 PAL0708                 8 Gentoo penguin… Anvers Biscoe Adul… N34A2          \n 9 PAL0708                 9 Gentoo penguin… Anvers Biscoe Adul… N35A1          \n10 PAL0708                10 Gentoo penguin… Anvers Biscoe Adul… N35A2          \n# ℹ 114 more rows\n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;\n\n\nNotice that == here is a logical operator, read as “is equal to.” So our full chain of operations says the following: take penguins_raw, then filter it to get rows where the Species is equal to “Gentoo penguin (Pygoscelis papua)”.\nThere are other logical operators, also called boolean operators:\n\n\n\nLogical operator\nMeaning\n\n\n\n\n==\n“is equal to”\n\n\n!=\n“is not equal to”\n\n\n&gt;\n“is greater than”\n\n\n&lt;\n“is less than”\n\n\n&gt;=\n“is greater than or equal to”\n\n\n&lt;=\n“is less than or equal to”\n\n\n%in%\n“is contained in”\n\n\n&\n“and” (intersection)\n\n\n|\n“or” (union)\n\n\n\nLet’s see a couple of other examples.\n\npenguins_raw |&gt; \n  filter(Island %in% c(\"Torgersen\", \"Biscoe\"))\n\n# A tibble: 220 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;          \n 1 PAL0708                 1 Adelie Penguin… Anvers Torge… Adul… N1A1           \n 2 PAL0708                 2 Adelie Penguin… Anvers Torge… Adul… N1A2           \n 3 PAL0708                 3 Adelie Penguin… Anvers Torge… Adul… N2A1           \n 4 PAL0708                 4 Adelie Penguin… Anvers Torge… Adul… N2A2           \n 5 PAL0708                 5 Adelie Penguin… Anvers Torge… Adul… N3A1           \n 6 PAL0708                 6 Adelie Penguin… Anvers Torge… Adul… N3A2           \n 7 PAL0708                 7 Adelie Penguin… Anvers Torge… Adul… N4A1           \n 8 PAL0708                 8 Adelie Penguin… Anvers Torge… Adul… N4A2           \n 9 PAL0708                 9 Adelie Penguin… Anvers Torge… Adul… N5A1           \n10 PAL0708                10 Adelie Penguin… Anvers Torge… Adul… N5A2           \n# ℹ 210 more rows\n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;\n\n\n\npenguins_raw |&gt; \n  filter(Island == \"Torgersen\" & Sex == \"MALE\")\n\n# A tibble: 23 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;          \n 1 PAL0708                 1 Adelie Penguin… Anvers Torge… Adul… N1A1           \n 2 PAL0708                 6 Adelie Penguin… Anvers Torge… Adul… N3A2           \n 3 PAL0708                 8 Adelie Penguin… Anvers Torge… Adul… N4A2           \n 4 PAL0708                14 Adelie Penguin… Anvers Torge… Adul… N7A2           \n 5 PAL0708                15 Adelie Penguin… Anvers Torge… Adul… N8A1           \n 6 PAL0708                18 Adelie Penguin… Anvers Torge… Adul… N9A2           \n 7 PAL0708                20 Adelie Penguin… Anvers Torge… Adul… N10A2          \n 8 PAL0809                70 Adelie Penguin… Anvers Torge… Adul… N32A2          \n 9 PAL0809                72 Adelie Penguin… Anvers Torge… Adul… N34A2          \n10 PAL0809                74 Adelie Penguin… Anvers Torge… Adul… N35A2          \n# ℹ 13 more rows\n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;\n\n\n\npenguins_raw |&gt; \n  filter(`Flipper Length (mm)` &gt; 200)\n\n# A tibble: 148 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;          \n 1 PAL0809                91 Adelie Penguin… Anvers Dream  Adul… N45A1          \n 2 PAL0809                92 Adelie Penguin… Anvers Dream  Adul… N45A2          \n 3 PAL0809                96 Adelie Penguin… Anvers Dream  Adul… N48A2          \n 4 PAL0910               102 Adelie Penguin… Anvers Biscoe Adul… N47A2          \n 5 PAL0910               124 Adelie Penguin… Anvers Torge… Adul… N67A2          \n 6 PAL0910               130 Adelie Penguin… Anvers Torge… Adul… N72A2          \n 7 PAL0910               152 Adelie Penguin… Anvers Dream  Adul… N85A2          \n 8 PAL0708                 1 Gentoo penguin… Anvers Biscoe Adul… N31A1          \n 9 PAL0708                 2 Gentoo penguin… Anvers Biscoe Adul… N31A2          \n10 PAL0708                 3 Gentoo penguin… Anvers Biscoe Adul… N32A1          \n# ℹ 138 more rows\n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;\n\n\n\n\n\n\n\n\nTip\n\n\n\nConfused about when to use filter() and when to use select()? You use filter() to select rows (i.e., specific observations) with specific attributes, and you use select() to select columns (i.e., specific variables). To help keep it straight, remember that the letter “c” for column is in select() and the letter “r” for row is in filter().\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nAdd a new column to the data frame, called length_mass_ratio, which calculates the ratio of the penguin’s flipper length Flipper Length (mm) and their body mass Body Mass (g). How would you calculate length_cm_mass_ratio, where the flipper length is expressed as centimeters instead of millimeters?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nTo calculate length_mass_ratio:\n\n## Length to mass ratio:\npenguins_raw |&gt; \n select(Species, `Body Mass (g)`, matches(\"Length\")) |&gt; # select just for clarity\n    rename(flipper_length = `Flipper Length (mm)`) |&gt;\n  mutate(length_mass_ratio = flipper_length/`Body Mass (g)`)\n\n# A tibble: 344 × 5\n   Species `Body Mass (g)` `Culmen Length (mm)` flipper_length length_mass_ratio\n   &lt;chr&gt;             &lt;dbl&gt;                &lt;dbl&gt;          &lt;dbl&gt;             &lt;dbl&gt;\n 1 Adelie…            3750                 39.1            181            0.0483\n 2 Adelie…            3800                 39.5            186            0.0489\n 3 Adelie…            3250                 40.3            195            0.06  \n 4 Adelie…              NA                 NA               NA           NA     \n 5 Adelie…            3450                 36.7            193            0.0559\n 6 Adelie…            3650                 39.3            190            0.0521\n 7 Adelie…            3625                 38.9            181            0.0499\n 8 Adelie…            4675                 39.2            195            0.0417\n 9 Adelie…            3475                 34.1            193            0.0555\n10 Adelie…            4250                 42              190            0.0447\n# ℹ 334 more rows\n\n\nThere are two ways to calculate length_cm_mass_ratio in centimeters, you could either generate a new length variable in centimeters, or just apply the unit transformation to the ratio equation:\n\npenguins_raw |&gt; \n select(Species, `Body Mass (g)`, matches(\"Length\")) |&gt; # select just for clarity\n    rename(flipper_length = `Flipper Length (mm)`) |&gt;\n  mutate(flipper_cm = flipper_length * 0.1, \n      length_cm_mass_ratio = flipper_cm/`Body Mass (g)`)\n\n# A tibble: 344 × 6\n   Species        `Body Mass (g)` `Culmen Length (mm)` flipper_length flipper_cm\n   &lt;chr&gt;                    &lt;dbl&gt;                &lt;dbl&gt;          &lt;dbl&gt;      &lt;dbl&gt;\n 1 Adelie Pengui…            3750                 39.1            181       18.1\n 2 Adelie Pengui…            3800                 39.5            186       18.6\n 3 Adelie Pengui…            3250                 40.3            195       19.5\n 4 Adelie Pengui…              NA                 NA               NA       NA  \n 5 Adelie Pengui…            3450                 36.7            193       19.3\n 6 Adelie Pengui…            3650                 39.3            190       19  \n 7 Adelie Pengui…            3625                 38.9            181       18.1\n 8 Adelie Pengui…            4675                 39.2            195       19.5\n 9 Adelie Pengui…            3475                 34.1            193       19.3\n10 Adelie Pengui…            4250                 42              190       19  \n# ℹ 334 more rows\n# ℹ 1 more variable: length_cm_mass_ratio &lt;dbl&gt;\n\npenguins_raw |&gt; \n select(Species, `Body Mass (g)`, matches(\"Length\")) |&gt; # select just for clarity\n    rename(flipper_length = `Flipper Length (mm)`) |&gt;\n  mutate(length_cm_mass_ratio = flipper_length/`Body Mass (g)` * 0.1)\n\n# A tibble: 344 × 5\n   Species                   `Body Mass (g)` `Culmen Length (mm)` flipper_length\n   &lt;chr&gt;                               &lt;dbl&gt;                &lt;dbl&gt;          &lt;dbl&gt;\n 1 Adelie Penguin (Pygoscel…            3750                 39.1            181\n 2 Adelie Penguin (Pygoscel…            3800                 39.5            186\n 3 Adelie Penguin (Pygoscel…            3250                 40.3            195\n 4 Adelie Penguin (Pygoscel…              NA                 NA               NA\n 5 Adelie Penguin (Pygoscel…            3450                 36.7            193\n 6 Adelie Penguin (Pygoscel…            3650                 39.3            190\n 7 Adelie Penguin (Pygoscel…            3625                 38.9            181\n 8 Adelie Penguin (Pygoscel…            4675                 39.2            195\n 9 Adelie Penguin (Pygoscel…            3475                 34.1            193\n10 Adelie Penguin (Pygoscel…            4250                 42              190\n# ℹ 334 more rows\n# ℹ 1 more variable: length_cm_mass_ratio &lt;dbl&gt;\n\n\n\n\n\n\nFilter the data frame to only get penguins with nests observed with a fully completed clutch.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\npenguins_raw |&gt; \n  filter(`Clutch Completion` == \"Yes\")\n\n# A tibble: 308 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;          \n 1 PAL0708                 1 Adelie Penguin… Anvers Torge… Adul… N1A1           \n 2 PAL0708                 2 Adelie Penguin… Anvers Torge… Adul… N1A2           \n 3 PAL0708                 3 Adelie Penguin… Anvers Torge… Adul… N2A1           \n 4 PAL0708                 4 Adelie Penguin… Anvers Torge… Adul… N2A2           \n 5 PAL0708                 5 Adelie Penguin… Anvers Torge… Adul… N3A1           \n 6 PAL0708                 6 Adelie Penguin… Anvers Torge… Adul… N3A2           \n 7 PAL0708                 9 Adelie Penguin… Anvers Torge… Adul… N5A1           \n 8 PAL0708                10 Adelie Penguin… Anvers Torge… Adul… N5A2           \n 9 PAL0708                11 Adelie Penguin… Anvers Torge… Adul… N6A1           \n10 PAL0708                12 Adelie Penguin… Anvers Torge… Adul… N6A2           \n# ℹ 298 more rows\n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;\n\n\n\n\n\n\nFilter the data frame to only get penguins with nests observed with a fully completed clutch on the Island of Torgersen.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\npenguins_raw |&gt; \n  filter(`Clutch Completion` == \"Yes\" & Island == \"Torgersen\")\n\n# A tibble: 44 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;          \n 1 PAL0708                 1 Adelie Penguin… Anvers Torge… Adul… N1A1           \n 2 PAL0708                 2 Adelie Penguin… Anvers Torge… Adul… N1A2           \n 3 PAL0708                 3 Adelie Penguin… Anvers Torge… Adul… N2A1           \n 4 PAL0708                 4 Adelie Penguin… Anvers Torge… Adul… N2A2           \n 5 PAL0708                 5 Adelie Penguin… Anvers Torge… Adul… N3A1           \n 6 PAL0708                 6 Adelie Penguin… Anvers Torge… Adul… N3A2           \n 7 PAL0708                 9 Adelie Penguin… Anvers Torge… Adul… N5A1           \n 8 PAL0708                10 Adelie Penguin… Anvers Torge… Adul… N5A2           \n 9 PAL0708                11 Adelie Penguin… Anvers Torge… Adul… N6A1           \n10 PAL0708                12 Adelie Penguin… Anvers Torge… Adul… N6A2           \n# ℹ 34 more rows\n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;",
    "crumbs": [
      "R",
      "R for Data Cleaning"
    ]
  },
  {
    "objectID": "01_r/r-tidydata.html#ordering-rows",
    "href": "01_r/r-tidydata.html#ordering-rows",
    "title": "R for Data Cleaning",
    "section": "Ordering rows",
    "text": "Ordering rows\nThe arrange() function allows us to order rows according to values. The default arranges from smallest to largest if numeric, or from A to Z if a character. For example, let’s order based on the Body Mass (g) variable:\n\npenguins_raw |&gt; \n  arrange(`Body Mass (g)`)\n\n# A tibble: 344 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;          \n 1 PAL0809                39 Chinstrap peng… Anvers Dream  Adul… N72A1          \n 2 PAL0809                59 Adelie Penguin… Anvers Biscoe Adul… N25A1          \n 3 PAL0809                65 Adelie Penguin… Anvers Biscoe Adul… N29A1          \n 4 PAL0809                55 Adelie Penguin… Anvers Biscoe Adul… N23A1          \n 5 PAL0809                99 Adelie Penguin… Anvers Dream  Adul… N50A1          \n 6 PAL0910               117 Adelie Penguin… Anvers Torge… Adul… N63A1          \n 7 PAL0708                23 Chinstrap peng… Anvers Dream  Adul… N85A1          \n 8 PAL0910               105 Adelie Penguin… Anvers Biscoe Adul… N51A1          \n 9 PAL0708                48 Adelie Penguin… Anvers Dream  Adul… N29A2          \n10 PAL0708                45 Adelie Penguin… Anvers Dream  Adul… N28A1          \n# ℹ 334 more rows\n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;\n\n\nMaybe we only want penguins from the island of Biscoe. Remember that we can chain operations:\n\npenguins_raw |&gt; \n  filter(Island == \"Biscoe\") |&gt; \n  arrange(`Body Mass (g)`)\n\n# A tibble: 168 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;          \n 1 PAL0809                59 Adelie Penguin… Anvers Biscoe Adul… N25A1          \n 2 PAL0809                65 Adelie Penguin… Anvers Biscoe Adul… N29A1          \n 3 PAL0809                55 Adelie Penguin… Anvers Biscoe Adul… N23A1          \n 4 PAL0910               105 Adelie Penguin… Anvers Biscoe Adul… N51A1          \n 5 PAL0910               103 Adelie Penguin… Anvers Biscoe Adul… N49A1          \n 6 PAL0708                29 Adelie Penguin… Anvers Biscoe Adul… N18A1          \n 7 PAL0809                61 Adelie Penguin… Anvers Biscoe Adul… N27A1          \n 8 PAL0910               109 Adelie Penguin… Anvers Biscoe Adul… N55A1          \n 9 PAL0708                28 Adelie Penguin… Anvers Biscoe Adul… N17A2          \n10 PAL0910               113 Adelie Penguin… Anvers Biscoe Adul… N60A1          \n# ℹ 158 more rows\n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;\n\n\nBy default, arrange() uses increasing order (like sort()). To use decreasing order, add a minus sign:\n\npenguins_raw |&gt; \n  filter(Island == \"Biscoe\") |&gt; \n  arrange(-`Body Mass (g)`)\n\n# A tibble: 168 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;          \n 1 PAL0708                18 Gentoo penguin… Anvers Biscoe Adul… N39A2          \n 2 PAL0708                34 Gentoo penguin… Anvers Biscoe Adul… N56A2          \n 3 PAL0809                78 Gentoo penguin… Anvers Biscoe Adul… N58A2          \n 4 PAL0910               118 Gentoo penguin… Anvers Biscoe Adul… N36A2          \n 5 PAL0809                80 Gentoo penguin… Anvers Biscoe Adul… N60A2          \n 6 PAL0910               112 Gentoo penguin… Anvers Biscoe Adul… N32A2          \n 7 PAL0708                14 Gentoo penguin… Anvers Biscoe Adul… N37A2          \n 8 PAL0708                16 Gentoo penguin… Anvers Biscoe Adul… N38A2          \n 9 PAL0910               116 Gentoo penguin… Anvers Biscoe Adul… N35A2          \n10 PAL0809                68 Gentoo penguin… Anvers Biscoe Adul… N51A2          \n# ℹ 158 more rows\n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;\n\n\nYou can also order rows by more than one variable. What this does is to order by the first variable, and resolve any ties by ordering by the second variable (and so forth if you have more than two ordering variables). For example, let’s first order our data frame by sex, and then within sex order by body mass:\n\npenguins_raw |&gt; \n  filter(Island == \"Biscoe\") |&gt; \n  arrange(Sex, `Body Mass (g)`)\n\n# A tibble: 168 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;          \n 1 PAL0809                59 Adelie Penguin… Anvers Biscoe Adul… N25A1          \n 2 PAL0809                65 Adelie Penguin… Anvers Biscoe Adul… N29A1          \n 3 PAL0809                55 Adelie Penguin… Anvers Biscoe Adul… N23A1          \n 4 PAL0910               105 Adelie Penguin… Anvers Biscoe Adul… N51A1          \n 5 PAL0910               103 Adelie Penguin… Anvers Biscoe Adul… N49A1          \n 6 PAL0708                29 Adelie Penguin… Anvers Biscoe Adul… N18A1          \n 7 PAL0809                61 Adelie Penguin… Anvers Biscoe Adul… N27A1          \n 8 PAL0910               109 Adelie Penguin… Anvers Biscoe Adul… N55A1          \n 9 PAL0708                28 Adelie Penguin… Anvers Biscoe Adul… N17A2          \n10 PAL0910               113 Adelie Penguin… Anvers Biscoe Adul… N60A1          \n# ℹ 158 more rows\n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;\n\n\n\n\n\n\n\n\nExercise\n\n\n\nArrange the data by length_mass_ratio, the ratio of the penguin’s flipper length (in mm) and the penguin’s body mass (in g). (You should have code on how to create this variable from the last exercise). Save this as an object called `penguins_ratio_data\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\npenguins_raw |&gt; \n select(Species, `Body Mass (g)`, matches(\"Length\")) |&gt; # select just for clarity\n    rename(flipper_length = `Flipper Length (mm)`) |&gt;\n  mutate(length_mass_ratio = flipper_length/`Body Mass (g)`) |&gt;\n  arrange(length_mass_ratio)\n\n# A tibble: 344 × 5\n   Species `Body Mass (g)` `Culmen Length (mm)` flipper_length length_mass_ratio\n   &lt;chr&gt;             &lt;dbl&gt;                &lt;dbl&gt;          &lt;dbl&gt;             &lt;dbl&gt;\n 1 Gentoo…            6300                 49.2            221            0.0351\n 2 Gentoo…            5850                 48.4            213            0.0364\n 3 Gentoo…            6000                 51.1            220            0.0367\n 4 Gentoo…            6000                 48.8            222            0.037 \n 5 Gentoo…            5850                 49.3            217            0.0371\n 6 Gentoo…            5950                 45.2            223            0.0375\n 7 Gentoo…            5500                 48.1            209            0.038 \n 8 Gentoo…            6050                 59.6            230            0.0380\n 9 Gentoo…            5650                 47.8            215            0.0381\n10 Gentoo…            5700                 50              218            0.0382\n# ℹ 334 more rows\n\n## Now save it as an object \npenguins_ratio_data &lt;- penguins_raw |&gt; \n select(Species, `Body Mass (g)`, matches(\"Length\")) |&gt; # select just for clarity\n    rename(flipper_length = `Flipper Length (mm)`) |&gt;\n  mutate(length_mass_ratio = flipper_length/`Body Mass (g)`) |&gt;\n  arrange(length_mass_ratio)",
    "crumbs": [
      "R",
      "R for Data Cleaning"
    ]
  },
  {
    "objectID": "01_r/r-tidydata.html#calculating-summary-statistics",
    "href": "01_r/r-tidydata.html#calculating-summary-statistics",
    "title": "R for Data Cleaning",
    "section": "Calculating summary statistics",
    "text": "Calculating summary statistics\ndplyr makes summarizing data a breeze using the summarize() function:\n\npenguins_raw |&gt; \n  summarize(mean_flipper_length = mean(`Flipper Length (mm)`),\n            mean_body_mass = mean(`Body Mass (g)`))\n\n# A tibble: 1 × 2\n  mean_flipper_length mean_body_mass\n                &lt;dbl&gt;          &lt;dbl&gt;\n1                  NA             NA\n\n\n\n\n\n\n\n\nTip\n\n\n\nOh no! If you want to calculate the mean or do another arithmatic operation on a numeric vector and R returns NA values, it likely means that the vector has missing values. Use na.rm = T to drop the NA values in your calculation. We’ll see more of this later in this lesson.\n\n\n\npenguins_raw |&gt; \n  summarize(mean_flipper_length = mean(`Flipper Length (mm)`, na.rm = T),\n            mean_body_mass = mean(`Body Mass (g)`, na.rm = T))\n\n# A tibble: 1 × 2\n  mean_flipper_length mean_body_mass\n                &lt;dbl&gt;          &lt;dbl&gt;\n1                201.          4202.\n\n\nTo make summaries, we can use any function that takes a vector and returns one value. Another example:\n\npenguins_raw |&gt; \n  filter(`Clutch Completion` == \"Yes\") |&gt; # to filter out penguins that did not have an (observed) full nest \n  summarize(max_flipper_length = max(`Flipper Length (mm)`, na.rm = T),\n            min_flipper_length = min(`Flipper Length (mm)`, na.rm = T))\n\n# A tibble: 1 × 2\n  max_flipper_length min_flipper_length\n               &lt;dbl&gt;              &lt;dbl&gt;\n1                231                174\n\n\nGrouped summaries allow us to disaggregate summaries according to other variables (usually categorical):\n\npenguins_raw |&gt; \n  filter(`Clutch Completion` == \"Yes\") |&gt; # to filter out penguins that did not have an (observed) full nest \n  summarize(max_flipper_length = max(`Flipper Length (mm)`, na.rm = T),\n            min_flipper_length = min(`Flipper Length (mm)`, na.rm = T),\n            .by = Sex)  #  to group by sex \n\n# A tibble: 3 × 3\n  Sex    max_flipper_length min_flipper_length\n  &lt;chr&gt;               &lt;dbl&gt;              &lt;dbl&gt;\n1 MALE                  231                178\n2 FEMALE                222                174\n3 &lt;NA&gt;                  217                179\n\npenguins_raw |&gt; \n  filter(`Clutch Completion` == \"Yes\") |&gt; # to filter out penguins that did not have an (observed) full nest \n  summarize(max_flipper_length = max(`Flipper Length (mm)`, na.rm = T),\n            min_flipper_length = min(`Flipper Length (mm)`, na.rm = T),\n            .by = Sex) |&gt;  #  to group by sex \n  filter(is.na(Sex) == F) # to drop the penguins with an unknown sex \n\n# A tibble: 2 × 3\n  Sex    max_flipper_length min_flipper_length\n  &lt;chr&gt;               &lt;dbl&gt;              &lt;dbl&gt;\n1 MALE                  231                178\n2 FEMALE                222                174\n\n\n\n\n\n\n\n\nExercise\n\n\n\nObtain the maximum and minimum flipper length to mass ratio (call them max_ratio and min_ratio, drawing from the length_mass_ratio variable from before) for each penguin species.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\npenguins_raw |&gt; \n select(Species, `Body Mass (g)`, matches(\"Length\")) |&gt; # select just for clarity\n    rename(flipper_length = `Flipper Length (mm)`) |&gt;\n  mutate(length_mass_ratio = flipper_length/`Body Mass (g)`) |&gt;\n  # summarize flipper length to mass ratio by species\n summarize(max_ratio = max(length_mass_ratio, na.rm = T),\n            min_ratio = min(length_mass_ratio, na.rm = T),\n            .by = Species)   #  to group by species \n\n# A tibble: 3 × 3\n  Species                                   max_ratio min_ratio\n  &lt;chr&gt;                                         &lt;dbl&gt;     &lt;dbl&gt;\n1 Adelie Penguin (Pygoscelis adeliae)          0.0660    0.0396\n2 Gentoo penguin (Pygoscelis papua)            0.0527    0.0351\n3 Chinstrap penguin (Pygoscelis antarctica)    0.0711    0.0438",
    "crumbs": [
      "R",
      "R for Data Cleaning"
    ]
  },
  {
    "objectID": "01_r/r-tidydata.html#recoding-variables",
    "href": "01_r/r-tidydata.html#recoding-variables",
    "title": "R for Data Cleaning",
    "section": "Recoding variables",
    "text": "Recoding variables\nTake a look at the Species variable. We can do a simple tabulation with count():\n\npenguins_raw |&gt; \n  count(Species)\n\n# A tibble: 3 × 2\n  Species                                       n\n  &lt;chr&gt;                                     &lt;int&gt;\n1 Adelie Penguin (Pygoscelis adeliae)         152\n2 Chinstrap penguin (Pygoscelis antarctica)    68\n3 Gentoo penguin (Pygoscelis papua)           124\n\n\n\n\n\n\n\n\nTip\n\n\n\nAnother common way to compute quick tabulations in R is with the table() function. Be aware that this takes a vector as the input:\n\ntable(penguins_raw$Species)\n\n\n      Adelie Penguin (Pygoscelis adeliae) \n                                      152 \nChinstrap penguin (Pygoscelis antarctica) \n                                       68 \n        Gentoo penguin (Pygoscelis papua) \n                                      124 \n\n\n\n\nWe might want to recode this variable. For instance, if we are only interested in the Chinstrap penguins, we could create a dummy/binary variable for whether the penguin is a Chinstrap or not. We can do this with if_else(), which works with logical conditions:\n\npenguins_raw |&gt; \n  # the arguments are condition, true (what to do if true), false\n  mutate(chinstrap = if_else(Species == \"Chinstrap penguin (Pygoscelis antarctica)\", 1, 0)) |&gt; \n  count(chinstrap)\n\n# A tibble: 2 × 2\n  chinstrap     n\n      &lt;dbl&gt; &lt;int&gt;\n1         0   276\n2         1    68\n\n\nInstead of a numeric classification (0 and 1), we could use characters:\n\npenguins_raw |&gt; \n  # the arguments are condition, true (what to do if true), false\n  mutate(chinstrap = if_else(Species == \"Chinstrap penguin (Pygoscelis antarctica)\", \"Chinstrap\", \"Other\")) |&gt; \n  count(chinstrap)\n\n# A tibble: 2 × 2\n  chinstrap     n\n  &lt;chr&gt;     &lt;int&gt;\n1 Chinstrap    68\n2 Other       276\n\n\nif_else() is great for binary recoding. But sometimes we want to create more than two categories. We can use case_when(). This time, say we just want to simplify the Species variable to the familiar names of the penguins, not their scientific names:\n\npenguins_raw |&gt; \n  # syntax is condition ~ value\n  mutate(species = case_when(\n    Species == \"Adelie Penguin (Pygoscelis adeliae)\" ~ \"Adelie\",\n    Species == \"Chinstrap penguin (Pygoscelis antarctica)\" ~ \"Chinstrap\", \n    Species == \"Gentoo penguin (Pygoscelis papua)\" ~ \"Gentoo\",\n    .default = \"Other\" # what to do in all other cases\n  )) |&gt; \n  count(species)\n\n# A tibble: 3 × 2\n  species       n\n  &lt;chr&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\n\nSave this as an object called species_table. We will use this later.\n\nspecies_table &lt;- penguins_raw |&gt; \n  # syntax is condition ~ value\n  mutate(species = case_when(\n    Species == \"Adelie Penguin (Pygoscelis adeliae)\" ~ \"Adelie\",\n    Species == \"Chinstrap penguin (Pygoscelis antarctica)\" ~ \"Chinstrap\", \n    Species == \"Gentoo penguin (Pygoscelis papua)\" ~ \"Gentoo\",\n    .default = \"Other\" # what to do in all other cases\n  )) |&gt; \n  count(species)\n\nThe .default = argument in case_when() can also be used to leave the variable as-is for non-specified cases. For example, let’s combine Adelie and Gentoo species:\n\npenguins_raw |&gt; \n  # syntax is condition ~ value\n  mutate(species = case_when(\n    Species %in% c(\"Adelie Penguin (Pygoscelis adeliae)\", \"Gentoo penguin (Pygoscelis papua)\") ~ \"Adelie/Gentoo\",\n    Species == \"Chinstrap penguin (Pygoscelis antarctica)\" ~ \"Chinstrap\",  \n    .default = \"Other\" # what to do in all other cases\n  )) |&gt; \n  count(species)\n\n# A tibble: 2 × 2\n  species           n\n  &lt;chr&gt;         &lt;int&gt;\n1 Adelie/Gentoo   276\n2 Chinstrap        68\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nCreate a dummy variable, large_flipper, for whether the penguin has a flipper that is longer than 210mm. Then compute its mean.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\npenguins_raw |&gt; \n  # the arguments are condition, true (what to do if true), false\n  mutate(large_flipper = if_else(`Flipper Length (mm)` &gt; 210, 1, 0)) |&gt; \n  drop_na(large_flipper) |&gt;\n  summarise(large_flipper_mean = mean(large_flipper))\n\n# A tibble: 1 × 1\n  large_flipper_mean\n               &lt;dbl&gt;\n1              0.292\n\n\n\n\n\n\nSay you want to get more specific and determine whether the flipper is small, medium, or large. Say a small flipper is 180mm or smaller, a medium-sized flipper ranges from 180 - 210mm, and a large flipper is longer than 210mm. Create the variable flipper_size that takes on the values Small, Medium, or Large depending on the length.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\npenguins_raw |&gt; \n  # the arguments are condition, true (what to do if true), false\n  mutate(flipper_size = case_when(`Flipper Length (mm)` &lt;= 180 ~ \"Small\",\n                                   `Flipper Length (mm)` &gt; 180 & `Flipper Length (mm)` &lt; 210 ~ \"Medium\", \n                                   `Flipper Length (mm)` &gt;= 210 ~ \"Large\",\n                                   .default = \"Other\")) |&gt; \n           drop_na(flipper_size) |&gt;\n           count(flipper_size)\n\n# A tibble: 4 × 2\n  flipper_size     n\n  &lt;chr&gt;        &lt;int&gt;\n1 Large          114\n2 Medium         215\n3 Other            2\n4 Small           13",
    "crumbs": [
      "R",
      "R for Data Cleaning"
    ]
  },
  {
    "objectID": "01_r/r-tidydata.html#missing-values",
    "href": "01_r/r-tidydata.html#missing-values",
    "title": "R for Data Cleaning",
    "section": "Missing values",
    "text": "Missing values\nMissing values are commonplace in real datasets. In R, missing values are a special type of value in vectors, denoted as NA.\n\n\n\n\n\n\nWarning\n\n\n\nThe special value NA is different from the character value “NA”. For example, notice that a numeric vector can have NAs, while it obviously cannot hold the character value “NA”:\n\nc(5, 4.6, NA, 8)\n\n[1] 5.0 4.6  NA 8.0\n\n\n\n\nA quick way to check for missing values in small datasets is with the summary() function:\n\nsummary(penguins_raw)\n\n  studyName         Sample Number      Species             Region         \n Length:344         Min.   :  1.00   Length:344         Length:344        \n Class :character   1st Qu.: 29.00   Class :character   Class :character  \n Mode  :character   Median : 58.00   Mode  :character   Mode  :character  \n                    Mean   : 63.15                                        \n                    3rd Qu.: 95.25                                        \n                    Max.   :152.00                                        \n                                                                          \n    Island             Stage           Individual ID      Clutch Completion \n Length:344         Length:344         Length:344         Length:344        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n    Date Egg          Culmen Length (mm) Culmen Depth (mm) Flipper Length (mm)\n Min.   :2007-11-09   Min.   :32.10      Min.   :13.10     Min.   :172.0      \n 1st Qu.:2007-11-28   1st Qu.:39.23      1st Qu.:15.60     1st Qu.:190.0      \n Median :2008-11-09   Median :44.45      Median :17.30     Median :197.0      \n Mean   :2008-11-27   Mean   :43.92      Mean   :17.15     Mean   :200.9      \n 3rd Qu.:2009-11-16   3rd Qu.:48.50      3rd Qu.:18.70     3rd Qu.:213.0      \n Max.   :2009-12-01   Max.   :59.60      Max.   :21.50     Max.   :231.0      \n                      NA's   :2          NA's   :2         NA's   :2          \n Body Mass (g)      Sex            Delta 15 N (o/oo) Delta 13 C (o/oo)\n Min.   :2700   Length:344         Min.   : 7.632    Min.   :-27.02   \n 1st Qu.:3550   Class :character   1st Qu.: 8.300    1st Qu.:-26.32   \n Median :4050   Mode  :character   Median : 8.652    Median :-25.83   \n Mean   :4202                      Mean   : 8.733    Mean   :-25.69   \n 3rd Qu.:4750                      3rd Qu.: 9.172    3rd Qu.:-25.06   \n Max.   :6300                      Max.   :10.025    Max.   :-23.79   \n NA's   :2                         NA's   :14        NA's   :13       \n   Comments        \n Length:344        \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n                   \n\n\nNotice that we have missingness in the Flipper Length (mm) and Body Mass (g) variables, among others. We might want to filter the dataset to see which observations are in this situation:\n\npenguins_raw |&gt; \n  filter(`Body Mass (g)` == NA | `Flipper Length (mm)` == NA)\n\n# A tibble: 0 × 17\n# ℹ 17 variables: studyName &lt;chr&gt;, Sample Number &lt;dbl&gt;, Species &lt;chr&gt;,\n#   Region &lt;chr&gt;, Island &lt;chr&gt;, Stage &lt;chr&gt;, Individual ID &lt;chr&gt;,\n#   Clutch Completion &lt;chr&gt;, Date Egg &lt;date&gt;, Culmen Length (mm) &lt;dbl&gt;,\n#   Culmen Depth (mm) &lt;dbl&gt;, Flipper Length (mm) &lt;dbl&gt;, Body Mass (g) &lt;dbl&gt;,\n#   Sex &lt;chr&gt;, Delta 15 N (o/oo) &lt;dbl&gt;, Delta 13 C (o/oo) &lt;dbl&gt;, Comments &lt;chr&gt;\n\n\nBut the code above doesn’t work! To refer to missing values in logical conditions, we cannot use == NA. Instead, we need to use the is.na() function:\n\npenguins_raw |&gt; \n  filter(is.na(`Body Mass (g)`) | is.na(`Flipper Length (mm)`))\n\n# A tibble: 2 × 17\n  studyName `Sample Number` Species          Region Island Stage `Individual ID`\n  &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;          \n1 PAL0708                 4 Adelie Penguin … Anvers Torge… Adul… N2A2           \n2 PAL0910               120 Gentoo penguin … Anvers Biscoe Adul… N38A2          \n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;\n\n\nAs we saw earlier when trying to calculate the mean, in most R functions, missing values are “contagious.” This means that any missing value will contaminate the operation and carry over to the results. Recall:\n\npenguins_raw |&gt; \n  summarize(mean_flipper_length = mean(`Flipper Length (mm)`))\n\n# A tibble: 1 × 1\n  mean_flipper_length\n                &lt;dbl&gt;\n1                  NA\n\n\nSometimes we’d like to perform our operations even in the presence of missing values, simply excluding them. Most basic R functions have an na.rm = argument to do this:\n\npenguins_raw |&gt; \n  summarize(mean_flipper_length = mean(`Flipper Length (mm)`, na.rm = T))\n\n# A tibble: 1 × 1\n  mean_flipper_length\n                &lt;dbl&gt;\n1                201.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nCalculate the median value of the penguins’ flipper length and body mass for each Island (i.e., perform a grouped summary).\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\npenguins_raw |&gt; \n    summarize(median_flipper_length = median(`Flipper Length (mm)`, na.rm = T),\n              median_body_mass = median(`Body Mass (g)`, na.rm = T),\n              .by = Island)\n\n# A tibble: 3 × 3\n  Island    median_flipper_length median_body_mass\n  &lt;chr&gt;                     &lt;dbl&gt;            &lt;dbl&gt;\n1 Torgersen                   191            3700 \n2 Biscoe                      214            4775 \n3 Dream                       193            3688.",
    "crumbs": [
      "R",
      "R for Data Cleaning"
    ]
  },
  {
    "objectID": "01_r/r-plotting.html",
    "href": "01_r/r-plotting.html",
    "title": "Plotting in R with ggplot2",
    "section": "",
    "text": "While you can make plots with just the packages that come bundled with base R, many R users make their visualizations entirely using the ggplot2 package and an ecosystem of packages designed around it.\n\n# load the ggplot2 package\nlibrary(ggplot2)\n\nAs with the previous sessions, we’ll be using the Palmer penguins dataset. While we built our own combined dataset in the introduction session, now we’re going to use the built-in dataset included in the palmerpenguins package (install this first if you don’t have it yet). First, let’s load the package. By loading the package, it gives us access to the penguins data object that is included (notice that it isn’t shown in our Global Environment, but you can see it in the environment of the palmerpenguins package). Let’s inspect the data using the glimpse() function (we’ll learn more about the dplyr package in the next session).\n\nlibrary(palmerpenguins)\ndplyr::glimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\nAs we discovered before, this dataset includes many different measurements for individual penguins from three different studies. The studies cover both sexes of three different species of penguins from three different islands in the Palmer Archipelago.",
    "crumbs": [
      "R",
      "Plotting in R with ggplot2"
    ]
  },
  {
    "objectID": "01_r/r-plotting.html#other-layers",
    "href": "01_r/r-plotting.html#other-layers",
    "title": "Plotting in R with ggplot2",
    "section": "Other layers",
    "text": "Other layers\nThere are many other types of plots that we can make with ggplot2.\n\nHistograms\nWe can visualize the density of values for a single variable with a histogram:\n\nggplot(penguins) +\n  aes(x = body_mass_g, fill = species) +\n  geom_histogram() +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nHistograms don’t require a y-axis aesthetic by default. The counts are tabulated for you. If you specify a “fill” aesthetic, the default is to stack the bars which can sometimes be a bit misleading. You can also dodge them to fix this:\n\nggplot(penguins) +\n  aes(x = body_mass_g, fill = species) +\n  geom_histogram(position = \"dodge\") +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\n\n\n\n\n\n\n\n\n\n\n\nBoxplots and Violin Plotss\nWe can visualize the density of values for a single variable across a discrete variable with boxplots or violin plots:\n\nggplot(penguins) +\n  aes(x = island, y = bill_length_mm) +\n  geom_boxplot() +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\n\n\n\n\n\n\n\n\nggplot(penguins) +\n  aes(x = island, y = bill_length_mm) +\n  geom_violin(scale = \"width\", draw_quantiles = c(0.25, 0.5, 0.75)) +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGeom options\n\n\n\nNote that many of these “geom”s have lots of options. For example, here we’ve decided to scale all of the violin plots to the same width and to draw the quartiles on them (mimicking the boxplots above). You can see all of the options for a geom by checking out it’s help page (?geom_violin) or on the ggplot website.\n\n\n\n\n2D Contours\nWe can also visualize the density of values across two continuous variables using a 2D contour:\n\nggplot(penguins) +\n  aes(x = bill_length_mm, y = bill_depth_mm) +\n  geom_density_2d(linewidth = 0.25, colour = \"black\") +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\n\n\n\n\n\n\n\nNote that sometimes you may need to expand the axes a little bit to better show the contours:\n\nggplot(penguins) +\n  aes(x = bill_length_mm, y = bill_depth_mm) +\n  geom_density_2d(linewidth = 0.25, colour = \"black\") +\n  scale_y_continuous(limits = c(12.5, NA)) + # NA means \"don't change\"\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\n\n\n\n\n\n\n\n\n\nTime Series\nSince there isn’t really any time series data in the penguins dataset, we’ll take a quick detour and use the built-in economics dataset to explore visualizing a time series. In this case, we are looking at unemployment over time:\n\nggplot(economics, aes(x = date, y = unemploy)) +\n  geom_line() +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\n\n\n\n\n\n\n\ngeom_path() lets you explore how two variables are related over time. For example, unemployment and personal savings rate:\n\nggplot(economics, aes(x = unemploy / pop, y = psavert)) +\n  geom_path(aes(colour = as.numeric(date))) +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMultiple columns for individual aesthetics\n\n\n\nNote how we’ve used multiple columns of the data to define the x-axis here. You can use any sort of mathematical operators to combine multiple columns into a single aesthetic, as long as you are doing row-wise math. For more complex summary statistics, refer back to the tidy data session.",
    "crumbs": [
      "R",
      "Plotting in R with ggplot2"
    ]
  },
  {
    "objectID": "01_r/r-plotting.html#combining-layers",
    "href": "01_r/r-plotting.html#combining-layers",
    "title": "Plotting in R with ggplot2",
    "section": "Combining layers",
    "text": "Combining layers\nWe can also combine multiple layers to show the same data in different ways in the same plot. For example, we could show the raw data for the above contour plot in addition to the contours:\n\nggplot(penguins) +\n  aes(x = bill_length_mm, y = bill_depth_mm) +\n  geom_point() +\n  geom_density_2d_filled(alpha = 0.5) +\n  geom_density_2d(linewidth = 0.25, colour = \"black\") +\n  scale_x_continuous(limits = c(30, 60)) +\n  scale_y_continuous(limits = c(12, 23)) +\n  coord_cartesian(expand = FALSE) + # don't expand the axes so the background is all filled\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLayer order\n\n\n\nWhen combining layers, the layers are added to the plot in order, so in this case the points are the bottom layer and the contour lines are the top layer. We changed the alpha of the middle layer to prevent the points from being blocked. I’ve also used the coord_cartesian() function to remove the default axis expansion. This way the background color reaches both axes and doesn’t have a white gap.",
    "crumbs": [
      "R",
      "Plotting in R with ggplot2"
    ]
  },
  {
    "objectID": "01_r/r-plotting.html#facetting",
    "href": "01_r/r-plotting.html#facetting",
    "title": "Plotting in R with ggplot2",
    "section": "Facetting",
    "text": "Facetting\nLet’s take our scatterplot example from earlier:\n\nggplot(penguins) +\n  aes(x = body_mass_g, y = flipper_length_mm,\n      color = island, shape = sex) +\n  geom_point() +\n  scale_color_brewer(palette = \"Set1\") +\n  scale_shape_discrete(na.translate = FALSE) +\n  scale_x_continuous(name = \"Body Mass (grams)\") +\n  scale_y_continuous(name = \"Flipper Length (millimeters)\") +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\n\n\n\n\n\n\n\nNow, what if we wanted to also split the data by the species of the penguins? We’re already using color and shape, so what other aesthetic could we use? We could possible use some shapes that have both a fill and outline color, but that sounds messy. Instead of using another aesthetic, we could also use a facet. This splits the chart into multiple panels:\n\nggplot(penguins) +\n  aes(x = body_mass_g, y = flipper_length_mm,\n      color = island, shape = sex) +\n  geom_point() +\n  scale_color_brewer(palette = \"Set1\") +\n  scale_shape_discrete(na.translate = FALSE) +\n  scale_x_continuous(name = \"Body Mass (grams)\") +\n  scale_y_continuous(name = \"Flipper Length (millimeters)\") +\n  facet_wrap(vars(species), ncol = 1) +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\n\n\n\n\n\n\n\nWe can get even crazier by faceting by multiple variables:\n\nggplot(penguins) +\n  aes(x = body_mass_g, y = flipper_length_mm,\n      color = island, shape = sex) +\n  geom_point() +\n  scale_color_brewer(palette = \"Set1\") +\n  scale_shape_discrete(na.translate = FALSE) +\n  scale_x_continuous(name = \"Body Mass (grams)\") +\n  scale_y_continuous(name = \"Flipper Length (millimeters)\") +\n  facet_grid(rows = vars(species), cols = vars(year)) +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n\n\n\n\n\n\n\n\nOK, maybe we’ve gone a little too far here, but you get the picture!",
    "crumbs": [
      "R",
      "Plotting in R with ggplot2"
    ]
  },
  {
    "objectID": "01_r/index.html",
    "href": "01_r/index.html",
    "title": "R",
    "section": "",
    "text": "This R tutorial is broken down into three parts:\n\nR Basics – Covers the basics of R, including data types, functions, and basic operations.\nData Manipulation – Introduces data manipulation and cleaning using the dplyr and tidyr packages, including filtering, selecting, and summarizing data.\nData Visualization – Covers data visualization using the ggplot2 package, including creating basic plots and customizing them.",
    "crumbs": [
      "R"
    ]
  },
  {
    "objectID": "03_github/exercise3.html",
    "href": "03_github/exercise3.html",
    "title": "Exercise 3: Collaborating in GitHub using the Fork and Pull Model",
    "section": "",
    "text": "In this exercise you will learn how to collaborate with others using GitHub. You will work with a partner to contribute to the test repository they created on GitHub in Exercise 2 (and they will do the same with your repository!).\n\nFind a partner to work with. Get the web address of the test repository they created in Exercise 2. This is the URL of their repository website (not the ssh URL that they used to clone their repository). The URL should be something like https://github.com/THEIR_USERNAME/THEIR_REPO_NAME where THEIR_USERNAME is your partner’s GitHub username and THEIR_REPO_NAME is the name of the repository they created in Exercise 2. Again, you are going to the website for your partner’s repository, not your own.\nClick the Fork button in the upper right of their website. This will open the “Create a new fork” page.\nOn the “Create a new fork” page:\n\nUnder “Owner” select your username.\nLeave the repository name the same. The Owner / respository name should look like YOUR_USERNAME / THEIR_REPO_NAME.\n\nNow click the green Create fork button in the lower right. This will create a “fork” of your partner’s repository under your own GitHub account. You will be redirected to your fork. Note the URL at the top of the webpage: it should be something like https://github.com/YOUR_USERNAME/THEIR_REPO_NAME.\n\n\n\n\n\n\n\nAbout forks\n\n\n\nA fork is a copy of another user’s GitHub repository. When you create the fork, you create copy of the repository under your GitHub account. The copy of the repository has the entire commit history of the repository up until that point. It is, for all intents and purposes, an exact replica of the original repository, except that the copy is now under your account.\nFrom this point on, your fork is independent of the original. Since it is under your account, you are free to make any changes that you like to — add commits or branches, delete things, etc. — without affecting the original repository. Changes to the original repository also won’t affect your fork unless you actively sync it by using git fetch (more on that below).\nYou can create a fork of any public repository on GitHub!\nThe advantage of using forks is it allows you to develop things without breaking the original repository while you do. This is incredibly useful if you want to contribute to another project that is widely used: you create a fork of that project under your own GitHub account; clone your fork to your local computer; develop your fork by pushing/pulling between your local computer and GitHub. Then, when you are content that your new addition is ready, you fill out a pull request to merge the changes in your fork into the original repository (usually on its main branch). The original repo’s owner(s) can then review your changes, and, if they accept them, merge it into their repository for widespread adoption. This is known as the fork and pull model.\nThe diagram below illustrates the relationship between a fork (on GitHub) and a clone: \n\n\n\nYou want to contribute a new development to your partner’s repository. To do so, first clone your fork of their repository to your local computer:\n\nIf you are not already there, go to your fork’s website on GitHub. The web address should be something like https://github.com/YOUR_USERNAME/THEIR_REPO_NAME.\nOn your fork’s website, click the green &lt;&gt; Code button, then copy the SSH URL. It should be something like git@github.com:YOUR_USERNAME/THEIR_REPO_NAME.git\nGo to your terminal, cd to the directory you want to store your fork, and type:\n\ngit clone SSH_URL\nwhere SSH_URL is the SSH URL you copied.\ncd into the repository you just cloned and type\n\ngit remote -v\nto see the origin URL. Note that the origin for this repository is your fork on GitHub, not your partner’s repository.\n\nNow let’s create a branch called dev2 to add a new feature to the mymath.R file. Create the branch on your local computer by typing:\n\ngit checkout -b dev2\nThis will create and switch to a new branch called dev2. You can verify you’re on the new branch by typing git branch.\n\nUse your favorite text editor to open mymath.R and add the following lines to it:\n\n\nmultiply &lt;- function(a, b) {\n    return (a*b)\n    }\nSave the changes.\n\nCommit your changes by running:\n\ngit add -u\ngit commit -m \"add multiplication function to mymath file\"\n\nThis commit (and the dev2 branch) currently only exists on your local copy of your fork. Push the branch to your fork on GitHub by running:\n\ngit push -u origin dev2\nNote that we had to provide the -u origin dev2 arguments to git push. This is because the dev2 branch does not currently exist on our fork in GitHub. Adding the extra arguments tells git to create a dev2 branch on your fork on GitHub and push the new changes there.\n\nLook at your web browser. As soon as you pushed your changes, you should see a box pop up on your fork’s website on GitHub asking if you would like to file a pull request.\nClick the green Compare & pull request button. This will open up the “Comparing changes” page. Note that in the gray box at the top of the web page the “base” repository is your partner’s* original repository and the base branch is their main branch. This means that you will create a Pull Request on your partner’s repository, and that it will be for merging your changes onto their main branch. You want that!\nFill out the description box if you like and/or change the the “Add a title” box. Then click the green Create pull request button at the bottom.\nAfter you click Create pull request, your partner will see a Pull Request pop up on the GitHub website for their repository. Have them click on the the “Pull Requests” tab at the very top of their website, then click on the pull request.\nYour partner can review your pull request on their GitHub website. If they are satisfied with it, have them click the green button at the bottom of the page, then Confirm, to merge the pull request.\n\nCongratulations! You and your partner have now collaborated on a new feature.\n\nOnce your partner merges the changes, their main branch will update with your new commit. The main branch of your fork will now be out of sync with theirs. To sync it, go to to your GitHub website for your fork (the one with URL https://github.com/YOUR_USERNAME/THEIR_REPO_NAME). You should see a gray dialog box at the top that starts with “This branch is 1 commit behind …”. Click the Sync fork button, then the green Update branch button. This will update your fork’s main branch to be the same as your partner’s.\nUpdate your local copy of your fork. Go to your terminal and, in the repository directory, switch back to the main branch:\n\ngit checkout main\nNow update your main branch by typing:\ngit pull\nThis will update your main to be the same the one on GitHub, which is also the same as your partner’s main branch.\n\nNow that your changes have been merged on to your partner’s main branch and you’ve synced your fork both on GitHub and your computer, you’re free to delete your development branch on your computer. To do so run:\n\ngit branch -d dev2",
    "crumbs": [
      "<code>git</code> and GitHub",
      "Exercise 3: Collaborating in GitHub using the Fork and Pull Model"
    ]
  },
  {
    "objectID": "03_github/exercise2.html",
    "href": "03_github/exercise2.html",
    "title": "Exercise 2: Using git pull and push with GitHub",
    "section": "",
    "text": "Exercise 1 illustrated how to create a new git repository on your local computer. In this exercise we’ll create a new repository on GitHub, clone it to our local computer, make changes, then push it back to GitHub. This is the more common way to create git repositories on GitHub.\n\n\n\n\n\n\nssh key setup\n\n\n\nIn order to do this exercise you will need an ssh key uploaded to GitHub. If you have not done that yet, follow the ssh setup instructions before starting this exercise.\n\n\n\nGo to https://github.com and sign in if you are not already. Then go to https://github.com/new to create a new repository.\nIn the Owner section, click the drop down “Choose an owner” and select yourself.\nYou’ll need to put a name in the “Repository name” field. GitHub will offer a suggestion (where it says “Need inspiration? How about …”). Use the suggested name. That should ensure that the repostiory name is unique, which will make doing Exercise 3 easier.\nUnder “Description” put “My test git repository.”\nMake sure “Public” is selected.\nCheck the box for “Add a README file”. This will cause your repo to be initialized with a README.md file in it. It isn’t strictly necessary, but is good to have, as it’s what GitHub will show by default when people go to your repository.\nUnder “Choose a license” select “GNU General Public License v3.0”. This will cause your repository to be initialized with a LICENSE file that has the GNU Public License v3.0 in it (an open source license). Choosing a license isn’t strictly necessary, but it’s good practice.\nNow click the “Create repository” green button. This will create your repository. You will have the repository webpage open.\nWe want to add things to your repository. You can do that through the web interface, but it’s easier to do it on your local computer, esepcially for code development so that you can test things. To do that we’ll need a local copy of your repository. This is what git clone does: it downloads a local copy of your remote repository (which lives on GitHub) that can track the remote repository.\n\nTo clone the repository, click the Green &lt;&gt; Code button in the upper right, then select the “SSH” tab. We’ll want the SSH version so that we can push changes later.\n\nCopy the URL in the SSH tab. Now open a terminal (you may want to open the terminal side-by-side with your web browser; it’ll make doing the rest of this exercise easier). cd to the directory that you want your local copy of the repository to live, then type:\n\ngit clone SSH_URL\nwhere SSH_URL is the URL you copied from GitHub.\n\nWhen git clone finishes, you will have a new directory that has the same name as your repo on your computer. cd into that and type ls. You should see the README.md file and the LICENSE file.\nThis is your local copy of your repository. It’s setup to track your repo on GitHub, which is called the origin repository. You can verify that by typing:\n\ngit remote -v\nThat will show you the URL of the origin. Note that this is printed twice: once for fetching (i.e., the default repo you will pull new updates from) and one for pushing (i.e., the repo to which you will push changes from your local computer).\n\nNow let’s add a file. In your terminal, use your favorite text editor to create a file called mymath.R and put the following in it:\n\n!#/usr/bin/env R\n\n# Some math functions\n\nadd &lt;- function(a, b) {\n    return (a + b)\n    }\nThis is a simple R program that contains a function to add two numbers.\n\nAdd and commit your file to your repo:\n\ngit add mymath.R\ngit commit -m \"add mymath file\"\nCheck your history to see the commit by typing git log.\n\nNow look at your copy of the repository on GitHub in your web browser. Is mymath.R there? No. Try refreshing the page. Is it there? Still no. This is because you have only commited the file to your local copy of the repository. The origin repository on GitHub doesn’t know about these changes. To get the changes on to your origin repository, type:\n\ngit push\nGo back to your web browser and refresh your repository page. You should now see the mymath.R file there. You can click on it to view it if you like. You can also see your commit history on GitHub (click the icon that looks like a clock just below the green &lt;&gt; Code button on the front page of your repository). Notice that the history on GitHub is the same as your history on your local computer. Your repos are in sync!\n\nLet’s create a branch to do some development work. We could do this on our local computer, but let’s do it on GitHub instead. Click the drop down button that says “main” in the upper left corner of the website. Then click “View all branches”. This will bring you to another page that shows you all your branches. Currently we only have one, main. Create a new branch by clicking the green New branch button in the upper right. In the “New branch name” field type dev1 then click Create new branch. This will create the new branch.\nNow let’s make some changes on the dev1 branch on our local computer. To do that, we’ll need to update our local repo to pickup the new branch. Go to your terminal and type:\n\ngit fetch\nYou’ll see a message telling you about the new branch origin/dev1. You still don’t have this branch on your local repo! If you type git branch, you’ll only see * main. The fetch command just informed your local repo about the existence of the dev1 branch on GitHub. You can verify this by typing git branch -r to see the remote branches.\n\nLet’s checkout a local copy of the dev1 branch. Type:\n\ngit checkout -b dev1 origin/dev1\nAdding the extra origin/dev1 instructs git to make your local dev1 track the remote one. This means that when we git push from this branch it will by default push changes to the dev1 branch on GitHub, not the main branch. You can verify which branch you will push to by typing:\ngit branch -vv\n\nLet’s modify mymath.R on dev1. On your local computer, use your favorite text editor to open mymath.R and add the following to it:\n\n\nsubtract &lt;- function(a, b) {\n    return (a - b)\n    }\nCommit your changes to your local repo:\ngit add -u\ngit commit -m \"add subtraction\"\n\nAgain, your changes to your local dev1 are not on GitHub yet. To do that, push the changes by typing:\n\ngit push\nNote that when you did this, it pushed to the dev1 branch on git hub (you’ll see a message like dev1 -&gt; dev1).\n\nNow look at your web browser. As soon as you typed git push a message popped up that said “dev1 had recent pushes” with a green Compare and pull request button popping up. Click that button. This will open a “pull request” page. The pull request page will automatically have a title that is the message from your last commit. You can optionally add a longer description. Then click the Create pull request button.\nThis will open “Pull request”. Pull requests are GitHub’s way of managing new development. This is particularly useful for collaborating with others on a project. You can use the pull request page to discuss changes before they are merged on to the main branch. You can alos have multiple pull requests open at once.\nLet’s merge your pull request. There’s a green Merge pull request button at the bottom of the page. Click it, then “Confirm merge”. This will merge your changes on dev1 on to main. You now have the option to delete dev1. Feel free to click the delete dev1 branch button.\nNow that your main branch on GitHub has the merged changes, your main branch on your local copy is out of sync. To update it, go to your terminal and switch to your main branch:\n\ngit checkout main\nYou can now bring it up to date with your remote repository by running git pull:\ngit pull\nOnce that’s done, you can also delete your local copy of the dev1 branch by typing:\ngit branch -d dev1",
    "crumbs": [
      "<code>git</code> and GitHub",
      "Exercise 2: Using `git pull` and `push` with GitHub"
    ]
  },
  {
    "objectID": "03_github/index.html",
    "href": "03_github/index.html",
    "title": "git and GitHub",
    "section": "",
    "text": "Objectives\n\n\n\n\n\nLearn how to use git with command-line instructions.\nLearn how to do version control with git.\nUnderstand the differences between git and GitHub.\nUse GitHub to collaborate with others on a project.",
    "crumbs": [
      "<code>git</code> and GitHub"
    ]
  },
  {
    "objectID": "03_github/index.html#prerequisites",
    "href": "03_github/index.html#prerequisites",
    "title": "git and GitHub",
    "section": "Prerequisites",
    "text": "Prerequisites\nThe following should be done before doing the exercises below.\n\n1. Install GitHub Desktop\nFor this tutorial we will be using GitHub Desktop. To install:\n\nGo to https://github.com/apps/desktop.\nClick the “Download now” button.\nWhat you do next depends on your operating system:\n\n\nIf you’re on a Mac:\n\nClick “Download for Apple silicon” or “Download for Intel chip” depending on your processor. If you’re not sure what processor you have, click the apple button in your Menu bar then “About This Mac”. Look at the “Chip” entry in the window that pops up. If it says, “Apple M…” you have Apple silicon. If it says, “Intel …” you have an Intel chip.\nClicking one of the download buttons will download a .zip file that starts with “GitHubDesktop”. Once it’s finished downloading, open it. The file will unzip and open a Finder window.\nMove the GitHub Desktop icon into your Applications folder in Finder.\nOpen GitHub Desktop as you would any other application (e.g., by going to Launchpad and clicking on the GitHub Desktop icon).\nThe first time you open GitHub Desktop you will be prompted with a warning, “‘GitHub Desktop’ is an app downloaded from the internet. Are you sure you want to open it?” Click “Open”.\n\nIf you’re on a Windows machine:\n\nClick “Download for Windows (64 bit)”. This will download a file called “GitHubDesktopSetup-x64.exe”.\nOnce the file downloads, it will automatically install and open GitHub Desktop.\n\n\n\n\n2. Setup GitHub Desktop\nThe first time you open GitHub Desktop you will need to sign into GitHub.\n\nClick “Sign in to GitHub.com”. If you do not have an account yet, click “Create your free account”.\nFollow the on-screen instructions to sign in.\nAfter you sign in, GitHub Desktop will ask you to “Configure Git”. We recommend you select the option “Use my GitHub account name and email address”. Click “Finish”.\n\nYou will next be prompted with a “Let’s get started!” screen that will ask you to add a repository to GitHub Desktop. Stop here and go to Exercise1.",
    "crumbs": [
      "<code>git</code> and GitHub"
    ]
  },
  {
    "objectID": "03_github/index.html#exercises",
    "href": "03_github/index.html#exercises",
    "title": "git and GitHub",
    "section": "Exercises",
    "text": "Exercises\n\nExercise1: Practice with git on a local repository\nExercise2: git and GitHub\nExercise3: Collaborating in GitHub using the Fork and Pull Model",
    "crumbs": [
      "<code>git</code> and GitHub"
    ]
  },
  {
    "objectID": "02_python/python-apps/visualization_with_matplotlib.html",
    "href": "02_python/python-apps/visualization_with_matplotlib.html",
    "title": "Data Visualization with Matplotlib",
    "section": "",
    "text": "In this module we will learn how to visualize data using Matplotlib, a powerful plotting library in Python. We will cover various types of plots including line charts, bar charts, histograms, scatter plots, pie charts, and box plots.\nimport pandas as pd\nimport numpy as np\ndf = pd.read_csv('diabetes.csv')\nimport matplotlib.pyplot as plt",
    "crumbs": [
      "Python",
      "Advanced Applications",
      "Data Visualization with Matplotlib"
    ]
  },
  {
    "objectID": "02_python/python-apps/visualization_with_matplotlib.html#line-chart",
    "href": "02_python/python-apps/visualization_with_matplotlib.html#line-chart",
    "title": "Data Visualization with Matplotlib",
    "section": "Line Chart",
    "text": "Line Chart\n\n#Parameter: x, y Coordinates for data points\nage = [3, 6, 9, 12, 15, 18, 21, 24]\nMike = [95, 120, 141, 159, 174, 185, 187, 187]\nGeorge = [99, 126, 145, 163, 179, 191, 191, 191]\n\nplt.plot(age, Mike, color='blue', linewidth=3, marker='o', markersize=8, linestyle='--')\n\nplt.plot(age, George, color='red', linewidth=3, marker='o', markersize=8, linestyle='--')\n\nplt.title(\"Line Chart\")\nplt.ylabel('Height (cm)')\nplt.xlabel('Age (years)')\nplt.legend(labels=('Mike', 'George'))\nplt.show()",
    "crumbs": [
      "Python",
      "Advanced Applications",
      "Data Visualization with Matplotlib"
    ]
  },
  {
    "objectID": "02_python/python-apps/visualization_with_matplotlib.html#bar-chart",
    "href": "02_python/python-apps/visualization_with_matplotlib.html#bar-chart",
    "title": "Data Visualization with Matplotlib",
    "section": "Bar Chart",
    "text": "Bar Chart\n\n# This code creates a simple bar chart to show total bills for different days.\n# X-axis represents the days and Y-axis shows total bill amount.\nx = ['Thur', 'Fri', 'Sat', 'Sun']\ny = [170, 120, 250, 190]\n\nplt.bar(x, y, color='green', edgecolor='black', linewidth=2)\nplt.title(\"Bar Chart\")\nplt.xlabel(\"Day\")\nplt.ylabel(\"Total Bill\")\nplt.show()",
    "crumbs": [
      "Python",
      "Advanced Applications",
      "Data Visualization with Matplotlib"
    ]
  },
  {
    "objectID": "02_python/python-apps/visualization_with_matplotlib.html#histogram",
    "href": "02_python/python-apps/visualization_with_matplotlib.html#histogram",
    "title": "Data Visualization with Matplotlib",
    "section": "Histogram",
    "text": "Histogram\n\npregnancies = df['Pregnancies']\n\nplt.hist(pregnancies, bins=10, color='steelblue', edgecolor='black',linestyle='--')\nplt.title(\"Histogram\")\nplt.xlabel(\"Number of Pregnancy\")\nplt.ylabel(\"Frequency\")\nplt.show()",
    "crumbs": [
      "Python",
      "Advanced Applications",
      "Data Visualization with Matplotlib"
    ]
  },
  {
    "objectID": "02_python/python-apps/visualization_with_matplotlib.html#scatter-plot",
    "href": "02_python/python-apps/visualization_with_matplotlib.html#scatter-plot",
    "title": "Data Visualization with Matplotlib",
    "section": "Scatter Plot",
    "text": "Scatter Plot\n\nBMI = df['BMI']\nBloodPressure = df['BloodPressure']\n\nplt.scatter(BMI, BloodPressure, s = 15)\nplt.title(\"Scatter Plot\")\nplt.xlabel(\"BMI\")\nplt.ylabel(\"Blood Pressure\")\n\nb, a = np.polyfit(BMI, BloodPressure, 1)\n\nplt.plot(BMI, b*BMI + a, color='red', linewidth=2)\nplt.show()",
    "crumbs": [
      "Python",
      "Advanced Applications",
      "Data Visualization with Matplotlib"
    ]
  },
  {
    "objectID": "02_python/python-apps/visualization_with_matplotlib.html#pie-chart",
    "href": "02_python/python-apps/visualization_with_matplotlib.html#pie-chart",
    "title": "Data Visualization with Matplotlib",
    "section": "Pie Chart",
    "text": "Pie Chart\n\n# This code creates a simple pie chart to visualize distribution of different car brands.\n# Each slice of pie represents the proportion of cars for each brand in the dataset.\ncars = ['AUDI', 'BMW', 'FORD','TESLA', 'JAGUAR',]\ndata = [23, 10, 35, 15, 12]\nexplode = [0.1, 0.5, 0, 0, 0]\ncolors = ( \"orange\", \"cyan\", \"yellow\",\"grey\", \"green\")\n\nplt.pie(data, labels=cars, explode=explode, colors=colors, autopct='%d%%', shadow = True)\n#plt.title(\"Pie Chart\")\nplt.show()",
    "crumbs": [
      "Python",
      "Advanced Applications",
      "Data Visualization with Matplotlib"
    ]
  },
  {
    "objectID": "02_python/python-apps/visualization_with_matplotlib.html#box-plot",
    "href": "02_python/python-apps/visualization_with_matplotlib.html#box-plot",
    "title": "Data Visualization with Matplotlib",
    "section": "Box Plot",
    "text": "Box Plot\n\nPregnancies = df['Pregnancies']\nGlucose = df['Glucose']\nBloodPressure = df['BloodPressure']\nSkinThickness = df['SkinThickness']\nAge = df['Age']\n\ndata = Pregnancies\n\nplt.boxplot(data)\nplt.xlabel(\"Groups\")\nplt.ylabel(\"Values\")\nplt.title(\"Box Plot\")\nplt.show()",
    "crumbs": [
      "Python",
      "Advanced Applications",
      "Data Visualization with Matplotlib"
    ]
  },
  {
    "objectID": "02_python/python-apps/decisionTree_sklearn.html",
    "href": "02_python/python-apps/decisionTree_sklearn.html",
    "title": "Decision Trees with Scikit-learn",
    "section": "",
    "text": "In this module we will learn how to use the Decision Tree Classifier from the Scikit-learn library to classify diabetes data. We will use a dataset that contains various health measurements and whether or not the individual has diabetes.\nimport pandas as pd\nimport numpy as np\ndf = pd.read_csv('diabetes.csv')\ndf.head()\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nOutcome\n\n\n\n\n0\n6\n148\n72\n35\n0\n33.6\n0.627\n50\n1\n\n\n1\n1\n85\n66\n29\n0\n26.6\n0.351\n31\n0\n\n\n2\n8\n183\n64\n0\n0\n23.3\n0.672\n32\n1\n\n\n3\n1\n89\n66\n23\n94\n28.1\n0.167\n21\n0\n\n\n4\n0\n137\n40\n35\n168\n43.1\n2.288\n33\n1",
    "crumbs": [
      "Python",
      "Advanced Applications",
      "Decision Trees with Scikit-learn"
    ]
  },
  {
    "objectID": "02_python/python-apps/decisionTree_sklearn.html#build-a-decision-tree-classifier",
    "href": "02_python/python-apps/decisionTree_sklearn.html#build-a-decision-tree-classifier",
    "title": "Decision Trees with Scikit-learn",
    "section": "Build a Decision Tree Classifier",
    "text": "Build a Decision Tree Classifier\n\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier\nfrom sklearn.model_selection import train_test_split # Import train_test_split function\nfrom sklearn import metrics #Import scikit-learn metrics module for accuracy calculation\n\nfeatures = ['Glucose', 'BloodPressure', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age']\n\nx = df[features]\ny = df['Outcome']\n\n# Split dataset into training set and test set\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1) # 70% training and 30% test\n\n# Create Decision Tree classifer object\nclf = DecisionTreeClassifier(max_depth=3)\n\n# Train Decision Tree Classifer\nclf = clf.fit(x_train,y_train)\n\n#Predict the response for test dataset\ny_pred = clf.predict(x_test)\n\n# Model Accuracy, how often is the classifier correct?\nAccuracy = metrics.accuracy_score(y_test, y_pred)\nprint(\"Accuracy:\", Accuracy)\n\nAccuracy: 0.7575757575757576\n\n\n\nprint(y_pred)\n\n[0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0\n 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 1 1 1 0 0\n 1 0 1 1 0 1 1 0 0 0 0 1 0 0 1 0 0 0 0 0 1 1 0 0 1 0 0 0 1 1 0 0 1 1 0 0 0\n 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 1 0 0 1 1 0 0 0\n 0 0 0 1 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 1 1 1 1 0 0 1 0 0 0 0 0 0 1 0 1 0\n 0 0 1 1 0 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0\n 0 1 0 0 0 0 0 1 0]",
    "crumbs": [
      "Python",
      "Advanced Applications",
      "Decision Trees with Scikit-learn"
    ]
  },
  {
    "objectID": "02_python/python-apps/decisionTree_sklearn.html#visualizing-the-decision-tree",
    "href": "02_python/python-apps/decisionTree_sklearn.html#visualizing-the-decision-tree",
    "title": "Decision Trees with Scikit-learn",
    "section": "Visualizing the Decision Tree",
    "text": "Visualizing the Decision Tree\n\ntree.plot_tree(clf, feature_names=features)\n\n[Text(0.5, 0.875, 'Glucose &lt;= 129.5\\ngini = 0.449\\nsamples = 537\\nvalue = [354, 183]'),\n Text(0.25, 0.625, 'BMI &lt;= 26.3\\ngini = 0.329\\nsamples = 357\\nvalue = [283, 74]'),\n Text(0.375, 0.75, 'True  '),\n Text(0.125, 0.375, 'BMI &lt;= 9.1\\ngini = 0.06\\nsamples = 97\\nvalue = [94, 3]'),\n Text(0.0625, 0.125, 'gini = 0.444\\nsamples = 6\\nvalue = [4, 2]'),\n Text(0.1875, 0.125, 'gini = 0.022\\nsamples = 91\\nvalue = [90, 1]'),\n Text(0.375, 0.375, 'Age &lt;= 27.5\\ngini = 0.397\\nsamples = 260\\nvalue = [189, 71]'),\n Text(0.3125, 0.125, 'gini = 0.243\\nsamples = 120\\nvalue = [103, 17]'),\n Text(0.4375, 0.125, 'gini = 0.474\\nsamples = 140\\nvalue = [86, 54]'),\n Text(0.75, 0.625, 'BMI &lt;= 27.85\\ngini = 0.478\\nsamples = 180\\nvalue = [71.0, 109.0]'),\n Text(0.625, 0.75, '  False'),\n Text(0.625, 0.375, 'Glucose &lt;= 145.5\\ngini = 0.375\\nsamples = 36\\nvalue = [27, 9]'),\n Text(0.5625, 0.125, 'gini = 0.1\\nsamples = 19\\nvalue = [18, 1]'),\n Text(0.6875, 0.125, 'gini = 0.498\\nsamples = 17\\nvalue = [9, 8]'),\n Text(0.875, 0.375, 'Glucose &lt;= 158.5\\ngini = 0.424\\nsamples = 144\\nvalue = [44, 100]'),\n Text(0.8125, 0.125, 'gini = 0.487\\nsamples = 88\\nvalue = [37, 51]'),\n Text(0.9375, 0.125, 'gini = 0.219\\nsamples = 56\\nvalue = [7, 49]')]",
    "crumbs": [
      "Python",
      "Advanced Applications",
      "Decision Trees with Scikit-learn"
    ]
  },
  {
    "objectID": "02_python/python-intro/02-Intro-to-Python-operations.html",
    "href": "02_python/python-intro/02-Intro-to-Python-operations.html",
    "title": "Operations in Python",
    "section": "",
    "text": "This section introduces arithmetic operations, string manipulations, and type conversions in Python.",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "Operations in Python"
    ]
  },
  {
    "objectID": "02_python/python-intro/02-Intro-to-Python-operations.html#arithmetic-operations",
    "href": "02_python/python-intro/02-Intro-to-Python-operations.html#arithmetic-operations",
    "title": "Operations in Python",
    "section": "Arithmetic Operations",
    "text": "Arithmetic Operations\n\n\n\nOperation\nSymbol\nExample\nResult\n\n\n\n\nAddition\n+\n5 + 3\n8\n\n\nSubtraction\n-\n5 - 2\n3\n\n\nMultiplication\n*\n4 * 2\n8\n\n\nDivision\n/\n10 / 3\n3.333\n\n\nFloor Division\n//\n10 // 3\n3\n\n\nModulus\n%\n10 % 3\n1\n\n\nExponentiation\n**\n2 ** 3\n8\n\n\n\n\na = 10\nb = 3\n\nprint(\"Addition:\", a + b)\nprint(\"Subtraction:\", a - b)\nprint(\"Multiplication:\", a * b)\nprint(\"Division:\", a / b)\nprint(\"Floor Division:\", a // b)\nprint(\"Modulus:\", a % b)\nprint(\"Exponentiation:\", a ** b)\n\nAddition: 13\nSubtraction: 7\nMultiplication: 30\nDivision: 3.3333333333333335\nFloor Division: 3\nModulus: 1\nExponentiation: 1000\n\n\n\nExercise: BMI Calculator\nGiven a weight in kilograms and a height in meters, calculate Body Mass Index (BMI):\nFormula: BMI = weight / (height ** 2)\n\nweight = 70\nheight = 1.75\nbmi = weight / (height ** 2)\nprint(f\"Your BMI is: {bmi}\")\n\nYour BMI is: 22.857142857142858",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "Operations in Python"
    ]
  },
  {
    "objectID": "02_python/python-intro/02-Intro-to-Python-operations.html#string-operations",
    "href": "02_python/python-intro/02-Intro-to-Python-operations.html#string-operations",
    "title": "Operations in Python",
    "section": "String Operations",
    "text": "String Operations\nUse + to concatenate strings, and * to repeat them.\n\nfirst_name = \"Alice\"\nlast_name = \"Smith\"\n\nfull_name = first_name + \" \" + last_name\nprint(full_name)\n\nprint(\"Hi! \" * 3)\n\nAlice Smith\nHi! Hi! Hi!",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "Operations in Python"
    ]
  },
  {
    "objectID": "02_python/python-intro/02-Intro-to-Python-operations.html#type-conversion",
    "href": "02_python/python-intro/02-Intro-to-Python-operations.html#type-conversion",
    "title": "Operations in Python",
    "section": "Type Conversion",
    "text": "Type Conversion\nConvert between types using int(), float(), and str().\n\nage = 25\nheight = 1.75\n\nprint(\"I am \" + str(age) + \" years old.\")\nprint(f\"My height is {height} meters.\")\n\nI am 25 years old.\nMy height is 1.75 meters.",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "Operations in Python"
    ]
  },
  {
    "objectID": "02_python/python-intro/02-Intro-to-Python-operations.html#summary",
    "href": "02_python/python-intro/02-Intro-to-Python-operations.html#summary",
    "title": "Operations in Python",
    "section": "Summary",
    "text": "Summary\n\nArithmetic operations: +, -, *, /, //, %, **\nString operations: concatenation and repetition\nType conversion: int(), float(), str()\nUse f-strings for clean and readable output",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "Operations in Python"
    ]
  },
  {
    "objectID": "02_python/python-intro/05-Intro-to-Python-lists.html",
    "href": "02_python/python-intro/05-Intro-to-Python-lists.html",
    "title": "Lists",
    "section": "",
    "text": "A list is an ordered, mutable collection that can store multiple items. Lists are one of the most useful and flexible data types in Python.",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "Lists"
    ]
  },
  {
    "objectID": "02_python/python-intro/05-Intro-to-Python-lists.html#working-with-nested-lists-matrices",
    "href": "02_python/python-intro/05-Intro-to-Python-lists.html#working-with-nested-lists-matrices",
    "title": "Lists",
    "section": "Working with Nested Lists (Matrices)",
    "text": "Working with Nested Lists (Matrices)\nThis notebook demonstrates how to access elements in a nested list (list of lists), like a matrix or table.\n\nExample: A 3x2 Matrix\n\nmatrix = [\n    [1, 2],    # row 0\n    [3, 4],    # row 1\n    [5, 6]     # row 2\n]\n\nprint(matrix)\n\n[[1, 2], [3, 4], [5, 6]]\n\n\n\n\nAccessing Specific Elements\n\nprint(matrix[0][0])  # 1 (row 0, column 0)\nprint(matrix[0][1])  # 2 (row 0, column 1)\nprint(matrix[2][0])  # 5 (row 2, column 0)\n\n1\n2\n5\n\n\n\n\nLooping Through a Matrix\n\nfor row in matrix:\n    for item in row:\n        print(item, end=' ')\n    print()  # new line after each row",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "Lists"
    ]
  },
  {
    "objectID": "02_python/python-intro/01-Intro-to-Python-basic.html",
    "href": "02_python/python-intro/01-Intro-to-Python-basic.html",
    "title": "What is Python?",
    "section": "",
    "text": "Python is a high-level, general-purpose programming language known for its readability and simplicity. It was created by Guido van Rossum and first released in 1991.\n\n\n\nHigh-level: You don’t need to manage memory or worry about hardware-level operations.\nInterpreted: Python runs line-by-line, which makes it easier to test and debug.\nDynamically typed: You don’t need to declare variable types—they’re inferred at runtime.\nMulti-paradigm: You can write code using procedural, object-oriented, or functional programming styles.\n\n\nPython was named after the British comedy show “Monty Python’s Flying Circus,” not the snake!\n\n\n\n\nPython is designed to be: - Simple to read and write: The syntax is clean and English-like. - Beginner-friendly: Python has a gentle learning curve. - Powerful and versatile: It’s used by professionals in many fields.\nHere’s what Python code looks like compared to another language:\n\n\nPython:\nprint(\"Hello, world!\")\nJava:\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, world!\");\n    }\n}",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "What is Python?"
    ]
  },
  {
    "objectID": "02_python/python-intro/01-Intro-to-Python-basic.html#key-facts-about-python",
    "href": "02_python/python-intro/01-Intro-to-Python-basic.html#key-facts-about-python",
    "title": "What is Python?",
    "section": "",
    "text": "High-level: You don’t need to manage memory or worry about hardware-level operations.\nInterpreted: Python runs line-by-line, which makes it easier to test and debug.\nDynamically typed: You don’t need to declare variable types—they’re inferred at runtime.\nMulti-paradigm: You can write code using procedural, object-oriented, or functional programming styles.\n\n\nPython was named after the British comedy show “Monty Python’s Flying Circus,” not the snake!",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "What is Python?"
    ]
  },
  {
    "objectID": "02_python/python-intro/01-Intro-to-Python-basic.html#why-should-you-care",
    "href": "02_python/python-intro/01-Intro-to-Python-basic.html#why-should-you-care",
    "title": "What is Python?",
    "section": "",
    "text": "Python is designed to be: - Simple to read and write: The syntax is clean and English-like. - Beginner-friendly: Python has a gentle learning curve. - Powerful and versatile: It’s used by professionals in many fields.\nHere’s what Python code looks like compared to another language:\n\n\nPython:\nprint(\"Hello, world!\")\nJava:\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, world!\");\n    }\n}",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "What is Python?"
    ]
  },
  {
    "objectID": "02_python/python-intro/01-Intro-to-Python-basic.html#key-reasons-for-pythons-popularity",
    "href": "02_python/python-intro/01-Intro-to-Python-basic.html#key-reasons-for-pythons-popularity",
    "title": "What is Python?",
    "section": "Key Reasons for Python’s Popularity",
    "text": "Key Reasons for Python’s Popularity\n\nReadable and clean syntax – Python code looks like English.\nBeginner-friendly – great for learning programming fundamentals.\nLarge ecosystem of libraries – e.g., NumPy, Pandas, Flask, TensorFlow.\nCross-platform compatibility – runs on Windows, macOS, Linux.\nUsed in many domains – data science, AI, web dev, automation, finance, etc.\nStrong community support – extensive documentation and tutorials online.",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "What is Python?"
    ]
  },
  {
    "objectID": "02_python/python-intro/01-Intro-to-Python-basic.html#python-vs-other-languages-comparison-table",
    "href": "02_python/python-intro/01-Intro-to-Python-basic.html#python-vs-other-languages-comparison-table",
    "title": "What is Python?",
    "section": "Python vs Other Languages (Comparison Table)",
    "text": "Python vs Other Languages (Comparison Table)\n\n\n\nFeature\nPython\nJava\nC++\n\n\n\n\nSyntax simplicity\n✅ Easy\n❌ Verbose\n❌ Complex\n\n\nSpeed\n❌ Slower\n✅ Fast\n✅ Very Fast\n\n\nLearning curve\n✅ Gentle\n⚠️ Moderate\n⚠️ Steep\n\n\nUse cases\n🌐 Broad\n💼 Enterprise\n🕹️ Systems",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "What is Python?"
    ]
  },
  {
    "objectID": "02_python/python-intro/01-Intro-to-Python-basic.html#developer-productivity-over-execution-speed",
    "href": "02_python/python-intro/01-Intro-to-Python-basic.html#developer-productivity-over-execution-speed",
    "title": "What is Python?",
    "section": "Developer Productivity Over Execution Speed",
    "text": "Developer Productivity Over Execution Speed\nPython prioritizes developer time over machine execution speed. This makes it ideal for rapid prototyping, teaching, and solving real-world problems efficiently.",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "What is Python?"
    ]
  },
  {
    "objectID": "02_python/python-intro/01-Intro-to-Python-basic.html#what-is-a-variable",
    "href": "02_python/python-intro/01-Intro-to-Python-basic.html#what-is-a-variable",
    "title": "What is Python?",
    "section": "What is a Variable?",
    "text": "What is a Variable?\nA variable is like a container for storing a value. You create one using the = operator.\n\nname = \"Alice\"\nage = 25\nheight = 1.68\nis_student = True\n\nprint(name)\nprint(age)\nprint(height)\nprint(is_student)\n\nAlice\n25\n1.68\nTrue",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "What is Python?"
    ]
  },
  {
    "objectID": "02_python/python-intro/01-Intro-to-Python-basic.html#what-are-data-types",
    "href": "02_python/python-intro/01-Intro-to-Python-basic.html#what-are-data-types",
    "title": "What is Python?",
    "section": "What are Data Types?",
    "text": "What are Data Types?\nPython automatically assigns a type based on the value. You can use the type() function to check a variable’s type.\n\nprint(type(name))      # &lt;class 'str'&gt;\nprint(type(age))       # &lt;class 'int'&gt;\nprint(type(height))    # &lt;class 'float'&gt;\nprint(type(is_student))# &lt;class 'bool'&gt;\n\n&lt;class 'str'&gt;\n&lt;class 'int'&gt;\n&lt;class 'float'&gt;\n&lt;class 'bool'&gt;",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "What is Python?"
    ]
  },
  {
    "objectID": "02_python/python-intro/01-Intro-to-Python-basic.html#basic-types",
    "href": "02_python/python-intro/01-Intro-to-Python-basic.html#basic-types",
    "title": "What is Python?",
    "section": "Basic Types",
    "text": "Basic Types\n\nint – Integer\nUsed for whole numbers (positive or negative), without decimals.\na = 42  # age, count, ID number\n\n\nfloat – Floating Point Number\nUsed for decimal or fractional values.\npi = 3.14159  # measurements, scores, percentages\n\n\nstr – String\nText enclosed in quotes. Can include letters, numbers, or symbols.\nname = \"Alice\"\n\n\nbool – Boolean\nUsed for logic-based values: True or False.\nis_raining = False",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "What is Python?"
    ]
  },
  {
    "objectID": "02_python/python-intro/01-Intro-to-Python-basic.html#container-types",
    "href": "02_python/python-intro/01-Intro-to-Python-basic.html#container-types",
    "title": "What is Python?",
    "section": "Container Types",
    "text": "Container Types\n\nlist – List\nAn ordered collection of items. Lists can contain values of different types.\n# Same-type list\ncolors = [\"red\", \"green\", \"blue\"]\n\n# Mixed-type list\nperson = [\"Alice\", 30, 5.6, True]\n\n\ndict – Dictionary\nStores key-value pairs, like a mini-database or object.\nstudent = {\"name\": \"Alice\", \"grade\": 90}",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "What is Python?"
    ]
  },
  {
    "objectID": "02_python/python-intro/01-Intro-to-Python-basic.html#dynamic-typing",
    "href": "02_python/python-intro/01-Intro-to-Python-basic.html#dynamic-typing",
    "title": "What is Python?",
    "section": "Dynamic Typing",
    "text": "Dynamic Typing\nVariables in Python can be reassigned to values of different types.\n\nx = 10         # x is an int\nprint(type(x))\n\nx = \"ten\"      # now x is a str\nprint(type(x))\n\n&lt;class 'int'&gt;\n&lt;class 'str'&gt;",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "What is Python?"
    ]
  },
  {
    "objectID": "02_python/python-intro/01-Intro-to-Python-basic.html#summary",
    "href": "02_python/python-intro/01-Intro-to-Python-basic.html#summary",
    "title": "What is Python?",
    "section": "✅ Summary",
    "text": "✅ Summary\n\nVariables store data\nPython figures out the type for you\nUse type() to inspect variables\nYou can reassign variables to new types\nLists can contain mixed types, which is powerful but should be used carefully\n\n\nList\nA list is an ordered, mutable collection of items.\nIt can hold values of the same type or mix different types.\n# Same-type list\ncolors = [\"red\", \"green\", \"blue\"]\n\n# Mixed-type list\nperson = [\"Alice\", 30, 5.6, True]\n\nperson = [\"Alice\", 30, 5.6, True]\nprint(person[0])  # \"Alice\"\nprint(person[1])  # 30\n\nAlice\n30\n\n\nYou can also modify lists by appending, removing, or updating elements:\n\nperson.append(\"New York\")\nperson[1] = 31\nprint(person)\n\n['Alice', 31, 5.6, True, 'New York']\n\n\n\n\nUsing Dictionaries to Represent Single and Multiple Items\nIn Python, a dictionary represents one item (e.g., one student). To store multiple such items, we use a list of dictionaries.\nOne Dictionary for One Student\n\nstudent = {\n    \"name\": \"Alice\",\n    \"age\": 21,\n    \"major\": \"Computer Science\"\n}\nprint(student[\"name\"])\nprint(student[\"major\"])\n\nAlice\nComputer Science\n\n\nList of Dictionaries for Multiple Students\n\nstudents = [\n    {\"name\": \"Alice\", \"age\": 21, \"major\": \"CS\"},\n    {\"name\": \"Bob\", \"age\": 22, \"major\": \"Math\"},\n    {\"name\": \"Cara\", \"age\": 20, \"major\": \"Biology\"}\n]\n\n# Accessing second student's major\nprint(students[1][\"major\"])\n\nMath\n\n\nLooping Through a List of Dictionaries\n\nfor student in students:\n    print(student[\"name\"], \"is studying\", student[\"major\"])\n\nAlice is studying CS\nBob is studying Math\nCara is studying Biology\n\n\n\n\nExercise\n\nAdd a new student to the students list.\nPrint each student’s name and age.\nTry changing a student’s major.\n\n\n# Original list of students\nstudents = [\n    {\"name\": \"Alice\", \"age\": 21, \"major\": \"CS\"},\n    {\"name\": \"Bob\", \"age\": 22, \"major\": \"Math\"},\n    {\"name\": \"Cara\", \"age\": 20, \"major\": \"Biology\"}\n]\n\n# Add a new student\nnew_student = {\"name\": \"David\", \"age\": 23, \"major\": \"Engineering\"}\nstudents.append(new_student)\n\n# Print each student's name and age\nfor student in students:\n    print(student[\"name\"], \"is\", student[\"age\"], \"years old.\")\n\nAlice is 21 years old.\nBob is 22 years old.\nCara is 20 years old.\nDavid is 23 years old.",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "What is Python?"
    ]
  },
  {
    "objectID": "02_python/python-intro/04-Intro-to-Python-strings.html",
    "href": "02_python/python-intro/04-Intro-to-Python-strings.html",
    "title": "Strings in Python",
    "section": "",
    "text": "A string is a sequence of characters. In Python, strings are immutable and can be created with single, double, or triple quotes.\n\nCreating Strings\n\n# Single quotes\nname = 'Alice'\nprint(name)\n\n# Double quotes\ngreeting = \"Hello\"\nprint(greeting)\n\n# Triple quotes for multi-line strings\nmessage = '''This is\na multi-line\nstring.'''\nprint(message)\n\nAlice\nHello\nThis is\na multi-line\nstring.\n\n\nExercise: Create a string with your name and another string with your favorite hobby, then print them together.\n\nname = \"Alice\"\nhobby = \"painting\"\nprint(name + \" enjoys \" + hobby)\n\nAlice enjoys painting\n\n\n\n\nString Length\n\ntext = \"Hello\"\nprint(len(text))\n\n\n\nAccessing Characters (Indexing & Slicing)\n\nword = \"Python\"\nprint(word[0])    # First character\nprint(word[-1])   # Last character\nprint(word[0:3])  # Slice from index 0 to 2\n\nExercise: Print the first three letters of your name using slicing.\n\nname = \"Alice\"\nprint(name[:3])\n\nAli\n\n\n\n\nString Operations\n\nfirst = \"Hello\"\nsecond = \"World\"\nprint(first + \" \" + second)  # Concatenation\nlaugh = \"ha\"\nprint(laugh * 3)              # Repetition\n\nExercise: Concatenate your first and last name with a space between them.\n\nfirst_name = \"Alice\"\nlast_name = \"Smith\"\nfull_name = first_name + \" \" + last_name\nprint(full_name)\n\nAlice Smith\n\n\n\n\nString Methods\n\ns = \"  Hello World  \"\nprint(s.lower())\nprint(s.upper())\nprint(s.title())\nprint(s.strip())\nprint(s.replace(\"World\", \"Python\"))\nprint(s.split())\nprint(\"-\".join([\"a\", \"b\", \"c\"]))\n\nExercise: Take a sentence and:\n\nConvert it to uppercase.\nReplace one word with another.\nSplit it into a list of words.\n\n\nsentence = \"Python is fun\"\nprint(sentence.upper())\nprint(sentence.replace(\"fun\", \"awesome\"))\nprint(sentence.split())\n\nPYTHON IS FUN\nPython is awesome\n['Python', 'is', 'fun']\n\n\n\n\nEscape Characters\n\nprint(\"Line 1\\nLine 2\")\nprint(\"Tab\\tSpace\")\nprint(\"She said \\\"Hello\\\"\")\n\n\n\nf-Strings (Formatted Strings)\n\nname = \"Alice\"\nage = 25\nprint(f\"My name is {name} and I am {age} years old.\")\n\nExercise: Create two variables (city and temperature) and print a sentence using f-strings.\n\ncity = \"Tokyo\"\ntemperature = 26\nprint(f\"The temperature in {city} is {temperature}°C today.\")\n\nThe temperature in Tokyo is 26°C today.\n\n\n\n\nStrings are Immutable\n\nword = \"Python\"\n# word[0] = \"J\"  # This would cause an error\nword = \"J\" + word[1:]\nprint(word)\n\n\n\nSummary\n\nStrings store sequences of characters.\nThey are immutable.\nYou can use indexing, slicing, concatenation, and repetition.\nString methods allow transformations and queries.\nf-strings provide an easy way to format text.",
    "crumbs": [
      "Python",
      "Introduction to Python",
      "Strings in Python"
    ]
  }
]