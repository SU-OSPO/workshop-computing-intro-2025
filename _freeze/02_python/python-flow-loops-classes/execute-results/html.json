{
  "hash": "d012dea0129fc37ae6222233226967c8",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Flow, Loops, and Classes'\njupyter: python3\norder: 2\n---\n\n\n\n\n\nScratch notebook for the this session: [![Open Python Apps Tutorial](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/SU-OSPO/workshop-computing-intro-2025/blob/main/02_python/flow-loops-classes-scratch.ipynb)\n\n\n##  1. Flow Control\n\n### 1.1 Sequential Execution\n\nIn Python, code is executed one line at a time, from top to bottom, unless you use something that changes the flow (like a function call or a loop).\n\n::: {#ec5b1ec1 .cell ExecuteTime='{\"end_time\":\"2025-07-30T20:38:15.635860Z\",\"start_time\":\"2025-07-30T20:38:15.630741Z\"}' execution_count=1}\n``` {.python .cell-code}\nprint(\"Step 1\")\nprint(\"Step 2\")\nprint(\"Step 3\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStep 1\nStep 2\nStep 3\n```\n:::\n:::\n\n\nEach line is executed in order.\n\n### 1.2 Conditional Statements (`if`, `elif`, `else`)\nConditional statements let your code make decisions based on certain conditions.\n\n### 1.2.1 Basic Structure:\n\n```python\nif condition:\n    # code runs if condition is True\nelif other_condition:\n    # code runs if other_condition is True\nelse:\n    # code runs if none of the above are True\n```\n\n::: {#04d84e3d .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:07:04.413473Z\",\"start_time\":\"2025-07-30T21:07:04.407968Z\"}' execution_count=2}\n``` {.python .cell-code}\n# Example:\n\nage = 24\n\nif age >= 21:\n    print(\"You can legally drink alcohol in the U.S.\")\nelif age >= 18:\n    print(\"You are an adult, but not old enough to drink.\")\nelse:\n    print(\"You are a minor.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nYou can legally drink alcohol in the U.S.\n```\n:::\n:::\n\n\n### 1.2.2 Multiple Conditions:\n\nYou can also combine conditions using `and`, `or`, and `not`.\n\n::: {#dccd14d8 .cell ExecuteTime='{\"end_time\":\"2025-07-30T20:44:25.416537Z\",\"start_time\":\"2025-07-30T20:44:25.413266Z\"}' execution_count=3}\n``` {.python .cell-code}\n# Example\n\ntemperature_f = 75  # Fahrenheit\nis_raining = False\n\nif temperature_f > 70 and not is_raining:\n    print(\"It's a great day for a baseball game!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIt's a great day for a baseball game!\n```\n:::\n:::\n\n\n### 1.3 Conditional (Ternary) Expressions\n\nA conditional (ternary) expression lets you assign a value based on a condition in a single line.\n\n**Syntax:**\n`x = a if condition else b`\n\n::: {#913ab7d7 .cell ExecuteTime='{\"end_time\":\"2025-07-30T20:45:20.647771Z\",\"start_time\":\"2025-07-30T20:45:20.644147Z\"}' execution_count=4}\n``` {.python .cell-code}\n# Example\n\nage = 20\nstatus = \"can rent a car\" if age >= 25 else \"cannot rent a car yet\"\nprint(status)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncannot rent a car yet\n```\n:::\n:::\n\n\n### 1.4 `pass`, `break`, `continue`\nThese keywords control how your code flows in loops and conditionals.\n\n#### `pass`\n\n`pass` does nothing. It’s used as a placeholder when code is required but you have nothing to write yet.\n\n::: {#8d2d22b1 .cell ExecuteTime='{\"end_time\":\"2025-07-30T20:46:27.911777Z\",\"start_time\":\"2025-07-30T20:46:27.908680Z\"}' execution_count=5}\n``` {.python .cell-code}\nif True:\n    pass  # Placeholder for future code\n```\n:::\n\n\nSuppose you’re building a menu system for a fast-food restaurant app, and you haven’t yet decided what to do if the customer selects a menu item that’s “coming soon.” You want your code to run without errors, but you’re not ready to implement that part yet.\n\n::: {#41774fac .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:09:40.672657Z\",\"start_time\":\"2025-07-30T21:09:40.669092Z\"}' execution_count=6}\n``` {.python .cell-code}\nmenu_item = \"Pumpkin Spice Latte\"\n\nif menu_item == \"Pumpkin Spice Latte\":\n    # Feature coming soon!\n    pass\nelse:\n    print(f\"Preparing your {menu_item}.\")\n```\n:::\n\n\n#### `break`\n\n`break` exits the loop immediately.\n\n::: {#8d90c9d1 .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:08:34.210052Z\",\"start_time\":\"2025-07-30T21:08:34.207698Z\"}' execution_count=7}\n``` {.python .cell-code}\nfor i in range(5):\n    if i == 2:\n        break\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n```\n:::\n:::\n\n\nImagine you’re searching for a specific item (like your keys) in a list of rooms. As soon as you find the keys, you want to stop searching.\n\n::: {#d7956fff .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:10:09.489247Z\",\"start_time\":\"2025-07-30T21:10:09.485199Z\"}' execution_count=8}\n``` {.python .cell-code}\nrooms = [\"kitchen\", \"living room\", \"bedroom\", \"garage\"]\nfor room in rooms:\n    print(f\"Searching in the {room}...\")\n    if room == \"bedroom\":\n        print(\"Found the keys!\")\n        break\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSearching in the kitchen...\nSearching in the living room...\nSearching in the bedroom...\nFound the keys!\n```\n:::\n:::\n\n\n#### `continue`\n\n`continue` skips the rest of the current loop iteration and moves to the next one.\n\n::: {#37cbd6ea .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:10:38.221301Z\",\"start_time\":\"2025-07-30T21:10:38.218261Z\"}' execution_count=9}\n``` {.python .cell-code}\nfor i in range(5):\n    if i == 2:\n        continue\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n3\n4\n```\n:::\n:::\n\n\nSuppose you’re reading through a list of email subject lines. You want to print all of them except spam emails, which contain the word \"SPAM.\" You skip printing any email that’s spam.\n\n::: {#417e0647 .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:11:22.905417Z\",\"start_time\":\"2025-07-30T21:11:22.901765Z\"}' execution_count=10}\n``` {.python .cell-code}\nemails = [\"Meeting at 10am\", \"SPAM: Win a free iPhone\", \"Lunch plans?\", \"SPAM: Hot deals\"]\nfor subject in emails:\n    if \"SPAM\" in subject:\n        continue  # Skip spam emails\n    print(f\"Important email: {subject}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nImportant email: Meeting at 10am\nImportant email: Lunch plans?\n```\n:::\n:::\n\n\n## 2. Loops\n\n### 2.1 `for` Loops\nA `for` loop is used to repeat actions a certain number of times or to iterate over a sequence (like a list).\n\n::: {#792a12ef .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:12:40.887230Z\",\"start_time\":\"2025-07-30T21:12:40.884900Z\"}' execution_count=11}\n``` {.python .cell-code}\n# Print numbers from 0 to 4\nfor i in range(5):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n```\n:::\n:::\n\n\nYou can loop over the elements of a list like this:\n\n::: {#b98ceb47 .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:38:54.655732Z\",\"start_time\":\"2025-07-30T21:38:54.652901Z\"}' execution_count=12}\n``` {.python .cell-code}\nanimals = ['cat', 'dog', 'monkey']\nfor animal in animals:\n    print(animal)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncat\ndog\nmonkey\n```\n:::\n:::\n\n\nIf you want access to the index of each element within the body of a loop, use the built-in `enumerate()` function:\n\n::: {#47f43dac .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:39:10.688244Z\",\"start_time\":\"2025-07-30T21:39:10.685339Z\"}' execution_count=13}\n``` {.python .cell-code}\nanimals = ['cat', 'dog', 'monkey']\nfor index, animal in enumerate(animals):\n    print('#{}: {}'.format(index + 1, animal))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#1: cat\n#2: dog\n#3: monkey\n```\n:::\n:::\n\n\n### 2.2 `while` Loops\n\nA `while` loop repeats actions as long as a condition is true.\n\n::: {#1bf25bde .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:13:01.407363Z\",\"start_time\":\"2025-07-30T21:13:01.404509Z\"}' execution_count=14}\n``` {.python .cell-code}\ncount = 0\nwhile count < 3:\n    print(count)\n    count += 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n```\n:::\n:::\n\n\n### 2.3 Nested Loops\nA nested loop is a loop inside another loop.\n\n::: {#b21a56fb .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:13:17.056449Z\",\"start_time\":\"2025-07-30T21:13:17.053423Z\"}' execution_count=15}\n``` {.python .cell-code}\nfor i in range(2):\n    for j in range(2):\n        print(f\"i={i}, j={j}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ni=0, j=0\ni=0, j=1\ni=1, j=0\ni=1, j=1\n```\n:::\n:::\n\n\n###  2.4 Loops with `else`\nThe `else` part after a loop runs only if the loop was not stopped by a break.\n\n::: {#dab6dc95 .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:14:49.509727Z\",\"start_time\":\"2025-07-30T21:14:49.506988Z\"}' execution_count=16}\n``` {.python .cell-code}\nfor i in range(3):\n    print(i)\nelse:\n    print(\"Loop finished without break.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\nLoop finished without break.\n```\n:::\n:::\n\n\n### 2.5 `enumerate`, `zip`\n\n#### `enumerate`\n`enumerate` gives you both the index and the value when looping over a list.\n\n::: {#32632293 .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:15:11.940014Z\",\"start_time\":\"2025-07-30T21:15:11.936756Z\"}' execution_count=17}\n``` {.python .cell-code}\nnames = [\"Alice\", \"Bob\", \"Charlie\"]\nfor index, name in enumerate(names):\n    print(index, name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0 Alice\n1 Bob\n2 Charlie\n```\n:::\n:::\n\n\n#### `zip`\n`zip` lets you loop over two (or more) lists at the same time.\n\n::: {#02950253 .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:17:23.711921Z\",\"start_time\":\"2025-07-30T21:17:23.708177Z\"}' execution_count=18}\n``` {.python .cell-code}\nfruits = [\"apple\", \"banana\", \"cherry\"]\ncolors = [\"red\", \"yellow\", \"red\"]\nfor fruit, color in zip(fruits, colors):\n    print(fruit, color)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\napple red\nbanana yellow\ncherry red\n```\n:::\n:::\n\n\n### 2.6 List Comprehensions\nA list comprehension is a short way to create a new list by looping over something.\n\n::: {#529c50ec .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:33:21.787169Z\",\"start_time\":\"2025-07-30T21:33:21.777625Z\"}' execution_count=19}\n``` {.python .cell-code}\n[i for i in range(10)]\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n:::\n:::\n\n\n::: {#ab401e13 .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:33:35.127786Z\",\"start_time\":\"2025-07-30T21:33:35.123893Z\"}' execution_count=20}\n``` {.python .cell-code}\n[i**2 for i in range(10)]\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\n:::\n:::\n\n\nWe can even add some conditions.\n\n::: {#621c58fa .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:34:18.492949Z\",\"start_time\":\"2025-07-30T21:34:18.488531Z\"}' execution_count=21}\n``` {.python .cell-code}\n[i for i in range(10) if i > 5]\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n[6, 7, 8, 9]\n```\n:::\n:::\n\n\nMultiples of 2.\n\n::: {#31f0afe7 .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:34:33.343838Z\",\"start_time\":\"2025-07-30T21:34:33.339615Z\"}' execution_count=22}\n``` {.python .cell-code}\n[i for i in range(10) if i % 2 == 0]\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n[0, 2, 4, 6, 8]\n```\n:::\n:::\n\n\nPowers of 2.\n\n::: {#c8c74d51 .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:34:49.574044Z\",\"start_time\":\"2025-07-30T21:34:49.570928Z\"}' execution_count=23}\n``` {.python .cell-code}\n[i**2 for i in range(10)]\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\n:::\n:::\n\n\nYou can nest comprehensions.\n\n::: {#2e9b142f .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:35:04.573267Z\",\"start_time\":\"2025-07-30T21:35:04.568589Z\"}' execution_count=24}\n``` {.python .cell-code}\n[[[i, j] for i in range(5)] for j in range(5)]\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n[[[0, 0], [1, 0], [2, 0], [3, 0], [4, 0]],\n [[0, 1], [1, 1], [2, 1], [3, 1], [4, 1]],\n [[0, 2], [1, 2], [2, 2], [3, 2], [4, 2]],\n [[0, 3], [1, 3], [2, 3], [3, 3], [4, 3]],\n [[0, 4], [1, 4], [2, 4], [3, 4], [4, 4]]]\n```\n:::\n:::\n\n\nYou can concatenate multiple comprehensions.\n\n::: {#2752470b .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:35:17.273795Z\",\"start_time\":\"2025-07-30T21:35:17.270750Z\"}' execution_count=25}\n``` {.python .cell-code}\n[[i, j] for i in range(5) for j in range(5) if i < j]\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n[[0, 1],\n [0, 2],\n [0, 3],\n [0, 4],\n [1, 2],\n [1, 3],\n [1, 4],\n [2, 3],\n [2, 4],\n [3, 4]]\n```\n:::\n:::\n\n\n## 3. Classes (OOP)\n\n### 3.1 What is a Class? Why OOP?\n\nIn Python, a **class** is a code construct used to define a new type of object, grouping together data and functions that operate on that data.\nClasses provide a means of bundling data and functionality together. Creating a new class creates a new type of object, allowing new instances of that type to be made.\n\n**Object-Oriented Programming (OOP)** is a programming paradigm based on the concept of \"objects,\" which can contain both data (attributes) and code (methods).\n\nWhen you create an object using a class, that object is called an **instance** of the class.\n\n\n#### Example from the Python Standard Tutorial\n\n> “Classes provide a means of bundling data and functionality together. Creating a new class creates a new type of object, allowing new instances of that type to be made. Each class instance can have attributes attached to it for maintaining its state. Class instances can also have methods (defined by its class) for modifying its state.”\n> *(Python Official Tutorial)*\n\n#### Simple Example\n\nHere is a simple class that models a basic point in two-dimensional space:\n\n::: {#e10f81b2 .cell ExecuteTime='{\"end_time\":\"2025-07-31T00:17:01.963663Z\",\"start_time\":\"2025-07-31T00:17:01.960432Z\"}' execution_count=26}\n``` {.python .cell-code}\nclass Point:\n    \"\"\"A class to represent a point in 2D space.\"\"\"\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\np = Point(2, 3)\nprint(p.x)  # Output: 2\nprint(p.y)  # Output: 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n3\n```\n:::\n:::\n\n\nIn this example:\n\n- Point is a class.\n\n- p is an instance of Point, with specific x and y coordinates.\n\n- The __init__ method is called the constructor and initializes the instance attributes.\n\n### 3.2 Defining a Class\nIn Python, a class is defined using the `class` keyword, followed by the class name and a colon.\nThe body of the class contains statements that define its attributes and methods.\n\nHere is the simplest possible class definition:\n\n::: {#56c48d15 .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:20:41.208106Z\",\"start_time\":\"2025-07-30T21:20:41.205591Z\"}' execution_count=27}\n``` {.python .cell-code}\nclass Dog:\n    pass  # 'pass' is a placeholder indicating an empty block\n```\n:::\n\n\nThis statement defines a new class named `Dog`.\nAt this stage, the class has no attributes (data) or methods (actions). It serves as a minimal template from which instances can be created.\n\n**Note:**\nBy convention, class names in Python use the CapitalizedWords naming style (also known as CamelCase).\n\n#### Explanation\n\n- `class Dog:` declares a class named `Dog`.\n- The `pass` statement is syntactically required because Python expects an indented block after the colon; here, it indicates that the class has no content yet.\n- This class can later be extended with attributes (e.g., `name`, `age`) and methods (e.g., `bark()`).\n\n### 3.3 Constructor Method `__init__`\n\nThe constructor method `__init__` is a special method in Python classes.\nIt is called automatically when a new instance of the class is created.\nThis method is commonly used to initialize (set up) the attributes of the new object.\n\n- The first parameter of `__init__` is always `self`, which refers to the instance being created.\n- Additional parameters allow you to pass in initial values for the object's attributes.\n\n::: {#39cdd6ff .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:21:51.826450Z\",\"start_time\":\"2025-07-30T21:21:51.823809Z\"}' execution_count=28}\n``` {.python .cell-code}\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name  # Each dog has a name\n        self.age = age    # Each dog has an age\n```\n:::\n\n\nIn this example, every time a new `Dog` object is created, you must provide a `name` and an `age`, which are stored as attributes of the instance.\n\n### 3.4 Creating Objects\n\nTo create (or **instantiate**) an object from a class, call the class as if it were a function, passing any required arguments to the constructor (`__init__` method).\n\n::: {#1cea19c0 .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:22:13.975326Z\",\"start_time\":\"2025-07-30T21:22:13.972102Z\"}' execution_count=29}\n``` {.python .cell-code}\nmy_dog = Dog(\"Buddy\", 3)\nprint(my_dog.name)  # Output: Buddy\nprint(my_dog.age)   # Output: 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBuddy\n3\n```\n:::\n:::\n\n\nHere,\n\n- `my_dog` is an instance of the `Dog` class, initialized with the name `\"Buddy\"` and age `3`.\n- The attributes `name` and `age` are accessed using dot notation (for example, `my_dog.name`).\n\n**Summary:**\nInstantiating a class creates a new object with its own unique set of data, as specified by the constructor.\n\n### 3.5 Instance Methods\n\n**Instance methods** are functions defined inside a class that operate on individual instances of that class.\nThey can access and modify the data (attributes) that belong to the specific object.\n\n- Every instance method has `self` as its first parameter.\n  `self` refers to the instance through which the method is called, allowing access to the object’s attributes.\n\n**Example:**\n\n::: {#68fac43c .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:22:39.747187Z\",\"start_time\":\"2025-07-30T21:22:39.744005Z\"}' execution_count=30}\n``` {.python .cell-code}\nclass Dog:\n    def __init__(self, name):\n        self.name = name\n\n    def bark(self):\n        print(f\"{self.name} says woof!\")\n\nmy_dog = Dog(\"Buddy\")\nmy_dog.bark()  # Output: Buddy says woof!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBuddy says woof!\n```\n:::\n:::\n\n\nIn this example:\n\n- `bark` is an instance method.\n- It uses `self.name` to access data specific to that instance.\n- When you call `my_dog.bark()`, the method prints `\"Buddy says woof!\"`.\n\n**Summary:**\nInstance methods enable each object created from a class to perform behaviors that may depend on its own data.\n\n### 3.6 Class Attributes vs. Instance Attributes\n\nClass attributes are shared by all objects of the class.\nInstance attributes belong only to one specific object.\n\n::: {#42a262d0 .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:23:05.891598Z\",\"start_time\":\"2025-07-30T21:23:05.888082Z\"}' execution_count=31}\n``` {.python .cell-code}\nclass Dog:\n    species = \"Canine\"  # Class attribute\n\n    def __init__(self, name):\n        self.name = name  # Instance attribute\n\ndog1 = Dog(\"Buddy\")\ndog2 = Dog(\"Bella\")\n\nprint(dog1.species)  # Output: Canine\nprint(dog2.species)  # Output: Canine\n\nprint(dog1.name)     # Output: Buddy\nprint(dog2.name)     # Output: Bella\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCanine\nCanine\nBuddy\nBella\n```\n:::\n:::\n\n\n- `species` is a **class attribute**. It is shared by all instances of the class `Dog`.\n- `name` is an **instance attribute**. Each object has its own separate value for `name`.\n\nWhen you access `dog1.species` or `dog2.species`, both will return `\"Canine\"`, because `species` is shared.\n\nWhen you access `dog1.name` and `dog2.name`, they return `\"Buddy\"` and `\"Bella\"` respectively, because `name` is specific to each object.\n\n### 3.7 Inheritance\n**Inheritance** is a fundamental feature of object-oriented programming.\nIt allows you to define a new class (called a **subclass** or **derived class**) based on an existing class (called a **superclass** or **base class**).\nThe subclass inherits all the attributes and methods of the superclass, and can also introduce its own or override existing ones.\n\nThis enables code reuse and logical hierarchy between classes.\n\n**Example:**\n\n::: {#1cd8a80b .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:23:41.310320Z\",\"start_time\":\"2025-07-30T21:23:41.307213Z\"}' execution_count=32}\n``` {.python .cell-code}\nclass Animal:\n    def speak(self):\n        print(\"This animal makes a sound.\")\n\nclass Dog(Animal):\n    def bark(self):\n        print(\"Woof!\")\n\nmy_dog = Dog()\nmy_dog.speak()  # Output: This animal makes a sound.\nmy_dog.bark()   # Output: Woof!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis animal makes a sound.\nWoof!\n```\n:::\n:::\n\n\n**Explanation:**\n\n- `Animal` is the **superclass**.\n- `Dog` is the **subclass**, which inherits from `Animal`.\n- `Dog` automatically has the `speak` method from `Animal`, and also defines its own `bark` method.\n- When you create an instance of `Dog`, you can call both `speak` (inherited) and `bark` (defined in `Dog`).\n\n**Summary:**\nInheritance lets you build classes that share common behaviors, reducing code duplication and making code easier to maintain.\n\n### 3.8 Method Overriding\n\n**Method overriding** allows a subclass to provide a specific implementation of a method that is already defined in its superclass.\nThis enables a subclass to change or extend the behavior of inherited methods.\n\n**Example:**\n\n::: {#bbbc4766 .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:24:05.042638Z\",\"start_time\":\"2025-07-30T21:24:05.039314Z\"}' execution_count=33}\n``` {.python .cell-code}\nclass Animal:\n    def speak(self):\n        print(\"Animal sound\")\n\nclass Dog(Animal):\n    def speak(self):\n        print(\"Bark!\")  # Overrides the speak method\n\nmy_dog = Dog()\nmy_dog.speak()  # Output: Bark!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBark!\n```\n:::\n:::\n\n\n**Explanation:**\n\n- The `Animal` class defines a method called `speak`.\n- The `Dog` subclass defines its own `speak` method, which **overrides** the one inherited from `Animal`.\n- When `speak()` is called on a `Dog` instance, the version in `Dog` is executed instead of the version in `Animal`.\n\n**Summary:**\nMethod overriding allows subclasses to modify or completely replace behaviors inherited from a parent class.\n\n### 3.9 Magic Methods (Dunder Methods)\n\n**Magic methods** (also known as **dunder methods**, because they start and end with double underscores) are special methods in Python that allow you to define how your objects interact with Python’s built-in functions and operators.\n\nSome commonly used magic methods include:\n\n- `__init__` — called when a new object is created (the constructor)\n- `__str__` — defines what should be returned when the object is printed with `print()`\n\n**Example:**\n\n::: {#aecc0769 .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:24:40.147409Z\",\"start_time\":\"2025-07-30T21:24:40.144009Z\"}' execution_count=34}\n``` {.python .cell-code}\nclass Dog:\n    def __init__(self, name):\n        self.name = name\n\n    def __str__(self):\n        return f\"This dog's name is {self.name}.\"\n\nmy_dog = Dog(\"Buddy\")\nprint(my_dog)  # Output: This dog's name is Buddy.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis dog's name is Buddy.\n```\n:::\n:::\n\n\n**Explanation:**\n\n- The `__init__` method initializes the `name` attribute when a new `Dog` object is created.\n- The `__str__` method returns a string representation of the object, which is used when you call `print()` on the object.\n\n**Summary:**\nMagic methods let you customize how your objects behave with standard Python operations, such as printing, addition, comparison, and more.\n\n### 3.10 Class Methods and Static Methods\n- Class methods affect the class itself, not just one object.\n\n- Static methods are like normal functions, but live inside the class.\n\n::: {#d6a9bba0 .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:25:07.995373Z\",\"start_time\":\"2025-07-30T21:25:07.991928Z\"}' execution_count=35}\n``` {.python .cell-code}\nclass Dog:\n    dogs_count = 0  # Class attribute\n\n    def __init__(self, name):\n        self.name = name\n        Dog.dogs_count += 1\n\n    @classmethod\n    def get_dogs_count(cls):\n        return cls.dogs_count\n\n    @staticmethod\n    def bark():\n        print(\"Woof!\")\n\ndog1 = Dog(\"Buddy\")\ndog2 = Dog(\"Bella\")\nprint(Dog.get_dogs_count())  # Output: 2\nDog.bark()  # Output: Woof!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\nWoof!\n```\n:::\n:::\n\n\n**Explanation:**\n\n- `dogs_count` is a class attribute, shared by all instances of the `Dog` class.\n- The `@classmethod` decorator is used to define a class method. Class methods receive the class itself as the first argument, conventionally named `cls`.\n  - `get_dogs_count` returns the current count of all `Dog` instances.\n- The `@staticmethod` decorator is used to define a static method. Static methods do not receive an implicit first argument (neither the class nor the instance).\n  - `bark` can be called on the class itself, and behaves like a regular function, but lives inside the class's namespace.\n\n**Summary:**\n- Class methods can modify or access class-level data that is shared across all instances.\n- Static methods are utility functions that have a logical connection to the class, but do not access or modify class or instance data.\n\n### 3.11 Simple AI Assistant Class\n\nThis example builds a basic AI Assistant class.\nThe assistant can answer questions, remember a history of questions, and keep track of how many questions it has been asked.\n\n::: {#7a92187a .cell ExecuteTime='{\"end_time\":\"2025-07-30T21:26:31.762902Z\",\"start_time\":\"2025-07-30T21:26:31.757553Z\"}' execution_count=36}\n``` {.python .cell-code}\nclass AIAssistant:\n    total_questions = 0  # Class attribute to count total questions asked to all assistants\n\n    def __init__(self, name):\n        self.name = name\n        self.question_history = []  # Instance attribute to store asked questions\n\n    def answer(self, question):\n        \"\"\"Answer a question and save it to history.\"\"\"\n        AIAssistant.total_questions += 1\n        self.question_history.append(question)\n        print(f\"{self.name}: You asked, '{question}'\")\n        # Very basic response logic:\n        if \"weather\" in question.lower():\n            print(\"I'm not connected to the internet, but I hope it's sunny!\")\n        elif \"name\" in question.lower():\n            print(f\"My name is {self.name}.\")\n        else:\n            print(\"That's an interesting question!\")\n\n    def show_history(self):\n        \"\"\"Show all questions this assistant has been asked.\"\"\"\n        print(f\"Questions asked to {self.name}:\")\n        for q in self.question_history:\n            print(f\"- {q}\")\n\n    @classmethod\n    def show_total_questions(cls):\n        \"\"\"Show how many questions have been asked to all AI assistants.\"\"\"\n        print(f\"Total questions asked to all assistants: {cls.total_questions}\")\n\n# Example usage:\nai1 = AIAssistant(\"Alexa\")\nai2 = AIAssistant(\"Siri\")\n\nai1.answer(\"What's the weather today?\")\nai1.answer(\"What's your name?\")\nai2.answer(\"Can you help me with my homework?\")\n\nai1.show_history()\nai2.show_history()\nAIAssistant.show_total_questions()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAlexa: You asked, 'What's the weather today?'\nI'm not connected to the internet, but I hope it's sunny!\nAlexa: You asked, 'What's your name?'\nMy name is Alexa.\nSiri: You asked, 'Can you help me with my homework?'\nThat's an interesting question!\nQuestions asked to Alexa:\n- What's the weather today?\n- What's your name?\nQuestions asked to Siri:\n- Can you help me with my homework?\nTotal questions asked to all assistants: 3\n```\n:::\n:::\n\n\n## 4. Exceptions\n\n### What Is an Exception?\n\nAn **exception** is a special object that signals an error or an unexpected situation in your program.\nFor example, dividing by zero or trying to open a file that does not exist will cause an exception.\n\nPython uses a `try/except` block to **handle** exceptions, so your program doesn't crash when something goes wrong.\n\n\n### Basic Structure\n\nHere is the basic structure of handling exceptions in Python:\n\n```python\ntry:\n    # Code that might cause an exception\n    pass\nexcept SomeException:\n    # Code that runs if that specific exception happens\n    pass\n```\n\n### Full Example\nLet's see how it works in practice:\n\n::: {#9a606a68 .cell ExecuteTime='{\"end_time\":\"2025-07-31T00:12:12.548173Z\",\"start_time\":\"2025-07-31T00:12:12.545420Z\"}' execution_count=37}\n``` {.python .cell-code}\ntry:\n    # Try to do something risky\n    number = 1 / 1  # Change this to 1 / 0 to see an exception\nexcept ZeroDivisionError as e:\n    print(\"Caught a ZeroDivisionError!\")\n    print(e)\nexcept Exception as e:\n    print(\"Caught a general exception.\")\n    print(e)\nelse:\n    print(\"There were no exceptions.\")\nfinally:\n    print(\"This is always executed (cleanup, closing files, etc.).\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThere were no exceptions.\nThis is always executed (cleanup, closing files, etc.).\n```\n:::\n:::\n\n\n### Common Exceptions\nHere are some common Python exceptions you might see:\n\n- ZeroDivisionError – trying to divide by zero\n\n- ValueError – wrong value type (e.g., int(\"abc\"))\n\n- TypeError – wrong type used (e.g., adding a string to a number)\n\n- FileNotFoundError – file doesn’t exist\n\n- IndexError – list index out of range\n\n\n### Why Handle Exceptions?\nIf you don’t handle exceptions, your program will crash as soon as it encounters an error.\nHandling exceptions lets your program keep running or fail gracefully.\n\nReal-life analogy:\nException handling is like wearing a seatbelt. If something unexpected happens, you stay safe instead of getting hurt!\n\n\n### Practice Exercise\nTry dividing by zero and catch the exception:\n\n::: {#9b75c115 .cell ExecuteTime='{\"end_time\":\"2025-07-31T00:13:32.087618Z\",\"start_time\":\"2025-07-31T00:13:32.085402Z\"}' execution_count=38}\n``` {.python .cell-code}\ntry:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print(\"Oops! You can't divide by zero.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOops! You can't divide by zero.\n```\n:::\n:::\n\n\n## 5. Generators (Iterators)\n\n### What Is an Iterator?\nAn **iterator** is an object that lets you access items in a collection, one at a time.\nYou can get the next item from an iterator using the `next()` function.\n\n- **Lists, tuples, dictionaries, and strings** are all *iterable*, meaning you can loop through them using a `for` loop.\n\n\nThe **`yield`** statement allows you to create your own iterator, called a generator.\nGenerators are a memory-efficient way to produce values one at a time, only when you need them.\n\n::: {#146a220c .cell ExecuteTime='{\"end_time\":\"2025-07-30T23:53:13.105705Z\",\"start_time\":\"2025-07-30T23:53:13.103582Z\"}' execution_count=39}\n``` {.python .cell-code}\ndef range_custom(n):\n    i = 0\n    while i < n:\n        yield i\n        i += 1\n```\n:::\n\n\nCreate the generator.\n\n::: {#6c355d36 .cell ExecuteTime='{\"end_time\":\"2025-07-30T23:53:25.804161Z\",\"start_time\":\"2025-07-30T23:53:25.801857Z\"}' execution_count=40}\n``` {.python .cell-code}\ngen = range_custom(3)\n```\n:::\n\n\nThe type of the variable named `gen` is `generator.`\n\n::: {#40287d5c .cell ExecuteTime='{\"end_time\":\"2025-07-30T23:53:47.616799Z\",\"start_time\":\"2025-07-30T23:53:47.612186Z\"}' execution_count=41}\n``` {.python .cell-code}\ntype(gen)\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\ngenerator\n```\n:::\n:::\n\n\nIterate through the generator values.\n\n::: {#cd861349 .cell ExecuteTime='{\"end_time\":\"2025-07-30T23:54:02.468704Z\",\"start_time\":\"2025-07-30T23:54:02.465220Z\"}' execution_count=42}\n``` {.python .cell-code}\nnext(gen)\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\n0\n```\n:::\n:::\n\n\n::: {#2a0dedc7 .cell ExecuteTime='{\"end_time\":\"2025-07-30T23:54:07.107411Z\",\"start_time\":\"2025-07-30T23:54:07.104401Z\"}' execution_count=43}\n``` {.python .cell-code}\nnext(gen)\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\n1\n```\n:::\n:::\n\n\n::: {#9db87b20 .cell ExecuteTime='{\"end_time\":\"2025-07-30T23:54:13.039402Z\",\"start_time\":\"2025-07-30T23:54:13.036290Z\"}' execution_count=44}\n``` {.python .cell-code}\nnext(gen)\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\n2\n```\n:::\n:::\n\n\nThe generator raises an exception when it reaches the end.\nIf you keep calling `next()` after the generator is finished, you will get a `StopIteration` error.\n\n::: {#fd530caf .cell ExecuteTime='{\"end_time\":\"2025-07-30T23:54:32.380102Z\",\"start_time\":\"2025-07-30T23:54:32.272095Z\"}' execution_count=45}\n``` {.python .cell-code}\n# the following call will raise an exception\n# next(gen)\n```\n:::\n\n\n",
    "supporting": [
      "python-flow-loops-classes_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}